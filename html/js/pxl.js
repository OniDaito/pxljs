(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Animator, Curve2, Interpolation, KeyFrame, Matrix4, PXLWarning, RGB, RGBA, Tween, Vec2, Vec3, Vec4, ref, ref1;

ref = require('../math/math'), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix4 = ref.Matrix4;

ref1 = require('../colour/colour'), RGB = ref1.RGB, RGBA = ref1.RGBA;

PXLWarning = require('../util/log').PXLWarning;

Curve2 = require('../math/curve').Curve2;


/* Interpolation */

Interpolation = (function() {
  function Interpolation(obj0, obj1, curve) {
    this.obj0 = obj0;
    this.obj1 = obj1;
    this.curve = curve;
    if (this.curve == null) {
      this.curve = new Curve2();
    }
    if (typeof this.obj0 === 'object') {
      if (this.obj0.__proto__ !== this.obj1.__proto__) {
        PXLWarning("Interpolating two different objects");
      }
    }
    if (this.obj0 instanceof Vec2) {
      this._set = this._setVec2;
    } else if (this.obj0 instanceof Vec3) {
      this._set = this._setVec3;
    } else if (this.obj0 instanceof Vec4) {
      this._set = this._setVec4;
    } else if (this.obj0 instanceof RGB) {
      this._set = this._setRGB;
    } else if (this.obj0 instanceof RGBA) {
      this._set = this._setRGBA;
    } else if (this.obj0 instanceof Quaternion) {
      this._set = this._setQuat;
    } else if (typeof this.obj0 === 'number') {
      this._set = this._setScalar;
    }
    this._value = 0;
  }

  Interpolation.prototype.set = function(val) {
    if (val < 0 || val > 1.0) {
      PXLWarning("Interpolation set val must be between 0 and 1. It was set to " + val);
    }
    this._value = val;
    return this._set();
  };

  Interpolation.prototype._setVec2 = function() {
    return new Vec2(this.obj0.x + ((this.obj.x - this.obj0.x) * this._value), this.obj0.y + ((this.obj1.y - this.obj0.y) * this._value));
  };

  Interpolation.prototype._setVec3 = function() {
    return new Vec3(this.obj0.x + ((this.obj1.x - this.obj0.x) * this._value), this.obj0.y + ((this.obj1.y - this.obj0.y) * this._value), this.obj0.z + ((this.obj1.z - this.obj0.z) * this._value));
  };

  Interpolation.prototype._setVec4 = function() {
    return new Vec4(this.obj0.x + ((this.obj1.x - this.obj0.x) * this._value), this.obj0.y + ((this.obj1.y - this.obj0.y) * this._value), this.obj0.z + ((this.obj1.z - this.obj0.z) * this._value), this.obj0.w + ((this.obj1.w - this.obj0.w) * this._value));
  };

  Interpolation.prototype._setRGB = function() {
    return new RGB(this.obj0.r + ((this.obj1.r - this.obj0.r) * this._value), this.obj0.g + ((this.obj1.g - this.obj0.g) * this._value), this.obj0.b + ((this.obj1.b - this.obj0.b) * this._value));
  };

  Interpolation.prototype._setRGBA = function() {
    return new RGBA(this.obj0.r + ((this.obj1.r - this.obj0.r) * this._value), this.obj0.g + ((this.obj1.g - this.obj0.g) * this._value), this.obj0.b + ((this.obj1.b - this.obj0.b) * this._value), this.obj0.a + ((this.obj1.a - this.obj0.a) * this._value));
  };

  Interpolation.prototype._setQuat = function() {
    return this.obj0.slerp(this.obj1, this._value);
  };

  Interpolation.prototype._setScalar = function() {
    return this.obj0 + ((this.obj1 - this.obj0) * this._value);
  };

  return Interpolation;

})();

Animator = (function() {
  function Animator(num_frames, framerate, label) {
    this.num_frames = num_frames;
    this.framerate = framerate;
    this.label = label;
    if (this.framerate == null) {
      this.framerate = 24;
    }
    if (this.label == null) {
      this.label = "unlabled_animaton";
    }
    this._current_frame = 0;
    this._dt = 0;
    this._loop = true;
    this._frover = 1.0 / this.framerate;
    this._tweens = [];
  }

  Animator.prototype.addTween = function(tween) {
    this._tweens.push(tween);
    return this;
  };

  Animator.prototype.reset = function() {
    var i, len, ref2, results, tween;
    this._dt = 0;
    this._current_frame = 0;
    ref2 = this._tweens;
    results = [];
    for (i = 0, len = ref2.length; i < len; i++) {
      tween = ref2[i];
      results.push(tween.reset());
    }
    return results;
  };

  Animator.prototype.step = function(dt) {
    var ff;
    this._dt += dt;
    if (this._dt >= this._frover) {
      ff = Math.floor(this._dt / this._frover);
      this._current_frame += ff;
      if (this._current_frame >= this.num_frames) {
        if (this._loop) {
          reset();
        }
      }
      this._process();
      return this._dt = this._dt - (ff * this._frover);
    }
  };

  Animator;

  Animator.prototype._process = function() {
    var i, len, p, ref2, results, tween;
    ref2 = this._tweens;
    results = [];
    for (i = 0, len = ref2.length; i < len; i++) {
      tween = ref2[i];
      if (tween.f0.framenum <= this._current_frame && tween.f1.framenum >= this._current_frame) {
        p = Math.abs(this._current_frame - tween.f0.framenum) / Math.abs(tween.f0.framenum - tween.f1.framenum);
        results.push(tween.set(p));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Animator;

})();


/* KeyFrame */

KeyFrame = (function() {
  function KeyFrame(obj, value, framenum) {
    this.obj = obj;
    this.value = value;
    this.framenum = framenum;
    this;
  }

  return KeyFrame;

})();


/* Tween */

Tween = (function() {
  function Tween(f0, f1, interp) {
    this.f0 = f0;
    this.f1 = f1;
    this.interp = interp;
    if (this.f0.obj !== this.f1.obj) {
      PXLWarning("Tween Keyframes do not point to the same object");
    }
    if (this.interp == null) {
      this.interp = new Interpolation(this.f0.value, this.f1.value);
    }
    if (this.f0.obj.copyFrom != null) {
      this._original = this.f0.obj.copy();
      this.reset = function() {
        return this.f0.copyFrom(this._original);
      };
    } else {
      this._original = this.f0;
      this.reset = function() {
        return this.f0 = this._original;
      };
    }
    this;
  }

  Tween.prototype.set = function(u) {
    if (this.f0.obj.copyFrom != null) {
      return this.f0.obj.copyFrom(this.interp.set(u));
    } else {
      return this.f0.obj = this.interp.set(u);
    }
  };

  return Tween;

})();

module.exports = {
  Interpolation: Interpolation,
  KeyFrame: KeyFrame,
  Animator: Animator,
  Tween: Tween
};



},{"../colour/colour":4,"../math/curve":29,"../math/math":30,"../util/log":35}],2:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

A selection of classes that represent a skeleton for Animation
Based largely from the MD5 Parser and the bone structure contained therein

- TODO enforce bone ordering with idx numbers
 */
var Bone, CacheVar, Contract, Matrix4, PXLError, PXLLog, PXLWarning, Quaternion, Skeleton, Skin, SkinIndex, SkinWeight, Texture, Vec2, Vec3, Vec4, ref, ref1,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ref = require('../math/math'), Matrix4 = ref.Matrix4, Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4, Quaternion = ref.Quaternion;

ref1 = require('../util/log'), PXLWarning = ref1.PXLWarning, PXLError = ref1.PXLError, PXLLog = ref1.PXLLog;

Contract = require('../gl/contract').Contract;

CacheVar = require('../util/cache_var').CacheVar;

Texture = require('../gl/texture').Texture;


/*Bone */

Bone = (function() {
  function Bone(name, idx1, parent, rotation_pose, position_pose) {
    var tp;
    this.name = name;
    this.idx = idx1;
    this.parent = parent;
    this.rotation_pose = rotation_pose;
    this.position_pose = position_pose;
    if (this.parent != null) {
      this.rotation_relative = Quaternion.invert(this.parent.rotation_pose).mult(this.rotation_pose);
      this.rotation_relative.normalize();
      tp = this.position_pose.clone().sub(this.parent.position_pose);
      this.parent.rotation_pose.transVec3(tp);
      this.position_relative = tp;
    } else {
      this.rotation_relative = this.rotation_pose.clone();
      this.position_relative = this.position_pose.clone();
    }
    this.inverse_bind_pose = new Matrix4();
    this.inverse_bind_pose.translate(this.position_pose).mult(this.rotation_pose.getMatrix4());
    this.inverse_bind_pose.invert();
    this.rotation_global = this.rotation_pose.clone();
    this.position_global = this.position_pose.clone();
    this.skinned_matrix = new Matrix4();
    this;
  }

  Bone.prototype.rotate = function(quat) {
    this.rotation_relative.multiply(quat).normalize();
    return this;
  };

  return Bone;

})();


/*SkinIndex */

SkinIndex = (function() {
  function SkinIndex(index, count) {
    this.index = index;
    this.count = count;
    this;
  }

  return SkinIndex;

})();


/*SkinWeight */

SkinWeight = (function() {
  function SkinWeight(bone1, bias) {
    this.bone = bone1;
    this.bias = bias;
    this;
  }

  return SkinWeight;

})();


/*Skin */

Skin = (function() {
  function Skin() {
    this.index = [];
    this.weights = [];
  }

  Skin.prototype.addIndex = function(skin_index) {
    this.index.push(skin_index);
    return this;
  };

  Skin.prototype.addWeight = function(skin_weight) {
    this.weights.push(skin_weight);
    return this;
  };

  Skin.prototype.numWeights = function() {
    return this.weights.length;
  };

  Skin.prototype.numIndices = function() {
    return this.index.length;
  };

  return Skin;

})();


/* Skeleton */

Skeleton = (function() {
  Skeleton.PXL_MAX_BONES_TEX = 256;

  Skeleton.PXL_MAX_BONES_UNI = 64;

  Skeleton.PXL_MAX_WEIGHTS = 4;

  Skeleton.PXL_MAX_BONES = 128;

  function Skeleton(root) {
    var i, j, ref2;
    this.root = root;
    this.bones = [];
    this.matrix = new Matrix4();
    this.contract = new Contract();
    this.contract.roles.uBoneTexDim = "_square_dim";
    this._square_dim = Math.sqrt(Skeleton.PXL_MAX_BONES_TEX * 4);
    if (typeof PXL !== "undefined" && PXL !== null) {
      if (indexOf.call(PXL.Context.profile.extensions, 'OES_texture_float') >= 0) {
        this._tdata = new Float32Array(Skeleton.PXL_MAX_BONES_TEX * 16);
        for (i = j = 0, ref2 = Skeleton.PXL_MAX_BONES_TEX * 4; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
          this._tdata[i] = 1;
        }
        this._palette = new Texture(this._tdata, {
          width: this._square_dim,
          height: this._square_dim,
          channels: GL.RGBA,
          datatype: GL.FLOAT,
          min: GL.NEAREST,
          max: GL.NEAREST
        });
        this._palette.contract.roles.uBonePalette = "unit";
      } else {
        PXLError("Uniform bone palette support not implemented.");
      }
    }
  }

  Skeleton.prototype._preDraw = function() {
    this.update();
    this._palette.bind();
    return this;
  };

  Skeleton.prototype._postDraw = function() {
    this._palette.unbind();
    return this;
  };

  Skeleton.prototype.addBone = function(bone) {
    if (this.bones.length + 1 < Skeleton.PXL_MAX_BONES) {
      this.bones.push(bone);
    } else {
      PXLWarning("Maximum bone limit reached.");
    }
    return this;
  };

  Skeleton.prototype._addToNode = function(node) {
    node.skeleton = this;
    return this;
  };

  Skeleton.prototype.getBone = function(bone_idx) {
    var bone, j, len, ref2;
    ref2 = this.bones;
    for (j = 0, len = ref2.length; j < len; j++) {
      bone = ref2[j];
      if (bone.idx === bone_idx) {
        return bone;
      }
    }
    return null;
  };

  Skeleton.prototype.getBoneByName = function(bone_name) {
    var bone, j, len, ref2;
    ref2 = this.bones;
    for (j = 0, len = ref2.length; j < len; j++) {
      bone = ref2[j];
      if (bone.name === bone_name) {
        return bone;
      }
    }
    return null;
  };

  Skeleton.prototype.update = function() {
    var b, i, idx, j, k, l, len, len1, ref2, ref3, tm, tp;
    ref2 = this.bones;
    for (j = 0, len = ref2.length; j < len; j++) {
      b = ref2[j];
      if (b.parent === void 0) {
        b.rotation_global = b.rotation_relative;
        b.position_global = b.position_relative;
      } else {
        b.rotation_global.copy(b.parent.rotation_global).mult(b.rotation_relative).normalize();
        tp = b.position_relative.clone();
        tm = Quaternion.invert(b.parent.rotation_global);
        tm.transVec3(tp);
        tp.add(b.parent.position_global);
        b.position_global.copy(tp);
      }
    }
    idx = 0;
    ref3 = this.bones;
    for (k = 0, len1 = ref3.length; k < len1; k++) {
      b = ref3[k];
      b.skinned_matrix.identity().translate(b.position_global).mult(b.rotation_global.getMatrix4());
      b.skinned_matrix.mult(b.inverse_bind_pose);
      if (typeof PXL !== "undefined" && PXL !== null) {
        for (i = l = 0; l <= 15; i = ++l) {
          this._tdata[idx * 16 + i] = b.skinned_matrix.a[i];
        }
        idx += 1;
      }
    }
    if (typeof PXL !== "undefined" && PXL !== null) {
      this._palette.update(this._tdata);
    }
    return this;
  };

  return Skeleton;

})();

module.exports = {
  Skeleton: Skeleton,
  Bone: Bone,
  Skin: Skin,
  SkinWeight: SkinWeight,
  SkinIndex: SkinIndex
};



},{"../gl/contract":11,"../gl/texture":14,"../math/math":30,"../util/cache_var":33,"../util/log":35}],3:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


- TODO
  * Combine mouse and touch cameras into one I think (possibly move to interact?)
  * Interactive cameras, when created should add listeners automagically to either window
    or some passed in DOM object I suspect. Saves us writing boilerplate code

  * Decouple the GL so we can test - but keep option in because its clean when used
  * TEST ORTHO CAMERA! I dont think it works! ><
  * update isnt really that great :S Keep it internal :)
  * functions to change the positions so we can change things like look pos and
    have the up vector change accordingly

https://gist.github.com/eligrey/384583 - useful for changes to pos,look etc?
 */
var Camera, Contract, Matrix4, MousePerspCamera, OrthoCamera, PerspCamera, Primitive, Quaternion, TouchPerspCamera, Vec2, Vec3, Vec4, degToRad, makeMouseListener, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../math/math'), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix4 = ref.Matrix4, Quaternion = ref.Quaternion, degToRad = ref.degToRad;

Primitive = require('../geometry/primitive').Primitive;

makeMouseListener = require('../interact/mouse').makeMouseListener;

Contract = require('../gl/contract').Contract;


/* Camera */

Camera = (function() {
  function Camera(pos, look, up) {
    this.pos = pos;
    this.look = look;
    this.up = up;
    if (this.pos == null) {
      this.pos = new Vec3(0, 0, 5);
    }
    if (this.look == null) {
      this.look = new Vec3(0, 0, 0);
    }
    if (this.up == null) {
      this.up = new Vec3(0, 1, 0);
    }
    this.m = new Matrix4();
    this.p = new Matrix4();
    this.i = new Matrix4();
    this.ip = new Matrix4();
    this.q = new Quaternion();
    this.width = 1;
    this.height = 1;
    this.contract = new Contract();
    this.contract.roles.uCameraNear = "near";
    this.contract.roles.uCameraFar = "far";
    this.contract.roles.uInverseProjectionMatrix = "ip";
    this.contract.roles.uProjectionMatrix = "p";
    this.contract.roles.uCameraMatrix = "m";
    this.contract.roles.uCameraInverseMatrix = "i";
  }

  Camera.prototype.update = function(width, height) {
    if (width == null) {
      width = PXL.Context.width;
    }
    if (height == null) {
      height = PXL.Context.height;
    }
    this.m.lookAt(this.pos, this.look, this.up);
    this.i = Matrix4.invert(this.m);
    this.width = width;
    this.height = height;
    if (typeof GL !== "undefined" && GL !== null) {
      GL.viewport(0, 0, this.width, this.height);
    }
    return this;
  };

  Camera.prototype.lookAt = function(pos, look, up) {
    this.pos = pos;
    this.look = look;
    this.up = up;
    return this.update();
  };

  Camera.prototype.setViewport = function(width1, height1) {
    this.width = width1;
    this.height = height1;
    return this;
  };

  Camera.prototype.orbit = function(axis, angle) {
    var dir, l;
    this.q.fromAxisAngle(axis, angle);
    dir = Vec3.sub(this.look, this.pos);
    dir.normalize();
    l = Vec3.sub(this.pos, this.look);
    this.q.transVec3(l);
    this.q.transVec3(this.up);
    l.add(this.look);
    this.pos.copy(l);
    return this.update();
  };

  Camera.prototype.pantilt = function(axis, angle) {
    var dir, q2;
    this.q.fromAxisAngle(axis, angle);
    dir = Vec3.sub(this.look, this.pos);
    dir.normalize();
    q2 = new Quaternion();
    q2.fromAxisAngle(Vec3.cross(dir, this.up), angle);
    q2.mult(this.q);
    q2.transVec3(this.look);
    q2.transVec3(this.up);
    return this.update();
  };

  Camera.prototype._addToNode = function(node) {
    node.camera = this;
    return this;
  };

  Camera.prototype.track = function(v) {
    var g;
    g = new Vec4(v.x, v.y, 0, 0);
    this.i.multVec(g);
    this.look.add(g);
    this.pos.add(g);
    return this;
  };

  return Camera;

})();


/* OrthoCamera */

OrthoCamera = (function(superClass) {
  extend(OrthoCamera, superClass);

  function OrthoCamera(pos, look, up, near, far) {
    this.pos = pos;
    this.look = look;
    this.up = up;
    this.near = near;
    this.far = far;
    OrthoCamera.__super__.constructor.call(this, this.pos, this.look, this.up);
    if (this.near == null) {
      this.near = -1.0;
    }
    if (this.far == null) {
      this.far = 1.0;
    }
  }

  OrthoCamera.prototype.update = function(width, height) {
    if (width == null) {
      width = PXL.Context.width;
    }
    if (height == null) {
      height = PXL.Context.height;
    }
    OrthoCamera.__super__.update.call(this, width, height);
    this.p.makeOrtho(0, width, 0, height, this.near, this.far);
    this.ip = Matrix4.invert(this.p);
    return this;
  };

  return OrthoCamera;

})(Camera);


/* PerspCamera */

PerspCamera = (function(superClass) {
  extend(PerspCamera, superClass);

  function PerspCamera(pos, look, up, angle1, near, far) {
    this.pos = pos;
    this.look = look;
    this.up = up;
    this.angle = angle1;
    this.near = near;
    this.far = far;
    PerspCamera.__super__.constructor.call(this, this.pos, this.look, this.up);
    if (this.angle == null) {
      this.angle = 50.0;
    }
    if (this.near == null) {
      this.near = 0.1;
    }
    if (this.far == null) {
      this.far = 100.0;
    }
    this.zoom_near = this.near;
    this.zoom_far = this.far;
  }

  PerspCamera.prototype.update = function(width, height) {
    if (width == null) {
      width = PXL.Context.width;
    }
    if (height == null) {
      height = PXL.Context.height;
    }
    PerspCamera.__super__.update.call(this, width, height);
    this.p.makePerspective(this.angle, width / height, this.near, this.far);
    this.ip = Matrix4.invert(this.p);
    return this;
  };

  PerspCamera.prototype.castRay = function(sx, sy, width, height) {
    var far_ray, far_ray_w, farg, near_ray, near_ray_w, nearg;
    if (width == null) {
      width = PXL.Context.width;
    }
    if (height == null) {
      height = PXL.Context.height;
    }
    sy = height - sy;
    near_ray = new Vec4((sx * 2.0) / width - 1.0, (sy * 2) / height - 1, -1.0, 1.0);
    far_ray = new Vec4((sx * 2.0) / width - 1.0, (sy * 2) / height - 1, 1.0, 1.0);
    this.ip.multVec(near_ray);
    this.ip.multVec(far_ray);
    nearg = 1.0 / near_ray.w;
    near_ray_w = new Vec4(near_ray.x * nearg, near_ray.y * nearg, near_ray.z * nearg, 1.0);
    farg = 1.0 / far_ray.w;
    far_ray_w = new Vec4(far_ray.x * farg, far_ray.y * farg, far_ray.z * farg, 1.0);
    far_ray_w.sub(near_ray_w);
    far_ray_w.normalize();
    this.i.multVec(far_ray_w);
    return far_ray_w.normalize();
  };

  PerspCamera.prototype._zoom = function(dt) {
    var dir, dl, dp, tl;
    dir = Vec3.sub(this.look, this.pos);
    dl = dir.length();
    tl = this.zoom_far - this.zoom_near;
    dp = dl / tl;
    this.zoom(dp + dt);
    return this;
  };

  PerspCamera.prototype.zoom = function(z) {
    var dir, tl;
    if (z > 0 && z < 1) {
      dir = Vec3.sub(this.pos, this.look);
      dir.normalize();
      tl = this.zoom_far - this.zoom_near;
      dir.multScalar(z * tl);
      this.pos = Vec3.add(this.look, dir);
      this.update();
    }
    return this;
  };

  return PerspCamera;

})(Camera);


/* MousePerspCamera */

MousePerspCamera = (function(superClass) {
  extend(MousePerspCamera, superClass);

  function MousePerspCamera(pos, look, up, angle1, near, far, sense) {
    this.pos = pos;
    this.look = look;
    this.up = up;
    this.angle = angle1;
    this.near = near;
    this.far = far;
    this.sense = sense;
    MousePerspCamera.__super__.constructor.call(this, this.pos, this.look, this.up, this.angle, this.near, this.far);
    PXL.Context.mouseMove.add(this.onMouseMove, this);
    PXL.Context.mouseDown.add(this.onMouseDown, this);
    PXL.Context.mouseUp.add(this.onMouseUp, this);
    PXL.Context.mouseWheel.add(this.onMouseWheel, this);
    if (this.sense == null) {
      this.sense = 0.3;
    }
    this.px = 0;
    this.py = 0;
    this.dx = 0;
    this.dy = 0;
    this.m.lookAt(this.pos, this.look, this.up);
    this.i = Matrix4.invert(this.m);
    this;
  }

  MousePerspCamera.prototype.onMouseMove = function(event) {
    var dir, x, y;
    x = event.mouseX;
    y = event.mouseY;
    this.dx = x - this.px;
    this.px = x;
    this.dy = y - this.py;
    this.py = y;
    if (event.buttonLeft) {
      this.orbit(new Vec3(0, 1, 0), degToRad(-this.dx * this.sense));
      dir = Vec3.sub(this.look, this.pos);
      this.orbit(Vec3.cross(dir, this.up), degToRad(this.dy * this.sense));
    } else if (event.buttonRight) {
      this.track(new Vec2(this.dx * this.sense * -0.02, this.dy * this.sense * 0.02));
    }
    return this;
  };

  MousePerspCamera.prototype.onMouseDown = function(event) {
    var x, y;
    x = event.mouseX;
    y = event.mouseY;
    this.px = x;
    this.py = y;
    this.dx = 0;
    this.dy = 0;
    return this;
  };

  MousePerspCamera.prototype.onMouseUp = function(event) {
    return this;
  };

  MousePerspCamera.prototype.onMouseWheel = function(event) {
    var dp, dt, tl;
    dt = event.wheelDelta * 0.01 * this.sense;
    tl = this.far - this.near;
    dp = dt / tl;
    this._zoom(dp);
    return this;
  };

  MousePerspCamera.prototype.update = function(width, height) {
    if (width == null) {
      width = PXL.Context.width;
    }
    if (height == null) {
      height = PXL.Context.height;
    }
    MousePerspCamera.__super__.update.call(this, width, height);
    return this;
  };

  MousePerspCamera.prototype.onMouseOut = function(event) {
    this.px = 0;
    this.py = 0;
    this.dx = 0;
    return this.dy = 0;
  };

  MousePerspCamera.prototype.onMouseOver = function(event) {
    var ref1;
    if (this.px === 0 && this.py === 0) {
      return ref1 = [event.mouseX, event.mouseY], this.px = ref1[0], this.py = ref1[1], ref1;
    }
  };

  return MousePerspCamera;

})(PerspCamera);


/* TouchPerspCamera */

TouchPerspCamera = (function(superClass) {
  extend(TouchPerspCamera, superClass);

  function TouchPerspCamera(pos, look, up, angle1, near, far, sense) {
    this.pos = pos;
    this.look = look;
    this.up = up;
    this.angle = angle1;
    this.near = near;
    this.far = far;
    this.sense = sense;
    TouchPerspCamera.__super__.constructor.call(this, this.pos, this.look, this.up, this.angle, this.near, this.far);
    PXL.Context.touchPinch.add(this.onPinch, this);
    PXL.Context.touchSpread.add(this.onSpread, this);
    PXL.Context.touchSwipe.add(this.onSwipe, this);
  }

  TouchPerspCamera.prototype.onPinch = function(event) {
    var dp, dt, tl;
    dt = -event.ddist * 0.08 * this.sense;
    tl = this.far - this.near;
    dp = dt / tl;
    this._zoom(dp);
    return this;
  };

  TouchPerspCamera.prototype.onSpread = function(event) {
    var dp, dt, tl;
    dt = -event.ddist * 0.08 * this.sense;
    tl = this.far - this.near;
    dp = dt / tl;
    this._zoom(dp);
    return this;
  };

  TouchPerspCamera.prototype.onSwipe = function(event) {
    var dir, x, y;
    x = event.currentPos.x;
    y = event.currentPos.y;
    this.px = event.previousPos.x;
    this.py = event.previousPos.y;
    this.dx = x - this.px;
    this.px = x;
    this.dy = y - this.py;
    this.py = y;
    if (event.fingers === 1) {
      this.orbit(new Vec3(0, 1, 0), degToRad(-this.dx * this.sense));
      dir = Vec3.sub(this.look, this.pos);
      this.orbit(Vec3.cross(dir, this.up), degToRad(-this.dy * this.sense));
    } else if (event.fingers === 2) {
      this.track(new Vec2(this.dx * this.sense * -0.02, this.dy * this.sense * 0.02));
    }
    return this;
  };

  return TouchPerspCamera;

})(MousePerspCamera);

module.exports = {
  Camera: Camera,
  OrthoCamera: OrthoCamera,
  PerspCamera: PerspCamera,
  MousePerspCamera: MousePerspCamera,
  TouchPerspCamera: TouchPerspCamera
};



},{"../geometry/primitive":9,"../gl/contract":11,"../interact/mouse":22,"../math/math":30}],4:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */

/* RGBA */
var RGB, RGBA;

RGBA = (function() {
  RGBA.prototype.DIM = 4;

  function RGBA(r, g, b, a) {
    this.r = r != null ? r : 1.0;
    this.g = g != null ? g : 1.0;
    this.b = b != null ? b : 1.0;
    this.a = a != null ? a : 1.0;
    if (this.r > 1.0) {
      this.r = this.r / 255;
    }
    if (this.g > 1.0) {
      this.g = this.g / 255;
    }
    if (this.b > 1.0) {
      this.b = this.b / 255;
    }
    if (this.a > 1.0) {
      this.a = this.a / 255;
    }
  }

  RGBA.prototype.flatten = function() {
    return [this.r, this.g, this.b, this.a];
  };

  RGBA.WHITE = function() {
    return new RGBA(1.0, 1.0, 1.0, 1.0);
  };

  RGBA.BLACK = function() {
    return new RGBA(0.0, 0.0, 0.0, 1.0);
  };

  RGBA.MAGNOLIA = function() {
    return new RGBA(1.0, 1.0, 0.9, 1.0);
  };

  RGBA.prototype.copyFrom = function(col) {
    this.r = col.r;
    this.g = col.g;
    this.b = col.b;
    this.a = col.a;
    return this;
  };

  RGBA.prototype.copy = function() {
    return new RGBA(this.r, this.g, this.b, this.a);
  };

  return RGBA;

})();


/* RGB */

RGB = (function() {
  RGB.prototype.DIM = 3;

  function RGB(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
    if (this.r > 1.0) {
      this.r = this.r / 255;
    }
    if (this.b > 1.0) {
      this.g = this.g / 255;
    }
    if (this.g > 1.0) {
      this.b = this.b / 255;
    }
  }

  RGB.prototype.flatten = function() {
    return [this.r, this.g, this.b];
  };

  RGB.WHITE = function() {
    return new RGB(1.0, 1.0, 1.0);
  };

  RGB.BLACK = function() {
    return new RGB(0.0, 0.0, 0.0);
  };

  RGB.MAGNOLIA = function() {
    return new RGBA(1.0, 1.0, 0.9);
  };

  RGB.prototype.copyFrom = function(c) {
    this.r = c.r;
    this.g = c.g;
    this.b = c.b;
    return this;
  };

  RGB.prototype.copy = function() {
    return new RGB(this.r, this.g, this.b);
  };

  return RGB;

})();

module.exports = {
  RGBA: RGBA,
  RGB: RGB
};



},{}],5:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

- Resources

* http://www.yuiblog.com/blog/2007/06/12/module-pattern/
* http://www.plexical.com/blog/2012/01/25/writing-coffeescript-for-browser-and-nod/
* https://github.com/field/FieldKit.js

- TODO 

* Not sure we want to make this a listener for events. I suspect we need a keyboard eventor
  style class and touch eventor class that takes a DOM?
 */
var App, Colour, Matrix4, OrthoCamera, PXLError, PXLLog, PXLWarning, PerspCamera, Shader, Vec2, Vec3, Vec4, makeDebugContext, makeKeyEmitter, makeMouseEmitter, makeTouchEmitter, ref, ref1, ref2, ref3, ref4, ref5, removeKeyEmitter, removeMouseEmitter, removeTouchEmitter,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ref = require("../math/math"), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix4 = ref.Matrix4;

Shader = require("../gl/shader").Shader;

ref1 = require("../camera/camera"), PerspCamera = ref1.PerspCamera, OrthoCamera = ref1.OrthoCamera;

ref2 = require("../interact/mouse"), makeMouseEmitter = ref2.makeMouseEmitter, removeMouseEmitter = ref2.removeMouseEmitter;

ref3 = require("../interact/touch"), makeTouchEmitter = ref3.makeTouchEmitter, removeTouchEmitter = ref3.removeTouchEmitter;

ref4 = require("../interact/key"), makeKeyEmitter = ref4.makeKeyEmitter, removeKeyEmitter = ref4.removeKeyEmitter;

Colour = require("../colour/colour").Colour;

ref5 = require("../util/log"), PXLError = ref5.PXLError, PXLWarning = ref5.PXLWarning, PXLLog = ref5.PXLLog;

makeDebugContext = require("../util/debug").makeDebugContext;


/* App */

App = (function() {
  function App(params) {
    this.getDelta = bind(this.getDelta, this);
    this.run = bind(this.run, this);
    if (params.canvas == null) {
      PXLError("No WebGL Canvas Provided");
      return;
    }
    this.debug = params.debug == null ? false : params.debug;
    this.app_context = params.context;
    this.update = params.update;
    this.draw = params.draw;
    this.init = params.init;
    this.user_shutdown = params.shutdown;
    this.canvas = document.getElementById(params.canvas);
    if (!this.canvas) {
      PXLError("Trying to create an app on canvas that does not exist");
    }
    this._pause = params.pause == null ? false : params.pause;
    this.height = this.canvas.height;
    this.width = this.canvas.width;
    this._context();
    this;
  }

  App.prototype._context = function() {
    var cl;
    cl = (function(_this) {
      return function(event) {
        var idx, j, len, ref6;
        event.preventDefault();
        idx = 0;
        ref6 = PXL.Applications.length;
        for (j = 0, len = ref6.length; j < len; j++) {
          idx = ref6[j];
          if (PXL.Applications[i][0] = _this) {
            break;
          }
        }
        PXL.Applications.splice(idx, 1);
        return _this._context();
      };
    })(this);
    this.canvas.addEventListener("webglcontextlost", cl, false);
    if (this.gl == null) {
      this._initContext();
    }
    makeMouseEmitter(this);
    makeTouchEmitter(this);
    makeKeyEmitter(this);
    this.resizeCanvas(this.canvas.width, this.canvas.height);
    if (this.init != null) {
      this.init.call(this.app_context);
    }
    this.contextTime = 0;
    if (typeof window !== "undefined" && window !== null) {
      return window.onEachFrame(this, this.run);
    }
  };

  App.prototype._initContext = function() {
    var j, len, name, names;
    names = ["experimental-webgl", "webgl", "moz-webgl", "webkit-3d"];
    for (j = 0, len = names.length; j < len; j++) {
      name = names[j];
      this.gl = this.canvas.getContext(name);
      if (this.gl != null) {
        this._profile();
        this._framescounter = 0;
        if (this.debug) {
          PXLLog("creating OpenGL debug context");
        }
        return;
      }
    }
    if (!this.gl) {
      if (this.onError != null) {
        this.onError();
      }
      PXLError("WebGL Not supported or context not found", "App");
    }
    return this;
  };

  if (typeof navigator !== "undefined" && navigator !== null) {
    var BrowserDetect = {
      init: function () {
        this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
        this.version = this.searchVersion(navigator.userAgent)
          || this.searchVersion(navigator.appVersion)
          || "an unknown version";
        this.OS = this.searchString(this.dataOS) || "an unknown OS";
      },
      searchString: function (data) {
        for (var i=0;i<data.length;i++) {
          var dataString = data[i].string;
          var dataProp = data[i].prop;
          this.versionSearchString = data[i].versionSearch || data[i].identity;
          if (dataString) {
            if (dataString.indexOf(data[i].subString) != -1)
              return data[i].identity;
          }
          else if (dataProp)
            return data[i].identity;
        }
      },
      searchVersion: function (dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1) return;
        return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
      },
      dataBrowser: [
        {
          string: navigator.userAgent,
          subString: "Chrome",
          identity: "Chrome"
        },
        {   string: navigator.userAgent,
          subString: "OmniWeb",
          versionSearch: "OmniWeb/",
          identity: "OmniWeb"
        },
        {
          string: navigator.vendor,
          subString: "Apple",
          identity: "Safari",
          versionSearch: "Version"
        },
        {
          prop: window.opera,
          identity: "Opera",
          versionSearch: "Version"
        },
        {
          string: navigator.vendor,
          subString: "iCab",
          identity: "iCab"
        },
        {
          string: navigator.vendor,
          subString: "KDE",
          identity: "Konqueror"
        },
        {
          string: navigator.userAgent,
          subString: "Firefox",
          identity: "Firefox"
        },
        {
          string: navigator.vendor,
          subString: "Camino",
          identity: "Camino"
        },
        {   // for newer Netscapes (6+)
          string: navigator.userAgent,
          subString: "Netscape",
          identity: "Netscape"
        },
        {
          string: navigator.userAgent,
          subString: "MSIE",
          identity: "Explorer",
          versionSearch: "MSIE"
        },
        {
          string: navigator.userAgent,
          subString: "Gecko",
          identity: "Mozilla",
          versionSearch: "rv"
        },
        {     // for older Netscapes (4-)
          string: navigator.userAgent,
          subString: "Mozilla",
          identity: "Netscape",
          versionSearch: "Mozilla"
        }
      ],
      dataOS : [
        {
          string: navigator.platform,
          subString: "Win",
          identity: "Windows"
        },
        {
          string: navigator.platform,
          subString: "Mac",
          identity: "Mac"
        },
        {
             string: navigator.userAgent,
             subString: "iPhone",
             identity: "iPhone/iPod"
          },
        {
          string: navigator.platform,
          subString: "Linux",
          identity: "Linux"
        }
      ]

    };;
  }

  App.prototype._profile = function() {
    var highp, se;
    this.profile = {};
    this.profile.antialias = this.gl.getContextAttributes().antialias;
    this.profile.aa_size = this.gl.getParameter(this.gl.SAMPLES);
    highp = this.gl.getShaderPrecisionFormat(this.gl.FRAGMENT_SHADER, this.gl.HIGH_FLOAT);
    this.profile.highpSupported = highp.precision !== 0;
    this.profile.maxTexSize = this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE);
    this.profile.maxCubeSize = this.gl.getParameter(this.gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    this.profile.maxRenderbufferSize = this.gl.getParameter(this.gl.MAX_RENDERBUFFER_SIZE);
    this.profile.vertexTextureUnits = this.gl.getParameter(this.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    this.profile.fragmentTextureUnits = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
    this.profile.combinedUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    this.profile.maxVSattribs = this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);
    this.profile.maxVertexShaderUniforms = this.gl.getParameter(this.gl.MAX_VERTEX_UNIFORM_VECTORS);
    this.profile.maxFragmentShaderUniforms = this.gl.getParameter(this.gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    this.profile.maxVaryings = this.gl.getParameter(this.gl.MAX_VARYING_VECTORS);
    this.profile.extensions = this.gl.getSupportedExtensions();
    this.profile.maxBufferSize = 65536;
    if (typeof navigator !== "undefined" && navigator !== null) {
      BrowserDetect.init();
      this.profile.browser = BrowserDetect.browser;
      this.profile.os = BrowserDetect.OS;
      this.profile.version = BrowserDetect.version;
      se = this.gl.getSupportedExtensions();
      this.profile.extensions = [];
      if (indexOf.call(se, 'OES_standard_derivatives') >= 0) {
        this.profile.extensions.push('OES_standard_derivatives');
        this.gl.getExtension('OES_standard_derivatives');
      }
      if (indexOf.call(se, 'OES_texture_float') >= 0) {
        this.profile.extensions.push('OES_texture_float');
        this.gl.getExtension('OES_texture_float');
      }
      function detectmob() { 
        if( navigator.userAgent.match(/Android/i)
        || navigator.userAgent.match(/webOS/i)
        || navigator.userAgent.match(/iPhone/i)
        || navigator.userAgent.match(/iPad/i)
        || navigator.userAgent.match(/iPod/i)
        || navigator.userAgent.match(/BlackBerry/i)
        || navigator.userAgent.match(/Windows Phone/i)
        ){
          return true;
        }
        else {
          return false;
        }
      };
      this.profile.mobile = detectmob();
      return console.log(this.profile);
    }
  };

  App.prototype.run = function() {
    if (this._pause) {
      return;
    }
    if (this._framescounter > 0) {
      this._framescounter--;
      if (this._framescounter <= 0) {
        this.pause(true);
      }
    }
    return this._draw(this.getDelta());
  };

  App.prototype.pause = function(force) {
    if (force == null) {
      this._pause = !this._pause;
    } else {
      this._pause = force;
    }
    if (!this._pause) {
      this.startTime = Date.now();
      this.oldTime = this.startTime;
      this.canvas.focus();
    }
    this.pauseKeyEmitter(this._pause);
    this.pauseTouchEmitter(this._pause);
    this.pauseMouseEmitter(this._pause);
    return this;
  };

  App.prototype.getDelta = function() {
    var deltaTime;
    deltaTime = Date.now() - this.oldTime;
    this.oldTime = Date.now();
    return deltaTime;
  };

  App.prototype.switchContext = function(context) {
    if (context != null) {
      PXL.Context = context;
      if (typeof window !== "undefined" && window !== null) {
        window.GL = context.gl;
      }
    } else {
      if (PXL.Context !== this) {
        PXL.Context = this;
        if (typeof window !== "undefined" && window !== null) {
          window.GL = this.gl;
        }
      }
    }
    return this;
  };

  App.prototype.resizeCanvas = function(width, height) {
    this.switchContext();
    if (this.canvas) {
      if (this.gl) {
        this.width = width;
        this.height = height;
        this.canvas.width = width;
        this.canvas.height = height;
      }
    }
    return this;
  };

  App.prototype._draw = function(dt) {
    this.contextTime = Date.now() - this.startTime;
    this.switchContext();
    if (this.draw != null) {
      return this.draw.call(this.app_context, dt);
    }
  };

  App.prototype.shutdown = function() {
    this.pause(true);
    if (this.user_shutdown != null) {
      this.user_shutdown.call(this.app_context);
    }
    removeMouseEmitter(this);
    removeTouchEmitter(this);
    removeKeyEmitter(this);
    return this;
  };

  return App;

})();

module.exports = {
  App: App
};



},{"../camera/camera":3,"../colour/colour":4,"../gl/shader":13,"../interact/key":21,"../interact/mouse":22,"../interact/touch":23,"../math/math":30,"../util/debug":34,"../util/log":35}],6:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


Consists of a matrix, a material, parent and children for the scene graph computation
Doesnt have to be drawn per-se
 */
var Contract, Front, Geometry, Matrix3, Matrix4, Node, PXLWarningOnce, Vec3, Vec4, main_draw, matchWithShader, ref, ref1, util,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ref = require('../math/math'), Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix3 = ref.Matrix3, Matrix4 = ref.Matrix4;

matchWithShader = require('../gl/webgl').matchWithShader;

Geometry = require('../geometry/primitive').Geometry;

Contract = require('../gl/contract').Contract;

PXLWarningOnce = require('../util/log').PXLWarningOnce;

ref1 = require('./node_paths'), Front = ref1.Front, main_draw = ref1.main_draw;

util = require('../util/util');


/*Node */

Node = (function() {
  function Node(geometry, material, shader) {
    this.geometry = geometry;
    this.material = material;
    this.shader = shader;
    this.matrix = new Matrix4();
    this.globalMatrix = new Matrix4();
    this._normalMatrix = new Matrix3();
    this._mvpMatrix = new Matrix4();
    this.children = [];
    this.contract = new Contract();
    this.contract.roles.uModelMatrix = "globalMatrix";
    this.contract.roles.uMVPMatrix = "_mvpMatrix";
    this.contract.roles.uNormalMatrix = "_normalMatrix";
    this.contract.roles.uUber0 = "_uber0";
    this._cached = null;
    this.pointLights = [];
    this.spotLights = [];
    this.spotLightShadowMaps = [];
  }

  Node.prototype.add = function(p) {
    if (typeof p._addToNode === "function") {
      p._addToNode(this);
    }
    return this;
  };

  Node.prototype.remove = function(p) {
    if (typeof p._removeFromNode === "function") {
      p._removeFromNode(this);
    }
    return this;
  };

  Node.prototype._addToNode = function(node) {
    node.children.push(this);
    return this;
  };

  Node.prototype.copy = function() {
    return util.clone(this);
  };

  Node.prototype.del = function(p) {
    var i;
    if (indexOf.call(this.children, p) >= 0) {
      i = this.children.indexOf(p);
      this.children.splice(i, 1);
    }
    return this;
  };

  Node.prototype._removeFromNode = function(node) {
    node.del(this);
    return this;
  };

  Node.prototype.draw = function() {
    var front;
    front = new Front();
    return main_draw(this, front);
  };

  return Node;

})();

module.exports = {
  Node: Node
};



},{"../geometry/primitive":9,"../gl/contract":11,"../gl/webgl":17,"../math/math":30,"../util/log":35,"../util/util":42,"./node_paths":7}],7:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


A set of draw paths for the node - effectively render paths
 */
var Camera, Contract, Front, Geometry, Material, Matrix3, Matrix4, PXLWarningOnce, PointLight, SpotLight, Texture, Vec3, Vec4, main_draw, matchWithShader, ref, ref1, shadowmap_create_draw, uber, util;

ref = require('../math/math'), Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix3 = ref.Matrix3, Matrix4 = ref.Matrix4;

matchWithShader = require('../gl/webgl').matchWithShader;

Camera = require('../camera/camera').Camera;

Material = require('../material/material').Material;

Texture = require('../gl/texture').Texture;

ref1 = require('../light/light'), PointLight = ref1.PointLight, SpotLight = ref1.SpotLight;

Geometry = require('../geometry/primitive').Geometry;

Contract = require('../gl/contract').Contract;

PXLWarningOnce = require('../util/log').PXLWarningOnce;

uber = require('../gl/uber_shader_paths');

util = require('../util/util');


/* Front */

Front = (function() {
  function Front() {
    this.globalMatrix = new Matrix4();
    this.pointLights = [];
    this.spotLights = [];
    this._normalMatrix = new Matrix4();
    this._mvpMatrix = new Matrix4();
    this._uber0 = 0;
    this.camera = void 0;
    this.shader = void 0;
    this.skeleton = void 0;
  }

  Front.prototype.clone = function() {
    var c;
    c = new Front();
    c.globalMatrix.copy(this.globalMatrix);
    c.pointLights = this.pointLights.slice(0);
    c.spotLights = this.spotLights.slice(0);
    c._normalMatrix.copy(this._normalMatrix);
    c._mvpMatrix.copy(this._mvpMatrix);
    c._uber0 = this._uber0;
    c.camera = this.camera;
    c.shader = this.shader;
    c.material = this.material;
    c.contract = this.contract;
    c.skeleton = this.skeleton;
    return c;
  };

  return Front;

})();

shadowmap_create_draw = function(node, front) {
  var nm;
  front.globalMatrix = Matrix4.mult(front.globalMatrix, node.matrix);
  nm = node.globalMatrix.clone();
  return node;
};

main_draw = function(node, front) {
  var child, front_child, gl, i, j, k, key, l, len, len1, len2, len3, light, nm, ref2, ref3, ref4, ref5, u;
  front.globalMatrix = Matrix4.mult(front.globalMatrix, node.matrix);
  nm = node.globalMatrix.clone();
  if (node.camera != null) {
    front.camera = node.camera;
    front.camera.update();
    front._uber0 = uber.uber_vertex_camera(true, front._uber0);
  }
  if (front.camera != null) {
    nm = Matrix4.mult(front.camera.m, nm);
    front._mvpMatrix.copy(nm);
    front._mvpMatrix.mult(front.camera.m);
    front._mvpMatrix.mult(front.camera.p);
  } else {
    front._mvpMatrix.copy(nm);
  }
  front._normalMatrix = nm.getMatrix3().invert().transpose();
  ref2 = node.pointLights;
  for (i = 0, len = ref2.length; i < len; i++) {
    light = ref2[i];
    front.pointLights.push(light);
  }
  uber.uber_lighting_point(false, front._uber0);
  if (node.pointLights.length > 0) {
    front._uber0 = uber.uber_lighting_point(true, front._uber0);
  }
  ref3 = node.spotLights;
  for (j = 0, len1 = ref3.length; j < len1; j++) {
    light = ref3[j];
    shadowmap_create_draw(node, front);
    front.spotLights.push(light);
  }
  front._uber0 = uber.uber_lighting_spot(false, front._uber0);
  if (node.spotLights.length > 0) {
    front._uber0 = uber.uber_lighting_spot(true, front._uber0);
  }
  if (node.ambientLight != null) {
    front.ambientLight = node.ambientLight;
  }
  if (node.shader != null) {
    front.shader = node.shader;
  }
  if (node.geometry != null) {
    if (!node.geometry.brewed) {
      node.geometry.brew();
    }
    front.geometry = node.geometry;
  }
  if (node.skeleton != null) {
    node.skeleton._preDraw();
    front.skeleton = node.skeleton;
    front._uber0 = uber.uber_vertex_skinning(true, front._uber0);
  }
  if (node.material != null) {
    if (((front.material != null) && !front.material._override) || (front.material == null)) {
      node.material._preDraw();
      front.material = node.material;
      front._uber0 = uber.uber_clear_material(front._uber0) | node.material._uber0;
    }
  }
  for (key in node.contract.roles) {
    if (front[key] == null) {
      front[key] = node[key];
    }
  }
  front.contract = node.contract;
  if (PXL.Context.gl != null) {
    gl = PXL.Context.gl;
    if ((front.geometry != null) && (front.shader != null)) {
      PointLight._preDraw(front.pointLights);
      SpotLight._preDraw(front.spotLights);
      PXL.Context.shader = front.shader;
      PXL.Context.shader.bind();
      matchWithShader(front);
      if (PXL.Context.debug) {
        ref4 = PXL.Context.shader.contract.findUnmatched();
        for (k = 0, len2 = ref4.length; k < len2; k++) {
          u = ref4[k];
          PXLWarningOnce("Unmatched uniform/attribute in shader: " + u.name);
        }
      }
      front.geometry.drawGL();
      PXL.Context.shader.unbind();
      PXL.Context.shader = void 0;
    }
  }
  ref5 = node.children;
  for (l = 0, len3 = ref5.length; l < len3; l++) {
    child = ref5[l];
    front_child = front.clone();
    main_draw(child, front_child);
  }
  if (front.material != null) {
    front.material._postDraw();
  }
  if (front.skeleton != null) {
    front.skeleton._postDraw();
  }
  return node;
};

module.exports = {
  Front: Front,
  main_draw: main_draw
};



},{"../camera/camera":3,"../geometry/primitive":9,"../gl/contract":11,"../gl/texture":14,"../gl/uber_shader_paths":16,"../gl/webgl":17,"../light/light":24,"../material/material":27,"../math/math":30,"../util/log":35,"../util/util":42}],8:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Geometry, Matrix4, Plane, PlaneFlat, PlaneHexagonFlat, Quad, RGB, RGBA, Vec2, Vec3, Vec4, Vertex, ref, ref1, ref2,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../colour/colour'), RGBA = ref.RGBA, RGB = ref.RGB;

ref1 = require('../math/math'), Matrix4 = ref1.Matrix4, Vec2 = ref1.Vec2, Vec3 = ref1.Vec3, Vec4 = ref1.Vec4;

ref2 = require('./primitive'), Geometry = ref2.Geometry, Vertex = ref2.Vertex, Quad = ref2.Quad;


/* Plane */

Plane = (function(superClass) {
  extend(Plane, superClass);

  function Plane(xres, zres) {
    var i, j, k, l, m, n, ref3, ref4, ref5, ref6, row, row2, x, xp, xt, z, zp, zt;
    if (xres == null) {
      xres = 1;
    }
    if (zres == null) {
      zres = 1;
    }
    Plane.__super__.constructor.call(this);
    this.v = [];
    this.faces = [];
    this.indexed = true;
    this.indices = [];
    for (i = k = 0, ref3 = zres - 1; 0 <= ref3 ? k <= ref3 : k >= ref3; i = 0 <= ref3 ? ++k : --k) {
      for (j = l = 0, ref4 = xres - 1; 0 <= ref4 ? l <= ref4 : l >= ref4; j = 0 <= ref4 ? ++l : --l) {
        xp = -1.0 + (2.0 / xres * j);
        zp = -1.0 + (2.0 / zres * i);
        xt = 1.0 / xres * j;
        zt = 1.0 / zres * i;
        this.vertices.push(new Vertex({
          p: new Vec3(xp, 0, zp),
          c: new RGBA(1.0, 1.0, 1.0, 1.0),
          n: new Vec3(0, 1, 0),
          t: new Vec2(xt, zt)
        }));
      }
    }
    for (z = m = 0, ref5 = zres - 2; 0 <= ref5 ? m <= ref5 : m >= ref5; z = 0 <= ref5 ? ++m : --m) {
      for (x = n = 0, ref6 = xres - 2; 0 <= ref6 ? n <= ref6 : n >= ref6; x = 0 <= ref6 ? ++n : --n) {
        row = xres * z;
        row2 = xres * (z + 1);
        this.indices.push(row + x);
        this.indices.push(row2 + x);
        this.indices.push(row + x + 1);
        this.indices.push(row + x + 1);
        this.indices.push(row2 + x);
        this.indices.push(row2 + x + 1);
        this.faces.push(new Quad(this.v[row2 + x], this.v[row2 + x + 1], this.v[row + x + 1], this.v[row + x]));
      }
    }
  }

  return Plane;

})(Geometry);


/* PlaneFlat */

PlaneFlat = (function(superClass) {
  extend(PlaneFlat, superClass);

  function PlaneFlat(xres1, zres1) {
    var i, idc, idn, idt, idv, idx, j, k, l, m, n, o, ref3, ref4, ref5, ref6, ref7, tt, xp, xt, zp, zt;
    this.xres = xres1 != null ? xres1 : 2;
    this.zres = zres1 != null ? zres1 : 2;
    PlaneFlat.__super__.constructor.call(this);
    tt = xres * zres;
    this.p = new Float32Array(tt * 3);
    this.t = new Float32Array(tt * 2);
    this.n = new Float32Array(tt * 3);
    this.c = new Float32Array(tt * 4);
    this.indices = new Uint16Array(xres * (zres - 1) * 2);
    this.indexed = true;
    this.flat = true;
    if (typeof GL !== "undefined" && GL !== null) {
      this.layout = GL.TRIANGLE_STRIP;
    }
    idv = 0;
    idt = 0;
    idc = 0;
    idn = 0;
    idx = 0;
    for (i = k = 0, ref3 = zres - 1; 0 <= ref3 ? k <= ref3 : k >= ref3; i = 0 <= ref3 ? ++k : --k) {
      for (j = l = 0, ref4 = xres - 1; 0 <= ref4 ? l <= ref4 : l >= ref4; j = 0 <= ref4 ? ++l : --l) {
        xp = -1.0 + (2.0 / (xres - 1) * j);
        zp = -1.0 + (2.0 / (zres - 1) * i);
        this.p[idv++] = xp;
        this.p[idv++] = 0;
        this.p[idv++] = zp;
        xt = 1.0 / (xres - 1) * j;
        zt = 1.0 / (zres - 1) * i;
        this.t[idt++] = xt;
        this.t[idt++] = zt;
        this.c[idc++] = 1.0;
        this.c[idc++] = 1.0;
        this.c[idc++] = 1.0;
        this.c[idc++] = 1.0;
        this.n[idn++] = 0.0;
        this.n[idn++] = 1.0;
        this.n[idn++] = 0.0;
      }
    }
    for (i = m = 0, ref5 = zres - 2; 0 <= ref5 ? m <= ref5 : m >= ref5; i = 0 <= ref5 ? ++m : --m) {
      if (i % 2 === 0) {
        for (j = n = 0, ref6 = xres - 1; 0 <= ref6 ? n <= ref6 : n >= ref6; j = 0 <= ref6 ? ++n : --n) {
          this.indices[idx++] = xres * i + j;
          this.indices[idx++] = xres * (i + 1) + j;
        }
      } else {
        for (j = o = ref7 = xres - 1; ref7 <= 0 ? o <= 0 : o >= 0; j = ref7 <= 0 ? ++o : --o) {
          this.indices[idx++] = xres * (i + 1) + j;
          this.indices[idx++] = xres * i + j;
        }
      }
    }
  }

  PlaneFlat.prototype.getTrisIndexer = function() {
    var flat_indexed_tristrip;
    flat_indexed_tristrip = (function(_this) {
      return function(index) {
        return [new Vec3(_this.p[_this.indices[index] * 3], _this.p[_this.indices[index] * 3 + 1], _this.p[_this.indices[index] * 3 + 2]), new Vec3(_this.p[_this.indices[index + 1] * 3], _this.p[_this.indices[index + 1] * 3 + 1], _this.p[_this.indices[index + 1] * 3 + 2]), new Vec3(_this.p[_this.indices[index + 2] * 3], _this.p[_this.indices[index + 2] * 3 + 1], _this.p[_this.indices[index + 2] * 3 + 2])];
      };
    })(this);
    return flat_indexed_tristrip;
  };

  return PlaneFlat;

})(Geometry);


/*PlaneHexagonFlat */

PlaneHexagonFlat = (function(superClass) {
  extend(PlaneHexagonFlat, superClass);

  function PlaneHexagonFlat(xres1, zres1, indexed) {
    var baries, barycentres, bc, be, colours, edge_width, ep, i, idc, idn, idp, idt, idu, idv, idx, idy, j, k, l, m, n, normals, o, odds, offset, p, points, q, r, ref3, ref4, ref5, ref6, ref7, ref8, row0, row1, row_width, s, sstep, t, te, tex_offset, tex_width, texcoords, tt, u, x, xp, xt, z, zp, zt;
    this.xres = xres1 != null ? xres1 : 2;
    this.zres = zres1 != null ? zres1 : 2;
    if (indexed == null) {
      indexed = true;
    }
    PlaneHexagonFlat.__super__.constructor.call(this);
    ep = Math.floor(this.zres / 2) + 1;
    tt = 3 * this.xres * this.zres;
    this.indexed = indexed;
    if (this.indexed) {
      tt = (ep * (this.xres - 1)) + ((this.zres - ep + 1) * (this.xres - 2));
    }
    this.p = new Float32Array(tt * 3);
    this.t = new Float32Array(tt * 2);
    this.n = new Float32Array(tt * 3);
    this.c = new Float32Array(tt * 4);
    this.indices = new Uint16Array(3 * this.xres * this.zres);
    this.y = new Float32Array(tt * 3);
    this.flat = true;
    if (typeof GL !== "undefined" && GL !== null) {
      this.layout = GL.TRIANGLES;
    }
    idv = 0;
    idt = 0;
    idc = 0;
    idn = 0;
    idx = 0;
    idy = 0;
    bc = 0;
    idu = 0;
    sstep = [0, 1];
    edge_width = 2.0 / Math.ceil(this.xres / 2);
    tex_width = 1.0 / Math.ceil(this.xres / 2);
    barycentres = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
    points = this.p;
    texcoords = this.t;
    colours = this.c;
    normals = this.n;
    baries = this.y;
    if (!this.indexed) {
      tt = (ep * (this.xres - 1)) + ((this.zres - ep + 1) * (this.xres - 2));
      points = new Float32Array(tt * 3);
      texcoords = new Float32Array(tt * 2);
      colours = new Float32Array(tt * 4);
      normals = new Float32Array(tt * 3);
      baries = new Float32Array(tt * 3);
    }
    for (i = k = 0, ref3 = this.zres; 0 <= ref3 ? k <= ref3 : k >= ref3; i = 0 <= ref3 ? ++k : --k) {
      offset = 0;
      tex_offset = 0;
      row_width = this.xres - 1;
      if (i % 2 === 0) {
        row_width = this.xres - 2;
        offset = edge_width / 2;
        tex_offset = tex_width / 2;
      }
      bc = sstep[idu];
      for (j = l = 0, ref4 = row_width - 1; 0 <= ref4 ? l <= ref4 : l >= ref4; j = 0 <= ref4 ? ++l : --l) {
        xp = -1.0 + (j * edge_width) + offset;
        zp = -1.0 + (2.0 / this.zres * i);
        points[idv++] = xp;
        points[idv++] = 0;
        points[idv++] = zp;
        xt = tex_width * j + tex_offset;
        zt = 1.0 / this.zres * i;
        texcoords[idt++] = xt;
        texcoords[idt++] = zt;
        colours[idc++] = 1.0;
        colours[idc++] = 1.0;
        colours[idc++] = 1.0;
        colours[idc++] = 1.0;
        normals[idn++] = 0.0;
        normals[idn++] = 1.0;
        normals[idn++] = 0.0;
        baries[idy++] = barycentres[bc][0];
        baries[idy++] = barycentres[bc][1];
        baries[idy++] = barycentres[bc][2];
        bc++;
        if (bc > 2) {
          bc = 0;
        }
      }
      idu++;
      if (idu > 1) {
        idu = 0;
      }
    }
    for (z = m = 0, ref5 = this.zres - 1; 0 <= ref5 ? m <= ref5 : m >= ref5; z = 0 <= ref5 ? ++m : --m) {
      row0 = Math.floor(z / 2) * (this.xres - 2 + this.xres - 1);
      row1 = row0 + this.xres - 2;
      te = Math.ceil(this.xres / 2);
      be = Math.floor(this.xres / 2);
      odds = false;
      if (z % 2 !== 0) {
        odds = true;
        row0 = row1;
        row1 = row0 + this.xres - 1;
        tt = te;
        te = be;
        be = tt;
      }
      for (x = n = 0, ref6 = be - 1; 0 <= ref6 ? n <= ref6 : n >= ref6; x = 0 <= ref6 ? ++n : --n) {
        if (odds) {
          this.indices[idx++] = row1 + x;
        } else {
          this.indices[idx++] = row1 + x + 1;
        }
        this.indices[idx++] = row0 + x + 1;
        this.indices[idx++] = row0 + x;
      }
      for (x = o = 0, ref7 = te - 1; 0 <= ref7 ? o <= ref7 : o >= ref7; x = 0 <= ref7 ? ++o : --o) {
        this.indices[idx++] = row1 + x;
        this.indices[idx++] = row1 + x + 1;
        if (odds) {
          this.indices[idx++] = row0 + x + 1;
        } else {
          this.indices[idx++] = row0 + x;
        }
      }
    }
    idt = 0;
    idc = 0;
    idp = 0;
    idn = 0;
    idy = 0;
    if (!this.indexed) {
      for (i = p = 0, ref8 = this.indices.length - 1; 0 <= ref8 ? p <= ref8 : p >= ref8; i = 0 <= ref8 ? ++p : --p) {
        idx = this.indices[i];
        for (j = q = 0; q <= 2; j = ++q) {
          this.p[idp++] = points[idx * 3 + j];
        }
        for (j = r = 0; r <= 3; j = ++r) {
          this.c[idc++] = colours[idx * 4 + j];
        }
        for (j = s = 0; s <= 1; j = ++s) {
          this.t[idt++] = texcoords[idx * 2 + j];
        }
        for (j = t = 0; t <= 2; j = ++t) {
          this.n[idn++] = normals[idx * 3 + j];
        }
        for (j = u = 0; u <= 2; j = ++u) {
          this.y[idy++] = baries[idx * 3 + j];
        }
      }
      this.indices = [];
    }
  }

  return PlaneHexagonFlat;

})(Geometry);

module.exports = {
  Plane: Plane,
  PlaneFlat: PlaneFlat,
  PlaneHexagonFlat: PlaneHexagonFlat
};



},{"../colour/colour":4,"../math/math":30,"./primitive":9}],9:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


Primitive Objects - holds support for the various buffers we need


 - TODO
  * Should we use mixins or similar for adding texture co-ords and colours?
  * There is probably a much better methodology here I think
  * draw should be implicit when a primitive is created / added methinx - but what of order? Placement? Z Depth?

Three uses a dynamic flag. potential there.
Need to bind functions so that if vertices are updated, we change the buffers! Should be possible
Also, we are assuming floats here too! Normally thats the case but not always I suspect!
Also GL_TRIANGLES as well (but thats probably for the best)
Context is taken from the actual context set in the object but what if we wish to change context?
When applying materials, we may need to AUTOGEN stuff - thats not a bad idea actually
 */
var Contract, Geometry, GeometryBrewer, Matrix4, PXLError, PXLLog, PXLWarning, Quad, RGB, RGBA, Triangle, TriangleMesh, Vec2, Vec3, Vec4, Vertex, VertexSoup, ref, ref1, ref2, util,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../colour/colour'), RGBA = ref.RGBA, RGB = ref.RGB;

ref1 = require('../math/math'), Matrix4 = ref1.Matrix4, Vec2 = ref1.Vec2, Vec3 = ref1.Vec3, Vec4 = ref1.Vec4;

Contract = require('../gl/contract').Contract;

GeometryBrewer = require('../gl/webgl').GeometryBrewer;

ref2 = require('../util/log'), PXLWarning = ref2.PXLWarning, PXLError = ref2.PXLError, PXLLog = ref2.PXLLog;

util = require('../util/util');


/*Geometry */

Geometry = (function() {
  function Geometry() {
    this.vertices = [];
    if (typeof GL !== "undefined" && GL !== null) {
      this.layout = GL.TRIANGLES;
    }
    this.flat = false;
    this._flat_sizes = {};
    this.faces = [];
    this.indexed = false;
    this.indices = [];
    this.contract = new Contract();
    this.contract.roles.aVertexPosition = "vertexpBuffer";
    this.contract.roles.aVertexTexCoord = "vertextBuffer";
    this.contract.roles.aVertexNormal = "vertexnBuffer";
    this.contract.roles.aVertexColour = "vertexcBuffer";
    this.contract.roles.aVertexTangent = "vertexaBuffer";
    this.contract.roles.aVertexBarycentre = "vertexyBuffer";
    this.contract.roles.aVertexSkinWeight = "vertexwBuffer";
    this.contract.roles.aVertexBoneIndex = "vertexiBuffer";
    util.extend(this, GeometryBrewer);
    this.brewed = false;
  }

  Geometry.prototype._addToNode = function(node) {
    node.geometry = this;
    return this;
  };

  Geometry.prototype.flatten = function() {
    var j, len, ref3, t, vertex;
    t = [];
    ref3 = this.vertices;
    for (j = 0, len = ref3.length; j < len; j++) {
      vertex = ref3[j];
      t.concat(vertex.flatten());
    }
    return t;
  };

  Geometry.prototype.setIndex = function(idx, value) {
    this.indices[idx] = value;
    return this;
  };

  Geometry.prototype.setVertex = function(idx, vertex) {
    this.vertices[idx] = vertex;
    return this;
  };

  Geometry.prototype.addVertex = function(v) {
    this.vertices.push(v);
    return this;
  };

  Geometry.prototype.addIndex = function(idx) {
    return this.indices.push(idx);
  };

  Geometry.prototype.getTrisIndexer = function() {
    var flat_indexed_tris, flat_non_indexed_tris, point_non_indexed_tris, pointy_indexed_tris;
    flat_indexed_tris = (function(_this) {
      return function(index) {
        return [new Vec3(_this.p[_this.indices[index * 3] * 3], _this.p[_this.indices[index * 3] * 3 + 1], _this.p[_this.indices[index * 3] * 3 + 2]), new Vec3(_this.p[_this.indices[index * 3 + 1] * 3], _this.p[_this.indices[index * 3 + 1] * 3 + 1], _this.p[_this.indices[index * 3 + 1] * 3 + 2]), new Vec3(_this.p[_this.indices[index * 3 + 2] * 3], _this.p[_this.indices[index * 3 + 2] * 3 + 1], _this.p[_this.indices[index * 3 + 2] * 3 + 2])];
      };
    })(this);
    flat_non_indexed_tris = (function(_this) {
      return function(index) {
        return [new Vec3(_this.p[index * 9], _this.p[index * 9 + 1], _this.p[index * 9 + 2]), new Vec3(_this.p[index * 9 + 3], _this.p[index * 9 + 4], _this.p[index * 9 + 5]), new Vec3(_this.p[index * 9 + 6], _this.p[index * 9 + 7], _this.p[index * 9 + 8])];
      };
    })(this);
    pointy_indexed_tris = (function(_this) {
      return function(index) {
        return [_this.vertices[_this.indices[index * 3]], _this.vertices[_this.indices[index * 3 + 1]], _this.vertices[_this.indices[index * 3 + 2]]];
      };
    })(this);
    point_non_indexed_tris = (function(_this) {
      return function(index) {
        return [_this.vertices[index * 3], _this.vertices[index * 3 + 1], _this.vertices[index * 3 + 2]];
      };
    })(this);
    if (this.flat) {
      if (this.indexed) {
        return flat_indexed_tris;
      } else {
        return flat_non_indexed_tris;
      }
    } else {
      if (this.indexed) {
        return pointy_indexed_tris;
      } else {
        return point_non_indexed_tris;
      }
    }
  };

  Geometry.prototype.getNumTris = function() {
    if (this instanceof PlaneFlat) {
      return this.indices.length - 2;
    }
    if (this.flat) {
      if (this.indexed) {
        return this.indices.length / 3;
      } else {
        return this.p.length / 3;
      }
    } else {
      if (this.indexed) {
        return this.indices.length / 3;
      } else {
        return this.vertices.length / 3;
      }
    }
  };

  return Geometry;

})();


/* Vertex */

Vertex = (function() {
  function Vertex(named_arguments) {
    var key;
    for (key in named_arguments) {
      this[key] = named_arguments[key];
    }
    if (this.p == null) {
      this.p = new Vec3(0, 0, 0);
    }
  }

  Vertex.prototype.flatten = function() {
    var key, t;
    t = [];
    for (key in this) {
      t.concat(this[key].flatten());
    }
    return t;
  };

  return Vertex;

})();


/*Triangle */

Triangle = (function(superClass) {
  extend(Triangle, superClass);

  function Triangle(p0, p1, p2, n) {
    this.n = n;
    Triangle.__super__.constructor.call(this);
    if ((p0 == null) || (p1 == null) || (p2 == null)) {
      this.vertices = [
        new Vertex({
          p: new Vec3(-1, -1, 0)
        }), new Vertex({
          p: new Vec3(1, -1, 0)
        }), new Vertex({
          p: new Vec3(0, 1, 0)
        })
      ];
    } else {
      this.vertices = [p0, p1, p2];
    }
    if (this.n == null) {
      this.computeFaceNormal();
    }
  }

  Triangle.prototype.flatten = function() {
    var t;
    t = [];
    t = t.concat(this.vertices[0].flatten());
    t = t.concat(this.vertices[1].flatten());
    t = t.concat(this.vertices[2].flatten());
    return t;
  };

  Triangle.prototype.computeFaceNormal = function() {
    var l0, l1;
    l0 = Vec3.sub(this.vertices[1].p, this.vertices[0].p);
    l1 = Vec3.sub(this.vertices[2].p, this.vertices[1].p);
    this.n = l0.cross(l1);
    this.n.normalize();
    return this;
  };

  return Triangle;

})(Geometry);


/*Quad */

Quad = (function(superClass) {
  extend(Quad, superClass);

  function Quad(p0, p1, p2, p3, n) {
    var gl;
    this.n = n;
    Quad.__super__.constructor.call(this);
    if ((p0 == null) || (p1 == null) || (p2 == null) || (p3 == null)) {
      p0 = new Vertex({
        p: new Vec3(-1, 1, 0),
        c: new RGBA(1.0, 1.0, 1.0, 1.0),
        n: new Vec3(0, 0, 1),
        t: new Vec2(0, 1)
      });
      p1 = new Vertex({
        p: new Vec3(-1, -1, 0),
        c: new RGBA(1.0, 1.0, 1.0, 1.0),
        n: new Vec3(0, 0, 1),
        t: new Vec2(0, 0)
      });
      p2 = new Vertex({
        p: new Vec3(1, 1, 0),
        c: new RGBA(1.0, 1.0, 1.0, 1.0),
        n: new Vec3(0, 0, 1),
        t: new Vec2(1, 1)
      });
      p3 = new Vertex({
        p: new Vec3(1, -1, 0),
        c: new RGBA(1.0, 1.0, 1.0, 1.0),
        n: new Vec3(0, 0, 1),
        t: new Vec2(1, 0)
      });
    }
    this.vertices = [p0, p1, p2, p3];
    gl = GL;
    if (typeof GL !== "undefined" && GL !== null) {
      this.layout = GL.TRIANGLE_STRIP;
    }
    if (this.n == null) {
      this.computeFaceNormal();
    }
  }

  Quad.prototype.computeFaceNormal = function() {
    var l0, l1;
    l0 = Vec3.sub(this.vertices[1].p, this.vertices[0].p);
    l1 = Vec3.sub(this.vertices[2].p, this.vertices[1].p);
    this.n = l0.cross(l1);
    this.n.normalize();
    return this;
  };

  Quad.prototype.flatten = function() {
    var t;
    t = [];
    t = t.concat(this.vertices[0].flatten());
    t = t.concat(this.vertices[1].flatten());
    t = t.concat(this.vertices[2].flatten());
    t = t.concat(this.vertices[3].flatten());
    return t;
  };

  return Quad;

})(Geometry);


/* VertexSoup */

VertexSoup = (function(superClass) {
  extend(VertexSoup, superClass);

  function VertexSoup(vertex_list) {
    var gl;
    VertexSoup.__super__.constructor.call(this);
    gl = GL;
    if (typeof GL !== "undefined" && GL !== null) {
      this.layout = GL.POINTS;
    }
    this.vertices = vertex_list;
  }

  return VertexSoup;

})(Geometry);


/*TriangleMesh */

TriangleMesh = (function(superClass) {
  extend(TriangleMesh, superClass);

  function TriangleMesh(indexed) {
    TriangleMesh.__super__.constructor.call(this);
    this.vertices = [];
    this.faces = [];
    this.indexed = indexed;
    if (typeof GL !== "undefined" && GL !== null) {
      this.layout = GL.TRIANGLES;
    }
  }

  TriangleMesh.prototype.addTriangle = function(t) {
    var idx, j, k, len, p, ref3, ti, v;
    if (this.indexed) {
      for (idx = j = 0; j <= 2; idx = ++j) {
        p = this._findV(t.vertices[idx]);
        if (p === -1) {
          this.vertices.push(t.vertices[idx]);
          ti = this.vertices.length;
          ti -= 1;
          t.vertices[idx]._idx = ti;
          this.indices.push(ti);
        } else {
          this.indices.push(p);
        }
      }
    } else {
      ref3 = t.v;
      for (k = 0, len = ref3.length; k < len; k++) {
        v = ref3[k];
        this.vertices.push(v);
      }
    }
    this.faces.push(t);
    return this;
  };

  TriangleMesh.prototype.addTriangleFromIndices = function(indices) {
    var idx, j, len, points, t;
    if (this.indexed) {
      points = [];
      for (j = 0, len = indices.length; j < len; j++) {
        idx = indices[j];
        if (idx > -1 && idx < this.indices.length) {
          points.push(this.vertices[idx]);
        } else {
          PXLError("Attempting to create a triangle from indicies that dont exist");
        }
      }
      t = new Triangle(this.vertices[points[0]], this.vertices[points[1]], this.vertices[points[2]]);
      this.faces.push(t);
    }
    return this;
  };

  TriangleMesh.prototype.addQuad = function(q) {
    var i, idx, j, k, l, len, len1, len2, len3, m, p, ref3, ref4, ref5, ref6, ti;
    if ((this.indexed != null) === true) {
      ref3 = [0, 1, 3];
      for (j = 0, len = ref3.length; j < len; j++) {
        idx = ref3[j];
        p = this._findV(q.vertices[idx]);
        if (p === -1) {
          this.vertices.push(q.vertices[idx]);
          ti = this.vertices.length;
          ti -= 1;
          q.vertices[idx]._idx = ti;
          this.indices.push(ti);
        } else {
          this.indices.push(p);
        }
      }
      ref4 = [2, 3, 1];
      for (k = 0, len1 = ref4.length; k < len1; k++) {
        idx = ref4[k];
        p = this._findV(q.vertices[idx]);
        if (p === -1) {
          this.vertices.push(q.vertices[idx]);
          ti = this.vertices.length;
          ti -= 1;
          q.vertices[idx]._idx = ti;
          this.indices.push(ti);
        } else {
          this.indices.push(p);
        }
      }
    } else {
      ref5 = [0, 1, 3];
      for (l = 0, len2 = ref5.length; l < len2; l++) {
        i = ref5[l];
        this.vertices.push(q.vertices[i]);
      }
      ref6 = [2, 3, 1];
      for (m = 0, len3 = ref6.length; m < len3; m++) {
        i = ref6[m];
        this.vertices.push(q.vertices[i]);
      }
    }
    this.faces.push(new Triangle(q.vertices[0], q.vertices[1], q.vertices[3]));
    this.faces.push(new Triangle(q.vertices[2], q.vertices[3], q.vertices[1]));
    return this;
  };

  TriangleMesh.prototype._findV = function(vf) {
    var idx, j, ref3;
    if (vf._idx != null) {
      return vf._idx;
    }
    if (this.vertices.length > 0) {
      for (idx = j = 0, ref3 = this.vertices.length - 1; 0 <= ref3 ? j <= ref3 : j >= ref3; idx = 0 <= ref3 ? ++j : --j) {
        if (this.vertices[idx] === vf) {
          return idx;
        }
      }
    }
    return -1;
  };

  return TriangleMesh;

})(Geometry);

module.exports = {
  Geometry: Geometry,
  Vertex: Vertex,
  Triangle: Triangle,
  Quad: Quad,
  TriangleMesh: TriangleMesh,
  VertexSoup: VertexSoup
};



},{"../colour/colour":4,"../gl/contract":11,"../gl/webgl":17,"../math/math":30,"../util/log":35,"../util/util":42}],10:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Cuboid, Cylinder, Geometry, Node, PI, Quad, RGB, RGBA, Sphere, Triangle, Vec2, Vec3, Vertex, degToRad, ref, ref1, ref2,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Node = require('../core/node').Node;

ref = require('../colour/colour'), RGB = ref.RGB, RGBA = ref.RGBA;

ref1 = require('../math/math'), Vec2 = ref1.Vec2, Vec3 = ref1.Vec3, PI = ref1.PI, degToRad = ref1.degToRad;

ref2 = require('./primitive'), Vertex = ref2.Vertex, Triangle = ref2.Triangle, Quad = ref2.Quad, Geometry = ref2.Geometry;


/*Cuboid */

Cuboid = (function(superClass) {
  extend(Cuboid, superClass);

  function Cuboid(dim, colour) {
    var d, h, i, k, l, len, ref3, ref4, v, w;
    Cuboid.__super__.constructor.call(this);
    this.indexed = true;
    if (dim == null) {
      dim = new Vec3(1.0, 1.0, 1.0);
    }
    w = dim.x / 2;
    h = dim.y / 2;
    d = dim.z / 2;
    this.vertices.push(new Vertex({
      p: new Vec3(-w, -h, d),
      n: Vec3.normalize(new Vec3(-w, -h, d)),
      t: new Vec2(0, 0)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(w, -h, d),
      n: Vec3.normalize(new Vec3(w, -h, d)),
      t: new Vec2(1, 0)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(w, h, d),
      n: Vec3.normalize(new Vec3(w, h, d)),
      t: new Vec2(1, 1)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(-w, h, d),
      n: Vec3.normalize(new Vec3(-w, h, d)),
      t: new Vec2(0, 1)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(-w, -h, -d),
      n: Vec3.normalize(new Vec3(-w, -h, -d)),
      t: new Vec2(1, 1)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(w, -h, -d),
      n: Vec3.normalize(new Vec3(w, -h, -d)),
      t: new Vec2(1, 0)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(w, h, -d),
      n: Vec3.normalize(new Vec3(w, h, -d)),
      t: new Vec2(0, 0)
    }));
    this.vertices.push(new Vertex({
      p: new Vec3(-w, h, -d),
      n: Vec3.normalize(new Vec3(-w, h, -d)),
      t: new Vec2(0, 1)
    }));
    if (colour != null) {
      ref3 = this.vertices;
      for (k = 0, len = ref3.length; k < len; k++) {
        v = ref3[k];
        v.c = colour;
      }
    }
    this.indices = [0, 1, 2, 0, 2, 3, 6, 5, 4, 6, 4, 7, 4, 0, 3, 4, 3, 7, 1, 5, 2, 5, 6, 2, 3, 2, 6, 3, 6, 7, 4, 5, 1, 4, 1, 0];
    for (i = l = 0, ref4 = this.indices.length - 1; l <= ref4; i = l += 3) {
      this.faces.push(new Triangle(this.vertices[this.indices[i]], this.vertices[this.indices[i + 1]], this.vertices[this.indices[i + 2]]));
    }
  }

  return Cuboid;

})(Geometry);


/*Sphere */

Sphere = (function(superClass) {
  extend(Sphere, superClass);

  function Sphere(radius, segments, colour) {
    var c0, e0, e1, gl, i, j, k, l, len, m, n, p0, p1, ref3, ref4, ref5, ref6, t0, t1, theta1, theta2, theta3, v;
    Sphere.__super__.constructor.call(this);
    gl = PXL.Context.gl;
    this.layout = gl.TRIANGLE_STRIP;
    if (segments != null) {
      if (segments < 0) {
        segments = 10;
      }
    } else {
      segments = 10;
    }
    for (j = k = 0, ref3 = segments / 2; 0 <= ref3 ? k <= ref3 : k >= ref3; j = 0 <= ref3 ? ++k : --k) {
      theta1 = j * 2 * PI / segments - (PI / 2);
      theta2 = (j + 1) * 2 * PI / segments - (PI / 2);
      for (i = l = 0, ref4 = segments + 1; 0 <= ref4 ? l <= ref4 : l >= ref4; i = 0 <= ref4 ? ++l : --l) {
        e0 = new Vec3();
        theta3 = i * 2 * PI / segments;
        e0.x = Math.cos(theta1) * Math.cos(theta3);
        e0.y = Math.sin(theta1);
        e0.z = Math.cos(theta1) * Math.sin(theta3);
        p0 = Vec3.multScalar(e0, radius);
        c0 = new RGBA(1.0, 1.0, 1.0, 1.0);
        t0 = new Vec2(0.999 - i / segments, 0.999 - 2 * j / segments);
        v = new Vertex({
          p: p0,
          t: t0,
          n: e0
        });
        this.vertices.push(v);
        e1 = new Vec3();
        e1.x = Math.cos(theta2) * Math.cos(theta3);
        e1.y = Math.sin(theta2);
        e1.z = Math.cos(theta2) * Math.sin(theta3);
        p1 = Vec3.multScalar(e1, radius);
        t1 = new Vec2(0.999 - i / segments, 0.999 - 2 * (j + 1) / segments);
        v = new Vertex({
          p: p1,
          n: e1,
          t: t1
        });
        this.vertices.push(v);
      }
    }
    for (i = m = 2, ref5 = this.vertices.length - 1; m <= ref5; i = m += 1) {
      if (i % 2 === 0) {
        this.faces.push(new Triangle(this.vertices[i], this.vertices[i - 1], this.vertices[i - 2]));
      } else {
        this.faces.push(new Triangle(this.vertices[i], this.vertices[i - 2], this.vertices[i - 1]));
      }
    }
    if (colour != null) {
      ref6 = this.vertices;
      for (n = 0, len = ref6.length; n < len; n++) {
        v = ref6[n];
        v.c = colour;
      }
    }
  }

  return Sphere;

})(Geometry);


/*Cylinder */

Cylinder = (function(superClass) {
  extend(Cylinder, superClass);

  function Cylinder(radius, resolution, segments, height, colour) {
    var e, hstep, i, j, k, l, len, m, n, n0, o, p, q, r, ref10, ref11, ref12, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, t, tangent, v, x, z;
    Cylinder.__super__.constructor.call(this);
    this.indices = [];
    this.indexed = true;
    if (radius != null) {
      if (radius < 0) {
        radius = 0.5;
      }
    } else {
      radius = 0.5;
    }
    if (segments != null) {
      if (segments < 0) {
        segments = 10;
      }
    } else {
      segments = 10;
    }
    if (height != null) {
      if (height < 0) {
        height = 1.0;
      }
    } else {
      height = 1.0;
    }
    hstep = height / segments;
    height = height / 2.0;
    this.vertices.push(new Vertex({
      p: new Vec3(0, height, 0),
      n: new Vec3(0, 1.0, 0.0),
      t: new Vec2(0.5, 0.0),
      a: new Vec2(0, 0, 0)
    }));
    for (i = k = 1, ref3 = resolution; 1 <= ref3 ? k <= ref3 : k >= ref3; i = 1 <= ref3 ? ++k : --k) {
      x = radius * Math.sin(degToRad(360.0 / resolution * i));
      z = radius * Math.cos(degToRad(360.0 / resolution * i));
      tangent = new Vec3(x, 0, z);
      tangent.normalize();
      tangent.cross(new Vec3(0, 1, 0));
      this.vertices.push(new Vertex({
        p: new Vec3(x, height, z),
        n: Vec3.normalize(new Vec3(x, 1.0, z)),
        t: new Vec2(i / resolution, 0.0),
        a: tangent
      }));
    }
    for (i = l = 1, ref4 = resolution; 1 <= ref4 ? l <= ref4 : l >= ref4; i = 1 <= ref4 ? ++l : --l) {
      this.indices.push(0);
      this.indices.push(i);
      if (i === resolution) {
        this.indices.push(1);
      } else {
        this.indices.push(i + 1);
      }
    }
    for (i = m = 1, ref5 = segments; 1 <= ref5 ? m <= ref5 : m >= ref5; i = 1 <= ref5 ? ++m : --m) {
      for (j = n = 1, ref6 = resolution; 1 <= ref6 ? n <= ref6 : n >= ref6; j = 1 <= ref6 ? ++n : --n) {
        x = radius * Math.sin(degToRad(360.0 / resolution * j));
        z = radius * Math.cos(degToRad(360.0 / resolution * j));
        tangent = new Vec3(x, 0, z);
        tangent.normalize();
        tangent.cross(new Vec3(0, -1, 0));
        n0 = Vec3.normalize(new Vec3(x, 0, z));
        if (i === segments) {
          n0 = Vec3.normalize(new Vec3(x, -1, z));
        }
        this.vertices.push(new Vertex({
          p: new Vec3(x, height - (hstep * i), z),
          n: n0,
          t: new Vec2(j / resolution, i / segments),
          a: tangent
        }));
      }
      s = (i - 1) * resolution + 1;
      e = s + resolution;
      for (j = o = 0, ref7 = resolution - 1; 0 <= ref7 ? o <= ref7 : o >= ref7; j = 0 <= ref7 ? ++o : --o) {
        this.indices.push(s + j);
        this.indices.push(e + j);
        if (j === (resolution - 1)) {
          this.indices.push(e);
        } else {
          this.indices.push(e + j + 1);
        }
      }
      for (j = p = 0, ref8 = resolution - 1; 0 <= ref8 ? p <= ref8 : p >= ref8; j = 0 <= ref8 ? ++p : --p) {
        this.indices.push(s + j);
        if (j === (resolution - 1)) {
          this.indices.push(e);
          this.indices.push(s);
        } else {
          this.indices.push(e + j + 1);
          this.indices.push(s + j + 1);
        }
      }
    }
    this.vertices.push(new Vertex({
      p: new Vec3(0, -height, 0),
      n: new Vec3(0, -1.0, 0.0),
      t: new Vec2(0.5, 1.0),
      a: new Vec3(0, 0, 0)
    }));
    s = (segments * resolution) + 2;
    e = s + resolution - 1;
    for (i = q = ref9 = s, ref10 = e; ref9 <= ref10 ? q <= ref10 : q >= ref10; i = ref9 <= ref10 ? ++q : --q) {
      this.indices.push(s - 1);
      if (i === e) {
        this.indices.push(s);
      } else {
        this.indices.push(i + 1);
      }
      this.indices.push(i);
    }
    for (i = r = 0, ref11 = this.indices.length - 1; r <= ref11; i = r += 3) {
      this.faces.push(new Triangle(this.vertices[this.indices[i]], this.vertices[this.indices[i + 1]], this.vertices[this.indices[i + 2]]));
    }
    if (colour != null) {
      if (colour.a == null) {
        colour = new RGBA(colour.r, colour.g, colour.b, 1.0);
      }
      ref12 = this.vertices;
      for (t = 0, len = ref12.length; t < len; t++) {
        v = ref12[t];
        v.c = colour;
      }
    }
    this;
  }

  return Cylinder;

})(Geometry);

module.exports = {
  Cuboid: Cuboid,
  Sphere: Sphere,
  Cylinder: Cylinder
};



},{"../colour/colour":4,"../core/node":6,"../math/math":30,"./primitive":9}],11:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Contract, util;

util = require('../util/util');


/* Contract */

Contract = (function() {
  Contract.join = function(shader_contract, obj) {
    var a, i, j, len, len1, obj_var, ref, ref1, u;
    ref = shader_contract.uniforms;
    for (i = 0, len = ref.length; i < len; i++) {
      u = ref[i];
      if (obj.contract.roles[u.name] != null) {
        obj_var = obj[obj.contract.roles[u.name]];
        shader_contract.matches[u.name] = obj_var;
        obj.contract.matches[u.name] = obj_var;
      }
    }
    ref1 = shader_contract.attributes;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      a = ref1[j];
      if (obj.contract.roles[a.name] != null) {
        obj_var = obj[obj.contract.roles[a.name]];
        shader_contract.matches[a.name] = obj_var;
        obj.contract.matches[a.name] = obj_var;
      }
    }
    return shader_contract;
  };

  function Contract(attributes, uniforms, user_roles) {
    var key;
    this.attributes = attributes;
    this.uniforms = uniforms;
    this.roles = {};
    if (user_roles != null) {
      for (key in user_roles) {
        this.roles[key] = user_roles[key];
      }
    }
    this.matches = {};
  }

  Contract.prototype.add = function(role, varname) {
    this.roles[role] = varname;
    return this;
  };

  Contract.prototype.hasRoleValue = function(role_name) {
    var key;
    for (key in this.roles) {
      if (this.roles[key] === role_name) {
        return true;
      }
    }
    return false;
  };

  Contract.prototype.findUnmatched = function() {
    var a, i, j, len, len1, ref, ref1, u, unmatched;
    unmatched = [];
    if (this._cached != null) {
      ref = this.uniforms;
      for (i = 0, len = ref.length; i < len; i++) {
        u = ref[i];
        if (this.matches[u.name] == null) {
          unmatched.push(u);
        }
      }
      ref1 = this.attributes;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        a = ref1[j];
        if (this.matches[a.name] == null) {
          unmatched.push(a);
        }
      }
    }
    return unmatched;
  };

  return Contract;

})();

module.exports = {
  Contract: Contract
};



},{"../util/util":42}],12:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


Framebuffer objects - reads the current active context from the exports and creates a FBO

Basic FBO with depth, linear filtering and RGBA with unsigned bytes

Remember, NPOT textures are support but not with repeats or mipmapping

- TODO
  * Depth options
 */
var Fbo, PXLDebug, PXLError, RGB, RGBA, TextureBase, Vec2, ref, ref1;

ref = require('../util/log'), PXLError = ref.PXLError, PXLDebug = ref.PXLDebug;

ref1 = require('../colour/colour'), RGB = ref1.RGB, RGBA = ref1.RGBA;

Vec2 = require('../math/math').Vec2;

TextureBase = require('./texture').TextureBase;


/* Fbo */

Fbo = (function() {
  function Fbo(width, height, channels, datatype, depth) {
    var gl;
    this.width = width;
    this.height = height;
    this.channels = channels;
    this.datatype = datatype;
    this.depth = depth;
    gl = PXL.Context.gl;
    if (!((this.width != null) && (this.height != null))) {
      this.width = PXL.Context.width;
      this.height = PXL.Context.height;
    }
    if (this.channels == null) {
      this.channels = gl.RGBA;
    }
    if (this.datatype == null) {
      this.datatype = gl.UNSIGNED_BYTE;
    }
    if (this.depth == null) {
      this.depth = true;
    }
    this.framebuffer = gl.createFramebuffer();
    PXLDebug("Created an FBO  with dimensions: " + this.width + "," + this.height);
    this._build();
  }

  Fbo.prototype.resize = function(w, h) {
    if (w instanceof Vec2) {
      this.width = w.x;
      this.height = w.y;
    } else if ((w != null) && (h != null)) {
      this.width = w;
      this.height = h;
    } else {
      return this;
    }
    this._build();
    return this;
  };

  Fbo.prototype._build = function() {
    var gl, params;
    gl = PXL.Context.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    if (this.texture == null) {
      params = {
        "min": gl.LINEAR,
        "max": gl.LINEAR,
        "wraps": gl.CLAMP_TO_EDGE,
        "wrapt": gl.CLAMP_TO_EDGE,
        "width": this.width,
        "height": this.height,
        "channels": this.channels,
        "datatype": this.datatype
      };
      this.texture = new TextureBase(params);
      this.texture.build();
    } else {
      this.texture.bind();
      gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.width, this.height, 0, this.channels, this.datatype, null);
    }
    this.renderbuffer = gl.createRenderbuffer();
    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
    if (this.depth) {
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer);
    }
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    this.texture.unbind();
    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
      return PXLError("Failed to Create Framebuffer!");
    }
  };

  Fbo.prototype.bind = function() {
    var gl;
    gl = PXL.Context.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    return gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer);
  };

  Fbo.prototype.unbind = function() {
    var gl;
    gl = PXL.Context.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    return gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  };

  Fbo.prototype.clear = function(colour) {
    var gl;
    gl = PXL.Context.gl;
    if (colour == null) {
      gl.clearColor(0.0, 0.0, 0.0, 0.0);
    } else {
      if (colour instanceof RGBA) {
        gl.clearColor(colour.r, colour.g, colour.b, colour.a);
      } else if (colour instanceof RGB) {
        gl.clearColor(colour.r, colour.g, colour.b, 1.0);
      }
    }
    if (this.depth) {
      return gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    } else {
      return gl.clear(gl.COLOR_BUFFER_BIT);
    }
  };

  Fbo.prototype.washUp = function() {
    var gl;
    gl = PXL.Context.gl;
    gl.deleteFramebuffer(this.framebuffer);
    gl.deleteRenderbuffer(this.renderbuffer);
    gl.deleteTexture(this.texture.texture);
    return this;
  };

  return Fbo;

})();

module.exports = {
  Fbo: Fbo
};



},{"../colour/colour":4,"../math/math":30,"../util/log":35,"./texture":14}],13:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Contract, Light, Matrix4, PXLError, PXLLog, PXLWarning, Shader, Vec2, Vec3, Vec4, ref, ref1, shaderFromText;

ref = require('../math/math'), Matrix4 = ref.Matrix4, Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4;

Light = require('../light/light').Light;

ref1 = require('../util/log'), PXLError = ref1.PXLError, PXLWarning = ref1.PXLWarning, PXLLog = ref1.PXLLog;

Contract = require('./contract').Contract;


/* Shader */

Shader = (function() {
  function Shader(vertex_source, fragment_source, user_roles) {
    this.vertex_source = vertex_source;
    this.fragment_source = fragment_source;
    if (typeof PXL !== "undefined" && PXL !== null) {
      if (PXL.Context.gl != null) {
        this._compile(this.vertex_source, this.fragment_source);
        this.contract = new Contract(this._getAttributes(), this._getUniforms(), user_roles);
      }
    }
    this._uber = false;
    this;
  }

  Shader.prototype._compile = function(sv, sf) {
    var attr, attrs, gl, j, len, success;
    gl = PXL.Context.gl;
    this.vertexShader = gl.createShader(gl.VERTEX_SHADER);
    if (!this.vertexShader) {
      PXLError("No vertex shader object could be created");
    }
    this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    if (!this.fragmentShader) {
      PXLError("No Fragment shader object could be created");
    }
    gl.shaderSource(this.vertexShader, sv);
    gl.compileShader(this.vertexShader);
    if (!gl.getShaderParameter(this.vertexShader, gl.COMPILE_STATUS)) {
      this._printLog(this.vertexShader, sv, "vertex");
    }
    gl.shaderSource(this.fragmentShader, sf);
    gl.compileShader(this.fragmentShader);
    if (!gl.getShaderParameter(this.fragmentShader, gl.COMPILE_STATUS)) {
      this._printLog(this.fragmentShader, sf, "fragment");
    }
    this.shaderProgram = gl.createProgram();
    gl.attachShader(this.shaderProgram, this.vertexShader);
    gl.attachShader(this.shaderProgram, this.fragmentShader);
    gl.bindAttribLocation(this.shaderProgram, 0, "aVertexPosition");
    gl.linkProgram(this.shaderProgram);
    success = gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS);
    if (!success) {
      PXLWarning(gl.getProgramInfoLog(this.shaderProgram));
      PXLError("Failed to Link Shader");
      WebGLActiveInfo;
    }
    attrs = this._getAttributes();
    for (j = 0, len = attrs.length; j < len; j++) {
      attr = attrs[j];
      gl.bindAttribLocation(this.shaderProgram, attr.pos, attr.name);
    }
    return this;
  };

  Shader.prototype._printLog = function(shader, source, kind) {
    var compilationLog, j, l, len, ln, ref2, tsf;
    compilationLog = PXL.Context.gl.getShaderInfoLog(shader);
    PXLLog('Shader compiler log: ' + compilationLog);
    tsf = "";
    ln = 1;
    ref2 = source.split("\n");
    for (j = 0, len = ref2.length; j < len; j++) {
      l = ref2[j];
      tsf += ln + ": " + l + "\n";
      ln++;
    }
    PXLLog(tsf);
    this._splitError(compilationLog, source);
    return PXLError("Could not compile " + kind + " shader");
  };

  Shader.prototype._addToNode = function(node) {
    node.shader = this;
    return this;
  };

  Shader.prototype._splitError = function(s, data) {
    var datalines, fileno, j, len, line, lineno, lines, match, message;
    lines = s.split('\n');
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      match = line.match(/ERROR: (\d+):(\d+): (.*)/);
      if (match) {
        fileno = parseInt(match[1], 10) - 1;
        lineno = parseInt(match[2], 10) - 1;
        message = match[3];
        datalines = data.split('\n');
        PXLLog("Shader Error Log: " + fileno + ", " + lineno + ", " + message + "," + datalines[lineno]);
      }
    }
    return this;
  };

  Shader.prototype._getLocation = function(name) {
    return PXL.Context.gl.getUniformLocation(this.shaderProgram, name);
  };

  Shader.prototype.bind = function() {
    PXL.Context.gl.useProgram(this.shaderProgram);
    PXL.Context.shader = this;
    return this;
  };

  Shader.prototype.unbind = function() {
    PXL.Context.gl.useProgram(null);
    return this;
  };

  Shader.prototype.washUp = function() {
    var gl;
    gl = PXL.Context.gl;
    gl.detachShader(this.shaderProgram, this.vertexShader);
    gl.detachShader(this.shaderProgram, this.fragmentShader);
    gl.deleteProgram(this.shaderProgram);
    gl.deleteShader(this.vertexShader);
    gl.deleteShader(this.fragmentShader);
    return this;
  };

  Shader.prototype._getAttributes = function() {
    var a, attribute, gl, i, j, num_attributes, ref2;
    if (this.attributes == null) {
      gl = PXL.Context.gl;
      num_attributes = gl.getProgramParameter(this.shaderProgram, GL.ACTIVE_ATTRIBUTES);
      this.attributes = [];
      for (i = j = 0, ref2 = num_attributes - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
        a = gl.getActiveAttrib(this.shaderProgram, i);
        attribute = {
          name: a.name,
          pos: gl.getAttribLocation(this.shaderProgram, a.name),
          type: a.type,
          size: a.size
        };
        this.attributes.push(attribute);
      }
    }
    return this.attributes;
  };


  /*
    const GLenum FLOAT_VEC2                     = 0x8B50; 
    const GLenum FLOAT_VEC3                     = 0x8B51;
    const GLenum FLOAT_VEC4                     = 0x8B52;
    const GLenum INT_VEC2                       = 0x8B53;
    const GLenum INT_VEC3                       = 0x8B54;
    const GLenum INT_VEC4                       = 0x8B55;
    const GLenum BOOL                           = 0x8B56;
    const GLenum BOOL_VEC2                      = 0x8B57;
    const GLenum BOOL_VEC3                      = 0x8B58;
    const GLenum BOOL_VEC4                      = 0x8B59;
    const GLenum FLOAT_MAT2                     = 0x8B5A;
    const GLenum FLOAT_MAT3                     = 0x8B5B;
    const GLenum FLOAT_MAT4                     = 0x8B5C;
    const GLenum SAMPLER_2D                     = 0x8B5E;
    const GLenum SAMPLER_CUBE                   = 0x8B60;
   */

  Shader.prototype._getUniforms = function() {
    var gl, i, j, num_uniforms, ref2, tn, u, uniform;
    if (this.uniforms == null) {
      gl = PXL.Context.gl;
      num_uniforms = gl.getProgramParameter(this.shaderProgram, GL.ACTIVE_UNIFORMS);
      this.uniforms = [];
      for (i = j = 0, ref2 = num_uniforms - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
        u = gl.getActiveUniform(this.shaderProgram, i);
        tn = u.name;
        i = tn.indexOf("[");
        if (i > 0) {
          tn = u.name.slice(0, i);
        }
        uniform = {
          name: tn,
          pos: this._getLocation(u.name),
          type: u.type,
          size: u.size
        };
        this.uniforms.push(uniform);
      }
    }
    return this.uniforms;
  };

  Shader.prototype._getTextures = function() {
    var a, d, j, len, p, x;
    d = this._parseShader("uniform");
    x = [];
    for (j = 0, len = d.length; j < len; j++) {
      a = d[j];
      if (a.type === "sampler2D") {
        p = this._getLocation(a.name);
        if ((p != null) && p !== -1) {
          a.pos = p;
          x.push(a);
        }
      }
    }
    return x;
  };

  Shader.prototype._parseShader = function(token) {
    var attr, data, finals, j, k, l, len, len1, lines, matches, re, t, tokens;
    data = [];
    lines = this.sv.split(";").concat(this.sf.split(";"));
    for (j = 0, len = lines.length; j < len; j++) {
      l = lines[j];
      re = RegExp("\\b" + token + "\\b");
      if (l.match(re) != null) {
        tokens = l.split(" ");
        finals = [];
        for (k = 0, len1 = tokens.length; k < len1; k++) {
          t = tokens[k];
          t = t.replace(/\n/, "");
          t = t.replace(/\s/, "");
          if (t.length !== 0) {
            finals.push(t);
          }
        }
        finals.push(1);
        matches = finals[2].match(/\[([0-9]+)\]/);
        if (matches != null) {
          finals[3] = matches[1];
        }
        finals[2] = finals[2].match(/([a-zA-Z]+)/g)[0];
        if (finals.length === 4) {
          attr = {};
          attr.name = finals[2];
          attr.type = finals[1];
          attr.pos = -1;
          attr.size = finals[3];
          data.push(attr);
        }
      }
    }
    return data;
  };

  Shader.prototype.setUniform1f = function(name, a) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform1f(this._getLocation(name), a);
    return this;
  };

  Shader.prototype.setUniform1i = function(name, a) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform1i(this._getLocation(name), a);
    return this;
  };

  Shader.prototype.setUniform1fv = function(name, a) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform1fv(this._getLocation(name), a);
    return this;
  };

  Shader.prototype.setUniform2fv = function(name, a) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform2fv(this._getLocation(name), a);
    return this;
  };

  Shader.prototype.setUniform2v = function(name, v) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform2f(this._getLocation(name), v.x, v.y);
    return this;
  };

  Shader.prototype.setUniform3f = function(name, a, b, c) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform3f(this._getLocation(name), a, b, c);
    return this;
  };

  Shader.prototype.setUniform3fv = function(name, a) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform3fv(this._getLocation(name), a);
    return this;
  };

  Shader.prototype.setUniform3v = function(name, v) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform3f(this._getLocation(name), v.x, v.y, v.z);
    return this;
  };

  Shader.prototype.setUniform3f = function(name, a, b, c) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform3f(this._getLocation(name), a, b, c);
    return this;
  };

  Shader.prototype.setUniform4f = function(name, a, b, c, d) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform4f(this._getLocation(name), a, b, c, d);
    return this;
  };

  Shader.prototype.setUniform4v = function(name, v) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform4f(this._getLocation(name), v.x, v.y, v.z, v.w);
    return this;
  };

  Shader.prototype.setUniform4fv = function(name, a) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniform4fv(this._getLocation(name), a);
    return this;
  };

  Shader.prototype.setMatrix3f = function(name, m) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniformMatrix3fv(this._getLocation(name), false, m.a);
    return this;
  };

  Shader.prototype.setMatrix4f = function(name, m) {
    var gl;
    gl = PXL.Context.gl;
    gl.uniformMatrix4fv(this._getLocation(name), false, m.a);
    return this;
  };

  Shader.prototype.enableAttribArray = function(name) {
    var gl, position;
    gl = PXL.Context.gl;
    position = gl.getAttribLocation(this.shaderProgram, name);
    gl.enableVertexAttribArray(position);
    return this;
  };

  Shader.prototype.getAttribLocation = function(name) {
    var gl;
    gl = PXL.Context.gl;
    return gl.getAttribLocation(this.shaderProgram, name);
  };

  return Shader;

})();


/* shaderFromText */

shaderFromText = function(text, contract) {
  var _findMain, _findPrecision, _matchWithLibrary, _splitShader, chunks, main_fragment, main_vertex, precision_fragment, precision_vertex, ref2, ref3, ref4, ref5, ref6, sf, shader, sv;
  _splitShader = function(s) {
    var pf, pv, sf, sv;
    sv = sf = "";
    pv = s.indexOf("##>VERTEX");
    pf = s.indexOf("##>FRAGMENT");
    if (pv !== -1) {
      if (pf !== -1 && pf > pv) {
        sv = s.slice(pv + 9, pf);
      } else if (pf !== -1 && pf < pv) {
        sv = s.slice(pv + 9);
      }
    }
    if (pf !== -1) {
      if (pv !== -1 && pv > pf) {
        sf = s.slice(pf + 11, pv);
      } else if (pf !== -1 && pv < pf) {
        sf = s.slice(pf + 11);
      }
    }
    return [sv, sf];
  };
  _matchWithLibrary = function(s) {
    var chunks, j, len, match, matches, type;
    matches = s.match(/\{\{(ShaderChunkLibrary\.[a-zA-Z]+)\}\}/g);
    chunks = [];
    if (matches != null) {
      for (j = 0, len = matches.length; j < len; j++) {
        match = matches[j];
        type = match.replace("}}", "").split(".")[1];
        if (ShaderChunkLibrary[type] == null) {
          PXLError("Could not find " + type + " in Shader Library");
        } else {
          chunks.push(ShaderChunkLibrary[type]);
        }
      }
    }
    return chunks;
  };
  _findPrecision = function(s) {
    var pe, pp, ps, pv;
    pp = "";
    pv = ps = s.indexOf("precision");
    pe = -1;
    while (pv !== -1) {
      pe = s.indexOf(";", pv);
      pp += s.slice(pv, pe + 1) + "\n";
      pv = s.indexOf("precision", pe);
    }
    if (ps !== -1) {
      s = s.slice(pe + 1);
    }
    return [pp, s];
  };
  _findMain = function(s) {
    var ps;
    ps = s.indexOf("void main");
    if (ps !== -1) {
      return [s.slice(ps), s.slice(0, ps)];
    }
    return [void 0, s];
  };
  ref2 = _splitShader(text), sv = ref2[0], sf = ref2[1];
  chunks = _matchWithLibrary(text);
  sv = sv.replace(/;(?! [a-zA-Z0-9])/g, ';');
  sv = sv.replace(/\{/g, '{');
  sv = sv.replace(/\}/g, '}');
  sf = sf.replace(/;(?! [a-zA-Z0-9])/g, ';');
  sf = sf.replace(/;(?! [a-zA-Z0-9])/g, ';');
  sf = sf.replace(/\{/g, '{');
  sf = sf.replace(/\}/g, '}');
  ref3 = _findPrecision(sf), precision_fragment = ref3[0], sf = ref3[1];
  ref4 = _findPrecision(sv), precision_vertex = ref4[0], sv = ref4[1];
  ref5 = _findMain(sf), main_fragment = ref5[0], sf = ref5[1];
  ref6 = _findMain(sv), main_vertex = ref6[0], sv = ref6[1];
  chunks.push(new ShaderChunk({
    func: sv,
    main_func: main_vertex
  }, {
    func: sf,
    main_func: main_fragment
  }));
  shader = new Shader(chunks, contract, precision_vertex, precision_fragment);
  return shader;
};

module.exports = {
  Shader: Shader,
  shaderFromText: shaderFromText
};



},{"../light/light":24,"../math/math":30,"../util/log":35,"./contract":11}],14:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


TODO - Probably pass in data and have a convinence method that calls a request?
  - handling no RGBA textures like JPGS?

https://developer.mozilla.org/en-US/docs/WebGL/Animating_textures_in_WebGL


Texture Objects - uses the request object and callbacks. Is bound to a context

- TODO
  * How does this match with textures in the current shader context? Check that!
  * Video textures and compressed textures as per the spec for HTML5
 */
var Contract, PXLError, PXLLog, PXLWarning, Request, Texture, TextureBase, TextureCube, ref, textureCubeFromURL, textureFromURL,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Request = require('../util/request').Request;

ref = require('../util/log'), PXLError = ref.PXLError, PXLWarning = ref.PXLWarning, PXLLog = ref.PXLLog;

Contract = require('../gl/contract').Contract;


/*TextureBase */

TextureBase = (function() {
  TextureBase.UNITS = [];

  function TextureBase(params) {
    var gl, i, k, ref1;
    if (PXL.Context.gl == null) {
      PXLError("No context or url provided for texture");
    }
    gl = PXL.Context.gl;
    if (params == null) {
      params = {};
    }
    if (TextureBase.UNITS.length === 0) {
      for (i = k = 0, ref1 = PXL.Context.profile.combinedUnits - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        TextureBase.UNITS.push(null);
      }
    }
    this.unit = 0;
    this.min = params.min == null ? gl.LINEAR : params.min;
    this.max = params.max == null ? gl.LINEAR : params.max;
    this.wraps = params.wraps == null ? gl.CLAMP_TO_EDGE : params.wraps;
    this.wrapt = params.wrapt == null ? gl.CLAMP_TO_EDGE : params.wrapt;
    this.width = params.width == null ? 512 : params.width;
    this.height = params.height == null ? 512 : params.height;
    this.channels = params.channels == null ? gl.RGBA : params.channels;
    this.datatype = params.datatype == null ? gl.UNSIGNED_BYTE : params.datatype;
    this.texture = gl.createTexture();
    this.contract = new Contract();
    this.contract.roles.uSampler = "unit";
  }

  TextureBase.prototype._isPowerOfTwo = function(x) {
    return (x & (x - 1)) === 0;
  };

  TextureBase.prototype._findUnit = function() {
    var i, k, ref1;
    for (i = k = 0, ref1 = TextureBase.UNITS.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      if (TextureBase.UNITS[i] === null || TextureBase.UNITS[i] === this) {
        TextureBase.UNITS[i] = this;
        return i;
      }
    }
    PXLError("Run out of available texture units");
    return 0;
  };

  TextureBase.prototype._nextHighestPowerOfTwo = function(x) {
    var i;
    --x;
    i = 1;
    while (i < 32) {
      x = x | x >> i;
      i <<= 1;
    }
    return x + 1;
  };

  TextureBase.prototype.build = function(passed_context) {
    var context, gl;
    context = PXL.Context;
    if (passed_context != null) {
      context = passed_context;
    }
    if (!context) {
      return;
    }
    gl = context.gl;
    this.bind();
    gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.width, this.height, 0, this.channels, this.datatype, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.max);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.min);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wraps);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapt);
    this.unbind();
    this.loaded = true;
    return this;
  };

  TextureBase.prototype.bind = function() {
    var gl;
    gl = PXL.Context.gl;
    if (gl != null) {
      this.unit = this._findUnit();
      gl.activeTexture(GL.TEXTURE0 + this.unit);
      gl.bindTexture(gl.TEXTURE_2D, this.texture);
    }
    return this;
  };

  TextureBase.prototype.unbind = function() {
    var gl;
    gl = PXL.Context.gl;
    if (gl != null) {
      gl.activeTexture(gl.TEXTURE0 + this.unit);
      gl.bindTexture(gl.TEXTURE_2D, null);
      TextureBase.UNITS[this.unit] = null;
      this.unit = 0;
    }
    return this;
  };

  TextureBase.prototype.update = function(texdata) {
    var gl;
    if (this.textureData instanceof Image && (texdata == null)) {
      gl = PXL.Context.gl;
      this.bind();
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
      gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.channels, this.datatype, this.textureData);
      return this.unbind();
    } else if ((texdata != null) && texdata instanceof Array) {
      if (this.datatype === GL.UNSIGNED_BYTE) {
        this.textureData = new Uint8Array(texdata);
      } else if (this.datatype === GL.FLOAT) {
        this.textureData = new Float32Array(texdata);
      }
      gl = PXL.Context.gl;
      this.bind();
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
      gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.width, this.height, 0, this.channels, this.datatype, this.textureData);
      return this.unbind();
    } else if ((texdata != null) && (texdata instanceof Uint8Array || texdata instanceof Float32Array)) {
      this.textureData = texdata;
      gl = PXL.Context.gl;
      this.bind();
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
      gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.width, this.height, 0, this.channels, this.datatype, this.textureData);
      return this.unbind();
    }
  };

  TextureBase.prototype._addToNode = function(node) {
    node.textures.push(this);
    return this;
  };

  TextureBase.prototype._removeFromNode = function(node) {
    node.textures.splice(node.textures.indexOf(this));
    return this;
  };

  TextureBase.prototype.washup = function() {
    var gl;
    gl = PXL.Context.gl;
    gl.deleteTexture(this.texture);
    return this;
  };

  return TextureBase;

})();


/* Texture */

Texture = (function(superClass) {
  extend(Texture, superClass);

  function Texture(texdata, params) {
    var i, k, ref1;
    Texture.__super__.constructor.call(this, params);
    if (PXL.Context.gl == null) {
      PXLError("No context provided for texture");
    }
    if (texdata != null) {
      if (texdata instanceof Image) {
        this.textureData = texdata;
        this.width = this.textureData.width;
        this.height = this.textureData.height;
      } else if (texdata instanceof Array) {
        if (this.datatype === GL.UNSIGNED_BYTE) {
          this.textureData = new Uint8Array(texdata);
        } else if (this.datatype === GL.FLOAT) {
          this.textureData = new Float32Array(texdata);
        }
      } else if (texdata instanceof Uint8Array || texdata instanceof Float32Array) {
        this.textureData = texdata;
      }
    } else {
      PXLLog("No Texture Data provided. Assuming uint8 data");
      texdata = [];
      for (i = k = 0, ref1 = this.width * this.height * this.channels - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        texdata.push(0);
      }
      this.textureData = new Float32Array(texdata);
    }
    this.build();
  }

  Texture.prototype.build = function() {
    var context, gl;
    context = PXL.Context;
    gl = context.gl;
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
    gl.bindTexture(gl.TEXTURE_2D, this.texture);
    if (this.textureData instanceof Image) {
      gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.channels, this.datatype, this.textureData);
    } else {
      gl.texImage2D(gl.TEXTURE_2D, 0, this.channels, this.width, this.height, 0, this.channels, this.datatype, this.textureData);
    }
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.min);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.max);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wraps);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapt);
    return gl.bindTexture(gl.TEXTURE_2D, null);
  };

  Texture;

  return Texture;

})(TextureBase);


/* textureFromURL */

textureFromURL = function(url, callback, onerror, params) {
  var cc, failure, gl, r, success;
  if ((url == null) || (PXL.Context.gl == null)) {
    PXLWarning("No context or url provided for texture");
  }
  cc = PXL.Context;
  gl = cc.gl;
  r = new Request(url);
  success = (function(_this) {
    return function() {
      var loadHandler, texImage;
      texImage = new Image();
      texImage.src = url;
      loadHandler = function() {
        var texture;
        texture = new Texture(texImage, params);
        return typeof callback === "function" ? callback(texture) : void 0;
      };
      texImage.addEventListener('load', loadHandler);
      if (texImage.complete) {
        return loadHandler();
      }
    };
  })(this);
  failure = (function(_this) {
    return function() {
      PXLWarning("Failed to load Texture: " + url);
      return typeof onerror === "function" ? onerror() : void 0;
    };
  })(this);
  return r.get(success, failure);
};


/* TextureCube */

TextureCube = (function(superClass) {
  extend(TextureCube, superClass);

  function TextureCube(images, params) {
    var gl, j, k;
    TextureCube.__super__.constructor.call(this, params);
    gl = PXL.Context.gl;
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.max);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.min);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.wraps);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.wrapt);
    for (j = k = 0; k <= 5; j = ++k) {
      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + j, 0, this.channels, this.channels, this.datatype, images[j]);
    }
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
  }

  TextureCube.prototype.bind = function(unit) {
    var gl;
    gl = PXL.Context.gl;
    if (gl != null) {
      this.unit = this._findUnit();
      gl.activeTexture(gl.TEXTURE0 + this.unit);
      return gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);
    }
  };

  TextureCube.prototype.unbind = function() {
    var gl;
    gl = PXL.Context.gl;
    if (gl != null) {
      gl.activeTexture(gl.TEXTURE0 + this.unit);
      gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
      TextureBase.UNITS[i] = null;
      return this.unit = 0;
    }
  };

  return TextureCube;

})(TextureBase);

textureCubeFromURL = function(paths, callback, onerror, params) {
  var cc, i, k, loadedTextures, texImages;
  if ((paths == null) || (PXL.Context == null)) {
    PXLError("No context or urls provided for cubemap texture");
  }
  if (paths.length !== 6) {
    PXLError("6 URLs must be provided for cubemap texture");
  }
  texImages = [];
  loadedTextures = 0;
  cc = PXL.Context;
  for (i = k = 0; k <= 5; i = ++k) {
    texImages[i] = new Image();
    texImages[i].cubeID = i;
    texImages[i].src = paths[i];
    texImages[i].onload = (function(_this) {
      return function() {
        var texture;
        loadedTextures++;
        if (loadedTextures === 6) {
          texture = new TextureCube(texImages, params);
          return typeof callback === "function" ? callback(texture) : void 0;
        }
      };
    })(this);
  }
  return this;
};

module.exports = {
  Texture: Texture,
  TextureBase: TextureBase,
  TextureCube: TextureCube,
  textureFromURL: textureFromURL,
  textureCubeFromURL: textureCubeFromURL
};



},{"../gl/contract":11,"../util/log":35,"../util/request":40}],15:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

An Uber shader implementation
 */
var AmbientLight, DepthMaterial, PhongMaterial, PointLight, Shader, SpotLight, TextureMaterial, UberShader, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

PhongMaterial = require("../material/phong").PhongMaterial;

TextureMaterial = require("../material/basic").TextureMaterial;

DepthMaterial = require("../material/depth").DepthMaterial;

ref = require("../light/light"), PointLight = ref.PointLight, SpotLight = ref.SpotLight, AmbientLight = ref.AmbientLight;

Shader = require("./shader").Shader;


/* UberShader */

UberShader = (function(superClass) {
  extend(UberShader, superClass);

  UberShader._noise = "vec3 mod289(vec3 x) {\n" + "  return x - floor(x * (1.0 / 289.0)) * 289.0;\n" + "}\n\n" + "vec4 mod289(vec4 x) {\n" + "  return x - floor(x * (1.0 / 289.0)) * 289.0;\n" + "}\n\n" + "vec4 permute(vec4 x) {\n" + "     return mod289(((x*34.0)+1.0)*x);\n" + "}\n\n" + "vec4 taylorInvSqrt(vec4 r) {\n" + "  return 1.79284291400159 - 0.85373472095314 * r;\n" + "}\n\n" + "float snoise(vec3 v) {\n" + "const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n" + "const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n" + "// First corner\n" + "vec3 i  = floor(v + dot(v, C.yyy) );\n" + "vec3 x0 =   v - i + dot(i, C.xxx) ;\n" + "// Other corners\n" + "vec3 g = step(x0.yzx, x0.xyz);\n" + "vec3 l = 1.0 - g;\n" + "vec3 i1 = min( g.xyz, l.zxy );\n" + "vec3 i2 = max( g.xyz, l.zxy );\n" + "//   x0 = x0 - 0.0 + 0.0 * C.xxx;\n " + "//   x1 = x0 - i1  + 1.0 * C.xxx;\n " + "//   x2 = x0 - i2  + 2.0 * C.xxx;\n " + "//   x3 = x0 - 1.0 + 3.0 * C.xxx;\n " + "vec3 x1 = x0 - i1 + C.xxx;\n" + "vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n" + "vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n" + "// Permutations\n" + "i = mod289(i);\n" + "vec4 p = permute( permute( permute( \n" + "           i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n" + "         + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n" + "         + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n" + "// Gradients: 7x7 points over a square, mapped onto an octahedron.\n" + "// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n" + "float n_ = 0.142857142857; // 1.0/7.0\n" + "vec3  ns = n_ * D.wyz - D.xzx;\n\n" + "vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n" + "vec4 x_ = floor(j * ns.z);\n" + "vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n" + "vec4 x = x_ *ns.x + ns.yyyy;\n" + "vec4 y = y_ *ns.x + ns.yyyy;\n " + "vec4 h = 1.0 - abs(x) - abs(y);\n\n" + "vec4 b0 = vec4( x.xy, y.xy );\n" + "vec4 b1 = vec4( x.zw, y.zw );\n\n" + "//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n" + "//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n" + "vec4 s0 = floor(b0)*2.0 + 1.0;\n" + "vec4 s1 = floor(b1)*2.0 + 1.0;\n" + "vec4 sh = -step(h, vec4(0.0));\n\n" + "vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n" + "vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n" + "vec3 p0 = vec3(a0.xy,h.x);\n" + "vec3 p1 = vec3(a0.zw,h.y);\n" + "vec3 p2 = vec3(a1.xy,h.z);\n" + "vec3 p3 = vec3(a1.zw,h.w);\n\n" + "//Normalise gradients\n" + "vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n" + "p0 *= norm.x;\n" + "p1 *= norm.y;\n" + "p2 *= norm.z;\n" + "p3 *= norm.w;\n\n" + "// Mix final noise value\n" + "vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n" + "m = m * m;\n" + "return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n" + "dot(p2,x2), dot(p3,x3) ) );\n" + "}\n";

  UberShader._tangent_frame = "mat3 computeTangentFrame(vec3 N, vec3 p, vec2 uv) {\n" + " // get edge vectors of the @fragment triangle\n" + " vec3 dp1 = dFdx( p );\n" + " vec3 dp2 = dFdy( p );\n" + " vec2 duv1 = dFdx( uv );\n" + " vec2 duv2 = dFdy( uv );\n" + " // solve the linear system\n" + " vec3 dp2perp = cross( dp2, N );\n" + " vec3 dp1perp = cross( N, dp1 );\n" + " vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n" + " vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n" + " // construct a scale-invariant frame \n" + " float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\n" + " return mat3( T * invmax, B * invmax, N );\n" + "}\n";

  UberShader._sobel = "vec3 sobel(float step, vec2 center, float limit) {\n" + "  // get samples around @fragment\n" + "  float tleft = intensity(texture2D(uSampler,center + vec2(-step,step)));\n" + "  float left = intensity(texture2D(uSampler,center + vec2(-step,0)));\n" + "  float bleft = intensity(texture2D(uSampler,center + vec2(-step,-step)));\n" + "  float top = intensity(texture2D(uSampler,center + vec2(0,step)));\n" + "  float bottom = intensity(texture2D(uSampler,center + vec2(0,-step)));\n" + "  float tright = intensity(texture2D(uSampler,center + vec2(step,step)));\n" + "  float right = intensity(texture2D(uSampler,center + vec2(step,0)));\n" + "  float bright = intensity(texture2D(uSampler,center + vec2(step,-step)));\n" + "  // Sobel masks (to estimate gradient)\n" + "  //        1 0 -1     -1 -2 -1\n" + "  //    X = 2 0 -2  Y = 0  0  0\n" + "  //        1 0 -1      1  2  1\n" + "  float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;\n" + "  float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;\n" + "  float color = sqrt((x*x) + (y*y));\n" + "  if (color < limit){return vec3(0.0,0.0,0.0);}\n" + "  return vec3(1.0,1.0,1.0);\n}\n";

  UberShader._bitcheck = "bool bitcheck(in float fcheck, in int bitpos) { \n" + "  int fsi = int(fcheck);\n" + "  for (int i = 0; i < 32; i++) { \n" + "    if (i >= bitpos) return fract(float(fsi) / 2.0) != 0.0;\n" + "    fsi = fsi / 2; \n" + "  }\n" + "  return false;\n}\n";

  UberShader.vertex = "uniform float uUber0;\n";

  UberShader.vertex += "attribute vec3 aVertexPosition;\nuniform mat4 uModelMatrix;\nvarying vec4 vPosition;\n";

  UberShader.vertex += "#ifdef VERTEX_COLOUR\nattribute vec4 aVertexColour;\nvarying vec4 vColour;\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_TEXTURE\nattribute vec2 aVertexTexCoord;\nvarying vec2 vTexCoord;\n#endif\n";

  UberShader.vertex += "#ifdef BASIC_CAMERA\nuniform mat4 uCameraMatrix;\nuniform mat4 uProjectionMatrix;\n#endif\n";

  UberShader.vertex += "#ifdef ADVANCED_CAMERA\nuniform float uCameraNear;\n" + "uniform float uCameraFar;\n " + "uniform mat4 uCameraInverseMatrix;\n " + "uniform mat4 uInverseProjectionMatrix;\n" + "varying vec4 vEyePosition;\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_NORMAL\nattribute vec3 aVertexNormal;\nvarying vec3 vNormal;\n " + "uniform mat3 uNormalMatrix;\nvarying vec4 vTransformedNormal;\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_TANGENT\n attribute vec3 aVertexTangent;\nvarying vec3 vTangent;\n#endif\n";

  UberShader.vertex += "#ifdef SKINNING\n" + "attribute vec4 aVertexSkinWeight;\nattribute vec4 aVertexBoneIndex;\n\n" + "uniform sampler2D uBonePalette;\nuniform int uBoneTexDim;\n#endif\n";

  UberShader.vertex += PointLight.vertex_head;

  UberShader.vertex += AmbientLight.vertex_head;

  UberShader.vertex += SpotLight.vertex_head;

  UberShader.vertex += "#ifdef VERTEX_TANGENT_FRAME\n " + UberShader._tangent_frame + "\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_SOBEL\n " + UberShader._sobel + "\n#endif\n";

  UberShader.vertex += "#ifdef SKINNING\n" + "vec3 qtransform( vec4 q, vec3 v ){\n" + "  return v + 2.0 * cross(cross(v, q.xyz ) + q.w*v, q.xyz);\n" + "}\n\n" + "mat4 sample_palette(const in float idx) {\n" + "  float tt = float(uBoneTexDim) / 4.0;\n" + "  float dd = 1.0 / float(uBoneTexDim);\n" + "  float p0 = 0.5 * dd;\n" + "  float p1 = 1.0 * dd;\n" + "  float p2 = 2.5 * dd;\n" + "  float p3 = 3.5 * dd;\n" + "  float x = float(mod(idx, tt)) * dd * 4.0;\n" + "  float y = floor(float(idx / tt )) * dd;\n" + "  vec4 v0 = texture2D(uBonePalette, vec2(x + p0, y + p0));\n" + "  vec4 v1 = texture2D(uBonePalette, vec2(x + p1, y + p0));\n" + "  vec4 v2 = texture2D(uBonePalette, vec2(x + p2, y + p0));\n" + "  vec4 v3 = texture2D(uBonePalette, vec2(x + p3, y + p0));\n" + "  mat4 tm = mat4(v0,v1,v2,v3);\n" + "  return tm;\n" + "}\n#endif\n";

  UberShader.vertex += UberShader._bitcheck;

  UberShader.vertex += "void main() {\n";

  UberShader.vertex += "#ifdef VERTEX_COLOUR\nvColour = aVertexColour;\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_TEXTURE\nvTexCoord = aVertexTexCoord;\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_NORMAL\nvNormal = aVertexNormal;\nvTransformedNormal = vec4(uNormalMatrix * aVertexNormal,1.0);\n#endif\n";

  UberShader.vertex += "#ifdef VERTEX_TANGENT\nvTangent = aVertexTangent;\n#endif\n";

  UberShader.vertex += "vPosition = uModelMatrix * vec4(aVertexPosition, 1.0);\n";

  UberShader.vertex += "#ifdef SKINNING\n" + "if(bitcheck(uUber0,2)) {\n" + "  vPosition = vec4(0.0,0.0,0.0,1.0);\n" + "  float bias = aVertexSkinWeight.x;\n" + "  mat4 tm = sample_palette(aVertexBoneIndex.x);\n" + "  vec4 bp = tm * vec4(aVertexPosition,1.0) * bias;\n" + "  vPosition += bp;\n" + "  bias = aVertexSkinWeight.y;\n" + "  tm = sample_palette(aVertexBoneIndex.y);\n" + "  bp = tm * vec4(aVertexPosition,1.0) * bias;\n" + "  vPosition += bp;\n" + "  bias = aVertexSkinWeight.z;\n" + "  tm = sample_palette(aVertexBoneIndex.z);\n" + "  bp = tm * vec4(aVertexPosition,1.0) * bias;\n" + "  vPosition += bp;\n" + "  bias = aVertexSkinWeight.w;\n" + "  tm = sample_palette(aVertexBoneIndex.w);\n" + "  bp = tm * vec4(aVertexPosition,1.0) * bias;\n" + "  vPosition += bp;\n" + "  vPosition.w = 1.0;\n" + "  vPosition = uModelMatrix * vPosition;\n" + "}\n" + "\n#endif\n";

  UberShader.vertex += "#ifdef ADVANCED_CAMERA\n vEyePosition = uCameraInverseMatrix * uModelMatrix * vPosition;\n#endif\n";

  UberShader.vertex += "#ifdef BASIC_CAMERA\ngl_Position = uProjectionMatrix * uCameraMatrix * vPosition;\n#endif\n";

  UberShader.vertex += "\n}";

  UberShader.fragment = "uniform float uUber0;\n";

  UberShader.fragment += "uniform mat4 uModelMatrix;\nvarying vec4 vPosition;\n";

  UberShader.fragment += "#ifdef BASIC_COLOUR\nuniform vec4 uColour;\n#endif\n";

  UberShader.fragment += "#ifdef VERTEX_COLOUR\nvarying vec4 vColour;\n#endif\n";

  UberShader.fragment += "#ifdef VERTEX_TEXTURE\nvarying vec2 vTexCoord;\n#endif\n";

  UberShader.fragment += "#ifdef VERTEX_NORMAL\nuniform mat3 uNormalMatrix;\nvarying vec3 vNormal;\nvarying vec4 vTransformedNormal;\n#endif\n";

  UberShader.fragment += "#ifdef VERTEX_TANGENT\nvarying vec3 vTangent;\n#endif\n";

  UberShader.fragment += "#ifdef ADVANCED_CAMERA\nuniform float uCameraNear;\n" + "uniform float uCameraFar;\n " + "uniform mat4 uCameraInverseMatrix;\n " + "uniform mat4 uInverseProjectionMatrix;\n" + "varying vec4 vEyePosition;\n#endif\n";

  UberShader.fragment += PhongMaterial.fragment_head;

  UberShader.fragment += AmbientLight.fragment_head;

  UberShader.fragment += PointLight.fragment_head;

  UberShader.fragment += SpotLight.fragment_head;

  UberShader.fragment += TextureMaterial.fragment_head;

  UberShader.fragment += DepthMaterial.fragment_head;

  UberShader.fragment += "\n\n";

  UberShader.fragment += "#ifdef FRAGMENT_NOISE\n" + UberShader._noise + "\n#endif\n";

  UberShader.fragment += "#ifdef FRAGMENT_INTENSITY\n" + "float intensity(in vec4 colour) {\n" + "  return sqrt((colour.x*colour.x)+(colour.y*colour.y)+(colour.z*colour.z));\n" + "}\n#endif\n";

  UberShader.fragment += "#ifdef FRAGMENT_LUMINANCE\n" + "float getLuminance(in vec3 colour) {\n" + "  vec3 lumcoeff = vec3(0.299,0.587,0.114);\n" + "  return dot(colour, lumcoeff);\n}\n#endif\n";

  UberShader.fragment += "#ifdef FRAGMENT_TANGENT_FRAME\n " + UberShader._tangent_frame + "\n#endif\n";

  UberShader.fragment += "#ifdef FRAGMENT_SOBEL\n " + UberShader._sobel + "\n#endif\n";

  UberShader.fragment += UberShader._bitcheck;

  UberShader.fragment += "void main() {\n";

  UberShader.fragment += PhongMaterial.fragment_main;

  UberShader.fragment += TextureMaterial.fragment_main;

  UberShader.fragment += "#ifdef BASIC_COLOUR\nif(bitcheck(uUber0,8)) { gl_FragColor = uColour; }\n#endif\n";

  UberShader.fragment += "#ifdef VERTEX_COLOUR\nif(bitcheck(uUber0,9)) { gl_FragColor = vColour; }\n#endif\n";

  UberShader.fragment += "#ifdef FRAGMENT_DEPTH\nif(bitcheck(uUber0,5)) { gl_FragColor = packDepth(); }\n#endif\n";

  UberShader.fragment += "#ifdef FRAGMENT_DEPTH\nif(bitcheck(uUber0,6)) { float d = readDepth(vTexCoord);\ngl_FragColor = vec4(d,d,d,1.0); }\n#endif\n";

  UberShader.fragment += "\n}";

  UberShader.prototype._traverse = function(base_node) {
    var child, def, i, j, len, len1, ref1, ref2, results;
    if (base_node.material != null) {
      ref1 = base_node.material._uber_defines;
      for (i = 0, len = ref1.length; i < len; i++) {
        def = ref1[i];
        if (indexOf.call(this.uber_defines, def) < 0) {
          this.uber_defines.push(def);
        }
      }
    }
    if (base_node.camera != null) {
      if (indexOf.call(this.uber_defines, "BASIC_CAMERA") < 0) {
        this.uber_defines.push("BASIC_CAMERA");
      }
    }
    if (base_node.pointLights.length > 0) {
      if (indexOf.call(this.uber_defines, "LIGHTING_POINT") < 0) {
        this.uber_defines.push("LIGHTING_POINT");
      }
    }
    if (base_node.spotLights.length > 0) {
      if (indexOf.call(this.uber_defines, "LIGHTING_SPOT") < 0) {
        this.uber_defines.push("LIGHTING_SPOT");
      }
    }
    if (base_node.skeleton != null) {
      if (indexOf.call(this.uber_defines, "SKINNING") < 0) {
        this.uber_defines.push("SKINNING");
      }
    }
    ref2 = base_node.children;
    results = [];
    for (j = 0, len1 = ref2.length; j < len1; j++) {
      child = ref2[j];
      results.push(this._traverse(child));
    }
    return results;
  };

  function UberShader() {
    var base_node, def, def_string, i, j, k, len, len1, len2, ref1;
    this.uber_defines = [];
    for (i = 0, len = arguments.length; i < len; i++) {
      base_node = arguments[i];
      this._traverse(base_node);
    }
    def_string = "";
    ref1 = this.uber_defines;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      def = ref1[j];
      def_string += "#define " + def + "\n";
    }
    this.vertex = "#version 100\n" + "precision highp float;\nprecision highp int;\n" + def_string + UberShader.vertex;
    this.fragment = "#version 100\n" + "precision highp float;\nprecision highp int;\n" + def_string + UberShader.fragment;
    UberShader.__super__.constructor.call(this, this.vertex, this.fragment, void 0);
    this._uber = true;
    for (k = 0, len2 = arguments.length; k < len2; k++) {
      base_node = arguments[k];
      this._addToNode(base_node);
    }
  }

  return UberShader;

})(Shader);

module.exports = {
  UberShader: UberShader
};



},{"../light/light":24,"../material/basic":25,"../material/depth":26,"../material/phong":28,"./shader":13}],16:[function(require,module,exports){
var uber_clear_material, uber_depth_read, uber_depth_set, uber_lighting_point, uber_lighting_spot, uber_phong_diff_tex, uber_phong_emis_tex, uber_phong_mat, uber_phong_spec_tex, uber_texture_mat, uber_uniform_colour, uber_vertex_camera, uber_vertex_colour, uber_vertex_flat, uber_vertex_skinning;

({

  /* ABOUT
               .__   
  _________  __|  |  
  \____ \  \/  /  |  
  |  |_> >    <|  |__
  |   __/__/\_ \____/
  |__|        \/     js
  
                      PXL.js
                      Benjamin Blundell - ben@pxljs.com
                      http://pxljs.com
  
  This software is released under the MIT Licence. See LICENCE.txt for details
  
  This file holds the values for our ubershader and some useful functions for setting
  the uniform uUber0 that sets the path through the uber shader
  
  At some point these functions will be replace by bit operations (WebGL 3?) or removed
  and uniforms and roles will be set per material
   */
  uber_path_map: {
    vertex_flat: 0,
    vertex_camera: 1,
    vertex_skinning: 2,
    lighting_point: 3,
    texture_mat: 4,
    depth_set: 5,
    depth_read: 6,
    lighting_spot: 7,
    uniform_colour: 8,
    vertex_colour: 9,
    phong_diff_tex: 10,
    phong_spec_tex: 11,
    phong_emis_tex: 12,
    phong_mat: 13
  }
});

uber_clear_material = function(ubervar) {
  return ubervar & ~0x3F00;
};

uber_vertex_flat = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x1;
  }
  return ubervar & ~0x1;
};

uber_vertex_camera = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x2;
  }
  return ubervar & ~0x2;
};

uber_vertex_skinning = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x4;
  }
  return ubervar & ~0x4;
};

uber_texture_mat = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x16;
  }
  return ubervar & ~0x16;
};

uber_depth_set = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x20;
  }
  return ubervar & ~0x20;
};

uber_depth_read = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x40;
  }
  return ubervar & ~0x40;
};

uber_lighting_spot = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x60;
  }
  return ubervar & ~0x60;
};

uber_lighting_point = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x8;
  }
  return ubervar & ~0x8;
};

uber_uniform_colour = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x100;
  }
  return ubervar & ~0x100;
};

uber_vertex_colour = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x200;
  }
  return ubervar & ~0x200;
};

uber_phong_diff_tex = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x400;
  }
  return ubervar & ~0x400;
};

uber_phong_spec_tex = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x800;
  }
  return ubervar & ~0x800;
};

uber_phong_emis_tex = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x1000;
  }
  return ubervar & ~0x1000;
};

uber_phong_mat = function(tf, ubervar) {
  if (tf) {
    return ubervar | 0x2000;
  }
  return ubervar & ~0x2000;
};

module.exports = {
  uber_clear_material: uber_clear_material,
  uber_vertex_flat: uber_vertex_flat,
  uber_vertex_camera: uber_vertex_camera,
  uber_vertex_skinning: uber_vertex_skinning,
  uber_lighting_point: uber_lighting_point,
  uber_uniform_colour: uber_uniform_colour,
  uber_vertex_colour: uber_vertex_colour,
  uber_phong_diff_tex: uber_phong_diff_tex,
  uber_phong_spec_tex: uber_phong_spec_tex,
  uber_phong_emis_tex: uber_phong_emis_tex,
  uber_phong_mat: uber_phong_mat,
  uber_texture_mat: uber_texture_mat,
  uber_depth_set: uber_depth_set,
  uber_depth_read: uber_depth_read,
  uber_lighting_spot: uber_lighting_spot
};



},{}],17:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


The WebGL End of our basic primitives. Here we match our classes to the WebGL Shaders 
and buffers

 - TODO
  * We are creating Float32Arrays on the fly. Fine, but we should possibly
    hold onto these buffers and index into them, replacing geometry memory? I.e
    each vertex data bit points to its position in the Float32Array? Could be expensive
    Shapes or trimeshes could in fact do that I think.
  * Geometry may or may not have more buffers (should we wish to add them)
  * Do we put in face duplication here? I.e, if we want to pass in per face details
    we need to change the buffers
  * It appears that bufferSubData isnt the thing to use but is this true? (for updateing)
  * Geometry that has changed totally? Delete and redo buffers is needed
  * Per Face Brew method - I.e duplicate vertices if there is per-face data specified in
    the brew parameters
 */
var CacheVar, Contract, Geometry, GeometryBrewer, Matrix4, PXLError, PXLWarning, PXLWarningOnce, Quad, RGB, RGBA, Triangle, Vec2, Vec3, Vertex, _attribTypeCheckSet, _joinContracts, _uniformTypeCheckSet, bufferSubData, createArrayBuffer, createElementBuffer, deleteBuffer, matchWithShader, rebrew_typed, ref, ref1, ref2, ref3, setDataBuffer, util;

ref = require('../math/math'), Matrix4 = ref.Matrix4, Vec3 = ref.Vec3, Vec2 = ref.Vec2;

ref1 = require('../colour/colour'), RGB = ref1.RGB, RGBA = ref1.RGBA;

ref2 = require('../geometry/primitive'), Geometry = ref2.Geometry, Vertex = ref2.Vertex, Triangle = ref2.Triangle, Quad = ref2.Quad;

ref3 = require('../util/log'), PXLWarning = ref3.PXLWarning, PXLWarningOnce = ref3.PXLWarningOnce, PXLError = ref3.PXLError;

Contract = require('../gl/contract').Contract;

CacheVar = require('../util/cache_var').CacheVar;

util = require("../util/util");


/* GeometryBrewer */

GeometryBrewer = {};


/* setDataBuffer */

setDataBuffer = function(buffer, data, type) {
  var gl;
  gl = PXL.Context.gl;
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, type);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  return buffer;
};


/* createArrayBuffer */

createArrayBuffer = function(data, type, size) {
  var buffer, gl;
  gl = PXL.Context.gl;
  buffer = gl.createBuffer();
  setDataBuffer(buffer, data, type);
  buffer.itemSize = size;
  buffer.numItems = data.length / size;
  return buffer;
};


/* updateBuffer */

bufferSubData = function(buffer, data, offset) {
  var gl;
  gl = PXL.Context.gl;
  if (offset == null) {
    offset = 0;
  }
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  return buffer;
};


/* createElementBuffer */

createElementBuffer = function(data, type, size) {
  var buffer, gl;
  gl = PXL.Context.gl;
  buffer = gl.createBuffer();
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, type);
  buffer.itemSize = size;
  buffer.numItems = data.length;
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  return buffer;
};


/* deleteBuffer */

deleteBuffer = function(buffer) {
  var gl;
  gl = PXL.Context.gl;
  gl.deleteBuffer(buffer);
  return this;
};


/* _attribTypeCheckSet */

_attribTypeCheckSet = function(a, v) {
  var gl;
  gl = PXL.Context.gl;
  if (a.pos === -1) {
    return;
  }
  gl.bindBuffer(gl.ARRAY_BUFFER, v);
  if (a.type === GL.LOW_INT || a.type === GL.MEDIUM_INT || a.type === GL.HIGH_INT || a.type === GL.INT) {
    gl.vertexAttribPointer(a.pos, 1, gl.INT, false, 0, 0);
  } else if (a.type === GL.LOW_FLOAT || a.type === GL.MEDIUM_FLOAT || a.type === GL.HIGH_FLOAT || a.type === GL.FLOAT) {
    gl.vertexAttribPointer(a.pos, 1, gl.FLOAT, false, 0, 0);
  } else if (a.type === GL.FLOAT_VEC2) {
    gl.vertexAttribPointer(a.pos, 2, gl.FLOAT, false, 0, 0);
  } else if (a.type === GL.FLOAT_VEC3) {
    gl.vertexAttribPointer(a.pos, 3, gl.FLOAT, false, 0, 0);
  } else if (a.type === GL.FLOAT_VEC4) {
    gl.vertexAttribPointer(a.pos, 4, gl.FLOAT, false, 0, 0);
  }
  gl.enableVertexAttribArray(a.pos);
  return this;
};


/* _uniformTypeCheckSet */

_uniformTypeCheckSet = function(u, v) {
  var gl, i, len, t, x;
  if (u.pos === -1) {
    return;
  }
  gl = PXL.Context.gl;
  if (u.size === 1) {
    if (u.type === GL.LOW_FLOAT || u.type === GL.MEDIUM_FLOAT || u.type === GL.HIGH_FLOAT || u.type === GL.FLOAT) {
      gl.uniform1f(u.pos, v);
    } else if (u.type === GL.LOW_INT || u.type === GL.MEDIUM_INT || u.type === GL.HIGH_INT || u.type === GL.INT) {
      gl.uniform1i(u.pos, v);
    } else if (u.type === GL.FLOAT_VEC2) {
      gl.uniform2f(u.pos, v.x, v.y);
    } else if (u.type === GL.FLOAT_VEC3) {
      if (v.x != null) {
        gl.uniform3f(u.pos, v.x, v.y, v.z);
      } else {
        gl.uniform3f(u.pos, v.r, v.g, v.b);
      }
    } else if (u.type === GL.FLOAT_VEC4) {
      if (v.x != null) {
        gl.uniform4f(u.pos, v.x, v.y, v.z, v.w);
      } else {
        gl.uniform4f(u.pos, v.r, v.g, v.b, v.a);
      }
    } else if (u.type === GL.FLOAT_MAT4) {
      gl.uniformMatrix4fv(u.pos, false, v.a);
    } else if (u.type === GL.FLOAT_MAT3) {
      gl.uniformMatrix3fv(u.pos, false, v.a);
    } else if (u.type === GL.SAMPLER_2D) {
      gl.uniform1i(u.pos, v);
    }
  } else {
    if (v instanceof Array) {
      if (v[0] instanceof Object) {
        t = [];
        if (v[0].flatten != null) {
          for (i = 0, len = v.length; i < len; i++) {
            x = v[i];
            t = t.concat(x.flatten());
          }
          if (u.type === GL.FLOAT_VEC2) {
            gl.uniform2fv(u.pos, new Float32Array(t));
          } else if (u.type === GL.FLOAT_VEC3) {
            gl.uniform3fv(u.pos, new Float32Array(t));
          } else if (u.type === GL.FLOAT_VEC4) {
            gl.uniform4fv(u.pos, new Float32Array(t));
          } else if (u.type === GL.FLOAT_MAT3) {
            gl.uniformMatrix3fv(u.pos, false, new Float32Array(t));
          } else if (u.type === GL.FLOAT_MAT4) {
            gl.uniformMatrix4fv(u.pos, false, new Float32Array(t));
          }
        } else {
          PXLWarningOnce("Cant set uniform " + u.name + " - no flatten() function");
        }
      } else {
        if (u.type === GL.LOW_FLOAT || u.type === GL.MEDIUM_FLOAT || u.type === GL.HIGH_FLOAT || u.type === GL.FLOAT) {
          gl.uniform1fv(u.pos, new Float32Array(v));
        } else if (u.type === GL.LOW_INT || u.type === GL.MEDIUM_INT || u.type === GL.HIGH_INT || u.type === GL.INT) {
          gl.uniform1iv(u.pos, new Int32Array(v));
        } else if (u.type === GL.FLOAT_VEC2) {
          gl.uniform2fv(u.pos, new Float32Array(v));
        } else if (u.type === GL.FLOAT_VEC3) {
          gl.uniform3fv(u.pos, new Float32Array(v));
        } else if (u.type === GL.FLOAT_VEC4) {
          gl.uniform4fv(u.pos, new Float32Array(v));
        } else if (u.type === GL.FLOAT_MAT3) {
          gl.uniformMatrix3fv(u.pos, false, new Float32Array(v));
        } else if (u.type === GL.FLOAT_MAT4) {
          gl.uniformMatrix4fv(u.pos, false, new Float32Array(v));
        }
      }
    } else if (v instanceof Float32Array) {
      if (u.type === GL.LOW_FLOAT || u.type === GL.MEDIUM_FLOAT || u.type === GL.HIGH_FLOAT || u.type === GL.FLOAT) {
        gl.uniform1fv(u.pos, v);
      } else if (u.type === GL.FLOAT_VEC2) {
        gl.uniform2fv(u.pos, v);
      } else if (u.type === GL.FLOAT_VEC3) {
        gl.uniform3fv(u.pos, v);
      } else if (u.type === GL.FLOAT_VEC4) {
        gl.uniform4fv(u.pos, v);
      } else if (u.type === GL.FLOAT_MAT3) {
        gl.uniformMatrix3fv(u.pos, false, v);
      } else if (u.type === GL.FLOAT_MAT4) {
        gl.uniformMatrix4fv(u.pos, false, v);
      }
    } else if (v instanceof Int32Array) {
      if (u.type === GL.LOW_INT || u.type === GL.MEDIUM_INT || u.type === GL.HIGH_INT || u.type === GL.INT) {
        gl.uniform1iv(u.pos, v);
      }
    }
  }
  return this;
};


/* _joinContracts */

_joinContracts = function(obj, shader_contract) {
  var i, item, len, prop, ref4;
  if (obj.contract != null) {
    Contract.join(shader_contract, obj);
  }
  for (prop in obj) {
    if (prop === "children" || prop === "faces" || prop === "indices" || prop === "vertices" || prop === "normals" || prop === "texcoords") {
      continue;
    }
    if ((obj[prop] != null) && typeof obj[prop] === "object") {
      if (obj[prop].contract != null) {
        _joinContracts(obj[prop], shader_contract);
      } else if (obj[prop] instanceof Array) {
        ref4 = obj[prop];
        for (i = 0, len = ref4.length; i < len; i++) {
          item = ref4[i];
          if (typeof item === "object") {
            _joinContracts(item, shader_contract);
          }
        }
      }
    }
  }
  return obj;
};


/* matchWithShader */

matchWithShader = function(obj) {
  var a, i, j, len, len1, ref4, ref5, shader, shader_contract, u;
  if (PXL.Context.shader == null) {
    PXLError("No Shader bound when calling matchWithShader");
    return obj;
  }
  if (PXL.Context.shader.contract == null) {
    PXLError("No Shader contract when calling matchWithShader");
    return obj;
  }
  shader_contract = PXL.Context.shader.contract;
  shader = PXL.Context.shader;
  _joinContracts(obj, shader_contract);
  ref4 = shader_contract.uniforms;
  for (i = 0, len = ref4.length; i < len; i++) {
    u = ref4[i];
    if (shader_contract.matches[u.name] != null) {
      _uniformTypeCheckSet(u, shader_contract.matches[u.name]);
    }
  }
  ref5 = shader_contract.attributes;
  for (j = 0, len1 = ref5.length; j < len1; j++) {
    a = ref5[j];
    if (shader_contract.matches[a.name] != null) {
      _attribTypeCheckSet(a, shader_contract.matches[a.name]);
    }
  }
  return obj;
};


/* GeometryBrewer.brew */

GeometryBrewer.brew = function(params) {
  var access, datatype, gl, key, minorBrew, name, role_name, size, vert;
  if (!this.flat && ((this.vertices == null) || this.vertices.length <= 0)) {
    this.brewed = false;
    return this;
  }
  gl = PXL.Context.gl;
  if (params == null) {
    params = {};
  }
  minorBrew = (function(_this) {
    return function(flat, name, gattr, pattr, size) {
      var access, i, len, new_verts, ref4, v;
      access = params[pattr] != null ? params[pattr] : gl.STATIC_DRAW;
      if (flat) {
        if (_this[name] == null) {
          return _this[name] = createArrayBuffer(_this[gattr], access, size);
        } else {
          if (_this[gattr].length === _this[name].numItems) {
            return setDataBuffer(_this[name], _this[gattr], access);
          } else {
            return PXLWarningOnce("Attemping to update position buffer of different length");
          }
        }
      } else {
        new_verts = [];
        ref4 = _this.vertices;
        for (i = 0, len = ref4.length; i < len; i++) {
          v = ref4[i];
          new_verts = new_verts.concat(v[gattr].flatten());
        }
        if (_this[name] == null) {
          return _this[name] = createArrayBuffer(new Float32Array(new_verts), access, size);
        } else {
          if (_this.vertices.length === _this[name].numItems) {
            return setDataBuffer(_this[name], new Float32Array(new_verts), access);
          } else {
            return PXLWarningOnce("Attemping to update position buffer of different length");
          }
        }
      }
    };
  })(this);
  if (this.flat) {
    for (key in this.contract.roles) {
      name = this.contract.roles[key];
      if (this[name] instanceof Float32Array) {
        minorBrew(true, "vertex" + key + "Buffer", key, key + "_buffer_access", this._flat_sizes[name]);
      }
    }
  } else {
    for (key in this.vertices[0]) {
      role_name = "vertex" + key + "Buffer";
      if (this.contract.hasRoleValue(role_name) && key !== void 0) {
        vert = this.vertices[0];
        datatype = vert[key];
        size = datatype.DIM;
        minorBrew(false, role_name, key, key + "_buffer_access", size);
      }
    }
  }
  access = params.indices_buffer_access != null ? params.indices_buffer_access : gl.STATIC_DRAW;
  if (this.indexed) {
    if (this.vertexIndexBuffer == null) {
      this.vertexIndexBuffer = createElementBuffer(new Uint16Array(this.indices), access, 1);
    } else {
      if (this.indices.length === this.vertexIndexBuffer.numItems) {
        setDataBuffer(this.vertexIndexBuffer, new Float32Array(this.indices), access);
      } else {
        PXLWarningOnce("Attemping to update indices buffer of different length");
      }
    }
  }
  this.brewed = true;
  return this;
};


/* GeometryBrewer.rebrew */

GeometryBrewer.rebrew = function(params) {
  var gl, i, items, key, len, name, ref4, v;
  if (params == null) {
    return this;
  }
  if (this.brewed === false) {
    return this;
  }
  gl = PXL.Context.gl;
  for (key in params) {
    if (this.flat) {
      name = "vertex" + key + "Buffer";
      if (this[name] != null) {
        bufferSubData(this[name], this[key], params[key]);
      }
    } else {
      items = [];
      ref4 = this.vertices;
      for (i = 0, len = ref4.length; i < len; i++) {
        v = ref4[i];
        items = items.concat(v[key].flatten());
      }
      name = "vertex" + key + "Buffer";
      if (this[name] != null) {
        bufferData(this[name], new Float32Array(items), params[key]);
      }
    }
  }
  return this;
};


/* rebrew_typed */

rebrew_typed = (function(_this) {
  return function(geometry, params) {
    var gl;
    if (params == null) {
      return _this;
    }
    if (_this.brewed === false) {
      return _this;
    }
    gl = PXL.Context.gl;
    if (params.colour_buffer != null) {
      if (geometry.vertexColourBuffer != null) {
        bufferSubData(geometry.vertexColourBuffer, params.colour_buffer.data, params.colour_buffer.offset);
      }
    }
    if (params.position_buffer != null) {
      if (geometry.vertexPositionBuffer != null) {
        bufferSubData(geometry.vertexPositionBuffer, params.position_buffer.data, params.position_buffer.offset);
      }
    }
    if (params.normal_buffer != null) {
      if (geometry.vertexNormalBuffer != null) {
        bufferSubData(geometry.vertexNormalBuffer, params.normal_buffer.data, params.normal_buffer.offset);
      }
    }
    if (params.texcoord_buffer != null) {
      if (geometry.vertexTextureBuffer != null) {
        bufferSubData(geometry.vertexTextureBuffer, params.texcoord_buffer.data, params.texcoord_buffer.offset);
      }
    }
    if (params.tangent_buffer != null) {
      if (geometry.vertexTangentBuffer != null) {
        bufferSubData(geometry.vertexTangentBuffer, params.tangent_buffer.data, params.tangent_buffer.offset);
      }
    }
    return _this;
  };
})(this);

GeometryBrewer.drawGL = function() {
  var gl;
  gl = PXL.Context.gl;
  if ((this.vertexIndexBuffer != null) && this.indexed) {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);
    gl.drawElements(this.layout, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  } else {
    gl.drawArrays(this.layout, 0, this.vertexpBuffer.numItems);
  }
  return this;
};

GeometryBrewer.washup = function() {
  var key, results;
  results = [];
  for (key in this) {
    if (this[key] instanceof WebGLBuffer) {
      results.push(deleteBuffer(this[key]));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

module.exports = {
  rebrew_typed: rebrew_typed,
  GeometryBrewer: GeometryBrewer,
  matchWithShader: matchWithShader
};



},{"../colour/colour":4,"../geometry/primitive":9,"../gl/contract":11,"../math/math":30,"../util/cache_var":33,"../util/log":35,"../util/util":42}],18:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

The MD5 Model format written by ID Software for Doom3

http://www.3dgep.com/loading-and-animating-md5-models-with-opengl
 */
var BasicColourMaterial, Bone, MD5Model, Matrix3, Matrix4, Node, PXLError, PXLLog, PXLWarning, PhongMaterial, Promise, Quaternion, RGB, RGBA, Request, Skeleton, Skin, SkinIndex, SkinWeight, Triangle, TriangleMesh, Vec2, Vec3, Vec4, Vertex, ref, ref1, ref2, ref3, ref4,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../util/log'), PXLWarning = ref.PXLWarning, PXLError = ref.PXLError, PXLLog = ref.PXLLog;

ref1 = require('../geometry/primitive'), TriangleMesh = ref1.TriangleMesh, Triangle = ref1.Triangle, Vertex = ref1.Vertex;

ref2 = require('../math/math'), Vec4 = ref2.Vec4, Vec3 = ref2.Vec3, Vec2 = ref2.Vec2, Quaternion = ref2.Quaternion, Matrix4 = ref2.Matrix4, Matrix3 = ref2.Matrix3;

Node = require('../core/node').Node;

ref3 = require('../colour/colour'), RGB = ref3.RGB, RGBA = ref3.RGBA;

Promise = require('../util/promise').Promise;

Request = require('../util/request').Request;

PhongMaterial = require('../material/phong').PhongMaterial;

BasicColourMaterial = require('../material/basic').BasicColourMaterial;

ref4 = require('../animation/skeleton'), Skeleton = ref4.Skeleton, Bone = ref4.Bone, Skin = ref4.Skin, SkinWeight = ref4.SkinWeight, SkinIndex = ref4.SkinIndex;


/*MD5 */

MD5Model = (function(superClass) {
  extend(MD5Model, superClass);

  function MD5Model(url1, promise, params) {
    var load_data_promise, onerror, promise_data, promise_main, promise_textures, r;
    this.url = url1;
    this.promise = promise;
    this.params = params;
    MD5Model.__super__.constructor.call(this);
    this.version = "";
    this.num_joints = "";
    this.num_meshes = "";
    this.add(new Skeleton());
    promise_textures = new Promise();
    promise_data = new Promise();
    promise_main = new Promise();
    promise_main.when(promise_data).then((function(_this) {
      return function() {
        return _this.promise.resolve();
      };
    })(this));
    promise_textures.then((function(_this) {
      return function(text_data) {
        _this._parse_data(text_data);
        return promise_data.resolve();
      };
    })(this));
    load_data_promise = (function(_this) {
      return function() {
        var r;
        r = new Request(_this.url);
        return r.get(function(data) {
          return _this._parse_materials(data, promise_textures);
        });
      };
    })(this);
    if (this.promise != null) {
      load_data_promise();
    } else {
      onerror = (function(_this) {
        return function(result) {
          return PXLError("Loading Model: " + url + " " + result);
        };
      })(this);
      r = new Request(this.url);
      r.get((function(_this) {
        return function(data) {
          _this._parse_materials_sync(data);
          return _this._parse_data(data);
        };
      })(this), onerror, true);
    }
    this;
  }

  MD5Model.prototype._computeW = function(r0, r1, r2) {
    var t;
    t = 1.0 - (r0 * r0) - (r1 * r1) - (r2 * r2);
    if (t < 0.0) {
      return 0.0;
    }
    t = -Math.sqrt(t);
    return t;
  };

  MD5Model.prototype._parse_materials_sync = function(text_data) {
    return this;
  };

  MD5Model.prototype._parse_materials = function(text_data, promise_textures) {
    var _material_promises, base_path, firstquote, k, lastquote, line, lines, material_path, material_url, midx, onerror_closure, onsuccess_closure, p, promise_materials, ref5;
    lines = text_data.split("\n");
    midx = 0;
    base_path = this.url.slice(0, +(this.url.lastIndexOf("/") - 1) + 1 || 9e9);
    _material_promises = [];
    this._material_by_name = {};
    for (midx = k = 0, ref5 = lines.length - 1; 0 <= ref5 ? k <= ref5 : k >= ref5; midx = 0 <= ref5 ? ++k : --k) {
      line = lines[midx];
      if (line.indexOf("shader") !== -1) {
        lastquote = line.lastIndexOf('"');
        firstquote = line.indexOf('"');
        material_path = line.slice(firstquote + 1, +(lastquote - 1) + 1 || 9e9);
        material_url = base_path + "/" + material_path.slice(material_path.lastIndexOf("/") + 1) + ".png";
        p = new Promise();
        _material_promises.push(p);
        onsuccess_closure = (function(_this) {
          return function() {
            var _material_path, _p;
            _p = p;
            _material_path = material_path;
            return function(_texture) {
              var spec, wh;
              if (PXL.Context.debug) {
                PXLLog("MD5Model Loaded a Texture: " + _material_path);
              }
              wh = new RGB.WHITE();
              spec = new RGB.BLACK();
              _this._material_by_name[_material_path] = new PhongMaterial(wh, _texture, spec);
              return _p.resolve();
            };
          };
        })(this);
        onerror_closure = (function(_this) {
          return function() {
            var _material_path, _p;
            _p = p;
            _material_path = material_path;
            return function(msg) {
              var wh;
              if (PXL.Context.debug) {
                PXLLog("MD5Model Failed to load a Texture: " + _material_path);
              }
              wh = new PXL.Colour.RGB(1.0, 0.0, 0.0);
              _this._material_by_name[_material_path] = new BasicColourMaterial(wh);
              return _p.resolve();
            };
          };
        })(this);
        PXL.GL.textureFromURL(material_url, onsuccess_closure(), onerror_closure());
      }
    }
    promise_materials = new Promise();
    promise_materials.when.apply(promise_materials, _material_promises).then((function(_this) {
      return function() {
        return promise_textures.resolve(text_data);
      };
    })(this));
    return this;
  };

  MD5Model.prototype._parse_data = function(text_data) {
    var _compare_weight, a, aa, actual_weights, b, bias, bone, bone_id, bp, c, closebrace, count, current_mesh, current_node, current_skin, i, idx, j, jidx, jline, k, l, lastquote, len, len1, len2, line, lines, m, material_path, midx, n, name, num_tris, num_verts, num_weights, o, openbrace, p0, p1, p2, parent, parent_idx, pos, position, q, r0, r1, r2, ref10, ref11, ref12, ref13, ref5, ref6, ref7, ref8, ref9, rotation, s, si, skinweight, temp_vert_struct, temp_verts, temp_weights, ti, tidx, tline, tokens, total, tri, triangle, tw, u, v, vertex, vidx, w, widx, ws, x, y, z;
    lines = text_data.split("\n");
    midx = 0;
    while (midx < lines.length) {
      line = lines[midx];
      if (line.slice(0, 10) === "MD5Version") {
        this.version = line.slice(11);
      }
      if (line.slice(0, 9) === "numJoints") {
        this.num_joints = parseInt(line.slice(10));
      }
      if (line.slice(0, 9) === "numMeshes") {
        this.num_meshes === parseInt(line.slice(10));
      }
      if (line.slice(0, 8) === "joints {") {
        for (jidx = k = 0, ref5 = this.num_joints - 1; 0 <= ref5 ? k <= ref5 : k >= ref5; jidx = 0 <= ref5 ? ++k : --k) {
          jline = lines[midx + jidx + 1];
          lastquote = jline.lastIndexOf('"');
          name = jline.slice(jline.indexOf('"') + 1, +(lastquote - 1) + 1 || 9e9);
          openbrace = jline.indexOf('(');
          closebrace = jline.indexOf(')');
          parent_idx = parseInt(jline.slice(lastquote + 1, +(openbrace - 1) + 1 || 9e9));
          parent = void 0;
          if (parent_idx > -1) {
            parent = this.skeleton.getBone(parent_idx);
          }
          tokens = jline.slice(openbrace, +closebrace + 1 || 9e9).split(" ");
          p0 = parseFloat(tokens[1]);
          p1 = parseFloat(tokens[2]);
          p2 = parseFloat(tokens[3]);
          position = new Vec3(p0, p1, p2);
          openbrace = jline.lastIndexOf('(');
          closebrace = jline.lastIndexOf(')');
          tokens = jline.slice(openbrace, +closebrace + 1 || 9e9).split(" ");
          r0 = parseFloat(tokens[1]);
          r1 = parseFloat(tokens[2]);
          r2 = parseFloat(tokens[3]);
          rotation = new Quaternion(r0, r1, r2, this._computeW(r0, r1, r2));
          rotation.normalize();
          bone = new Bone(name, jidx, parent, rotation, position);
          this.skeleton.addBone(bone);
        }
        midx += this.num_joints;
      }
      if (line.slice(0, 6) === "mesh {") {
        tline = lines[midx];
        while (tline.indexOf("shader") === -1) {
          midx += 1;
          tline = lines[midx];
        }
        material_path = tline.slice(tline.indexOf('"') + 1, +(tline.lastIndexOf('"') - 1) + 1 || 9e9);
        while (tline.indexOf("numverts") === -1) {
          midx += 1;
          tline = lines[midx];
        }
        num_verts = parseInt(tline.slice(tline.indexOf("numverts") + 8));
        current_mesh = new TriangleMesh(true);
        current_node = new Node(current_mesh);
        if (this._material_by_name != null) {
          current_node.material = this._material_by_name[material_path];
        }
        this.add(current_node);
        temp_verts = [];
        for (vidx = l = 0, ref6 = num_verts - 1; 0 <= ref6 ? l <= ref6 : l >= ref6; vidx = 0 <= ref6 ? ++l : --l) {
          tline = lines[midx + vidx + 1];
          openbrace = tline.indexOf("(");
          closebrace = tline.indexOf(")");
          idx = parseInt(tline.slice(tline.indexOf("vert") + 1, +(openbrace - 1) + 1 || 9e9));
          tokens = tline.slice(openbrace, +closebrace + 1 || 9e9).split(" ");
          u = parseFloat(tokens[1]);
          v = parseFloat(tokens[2]);
          tokens = tline.slice(closebrace).split(" ");
          idx = parseInt(tokens[1]);
          count = parseInt(tokens[2]);
          temp_vert_struct = {
            u: new Vec2(u, v),
            i: idx,
            c: count
          };
          temp_verts.push(temp_vert_struct);
        }
        midx += num_verts;
        tline = lines[midx];
        while (tline.indexOf("numtris") === -1) {
          midx += 1;
          tline = lines[midx];
        }
        num_tris = parseInt(tline.slice(tline.indexOf("numtris") + 7));
        for (i = m = 0, ref7 = (num_tris * 3) - 1; 0 <= ref7 ? m <= ref7 : m >= ref7; i = 0 <= ref7 ? ++m : --m) {
          current_mesh.addIndex(0);
        }
        tidx = 0;
        for (tidx = n = 0, ref8 = num_tris - 1; 0 <= ref8 ? n <= ref8 : n >= ref8; tidx = 0 <= ref8 ? ++n : --n) {
          tline = lines[midx + tidx + 1];
          tri = tline.indexOf("tri");
          tokens = tline.slice(tri).split(" ");
          idx = parseInt(tokens[1]);
          a = parseInt(tokens[2]);
          b = parseInt(tokens[3]);
          c = parseInt(tokens[4]);
          current_mesh.setIndex(idx * 3, c);
          current_mesh.setIndex(idx * 3 + 1, b);
          current_mesh.setIndex(idx * 3 + 2, a);
        }
        midx += num_tris;
        tline = lines[midx];
        while (tline.indexOf("numweights") === -1) {
          midx += 1;
          tline = lines[midx];
        }
        num_weights = parseInt(tline.slice(tline.indexOf("numweights") + 10));
        temp_weights = [];
        current_skin = new Skin();
        for (widx = o = 0, ref9 = num_weights - 1; 0 <= ref9 ? o <= ref9 : o >= ref9; widx = 0 <= ref9 ? ++o : --o) {
          tline = lines[midx + widx + 1];
          ws = tline.indexOf("weight");
          openbrace = tline.indexOf("(");
          closebrace = tline.indexOf(")");
          tokens = tline.slice(ws, +openbrace + 1 || 9e9).split(" ");
          idx = parseInt(tokens[1]);
          bone_id = parseInt(tokens[2]);
          bias = parseFloat(tokens[3]);
          skinweight = new SkinWeight(this.skeleton.getBone(bone_id), bias);
          current_skin.addWeight(skinweight);
          tokens = tline.slice(openbrace, +closebrace + 1 || 9e9).split(" ");
          p0 = parseFloat(tokens[1]);
          p1 = parseFloat(tokens[2]);
          p2 = parseFloat(tokens[3]);
          temp_weights.push({
            position: new Vec3(p0, p1, p2),
            bias: bias,
            bone: bone_id
          });
        }
        midx += num_weights;
        for (i = q = 0, ref10 = num_verts - 1; 0 <= ref10 ? q <= ref10 : q >= ref10; i = 0 <= ref10 ? ++q : --q) {
          si = new SkinIndex(temp_verts[i].i, temp_verts[i].c);
          current_skin.addIndex(si);
          pos = new Vec3(0, 0, 0);
          actual_weights = [];
          for (j = s = 0, ref11 = si.count - 1; 0 <= ref11 ? s <= ref11 : s >= ref11; j = 0 <= ref11 ? ++s : --s) {
            actual_weights.push(temp_weights[si.index + j]);
          }
          _compare_weight = function(a, b) {
            return a.bias < b.bias;
          };
          actual_weights.sort(_compare_weight);
          if (actual_weights.length > Skeleton.PXL_MAX_WEIGHTS) {
            actual_weights.splice(Skeleton.PXL_MAX_WEIGHTS - 1, actual_weights.length - 1);
          }
          total = 0;
          for (x = 0, len = actual_weights.length; x < len; x++) {
            w = actual_weights[x];
            total += w.bias;
          }
          total = 1.0 / total;
          for (y = 0, len1 = actual_weights.length; y < len1; y++) {
            w = actual_weights[y];
            w.bias = w.bias * total;
          }
          tw = [];
          ti = [];
          for (j = z = 0, ref12 = Skeleton.PXL_MAX_WEIGHTS - 1; 0 <= ref12 ? z <= ref12 : z >= ref12; j = 0 <= ref12 ? ++z : --z) {
            if (j < actual_weights.length) {
              w = actual_weights[j];
              tw.push(w.bias);
              ti.push(w.bone);
              bp = w.position.clone();
              Quaternion.invert(this.skeleton.getBone(w.bone).rotation_pose).transVec3(bp);
              bp.add(this.skeleton.getBone(w.bone).position_pose);
              bp.multScalar(w.bias);
              pos.add(bp);
            } else {
              tw.push(0);
              ti.push(0);
            }
          }
          vertex = new Vertex({
            p: pos,
            t: temp_verts[i].u.clone(),
            w: new Vec4(tw[0], tw[1], tw[2], tw[3]),
            i: new Vec4(ti[0], ti[1], ti[2], ti[3]),
            n: new Vec3(0, 0, 0)
          });
          current_mesh.addVertex(vertex);
        }
        j = 0;
        while (j < current_mesh.indices.length) {
          p0 = current_mesh.vertices[current_mesh.indices[j]];
          p1 = current_mesh.vertices[current_mesh.indices[j + 1]];
          p2 = current_mesh.vertices[current_mesh.indices[j + 2]];
          triangle = new Triangle(p0, p1, p2);
          triangle.computeFaceNormal();
          p0.n.add(triangle.n);
          p1.n.add(triangle.n);
          p2.n.add(triangle.n);
          current_mesh.faces.push(triangle);
          j += 3;
        }
        ref13 = current_mesh.vertices;
        for (aa = 0, len2 = ref13.length; aa < len2; aa++) {
          vertex = ref13[aa];
          vertex.n.normalize();
        }
        current_node.add(current_skin);
      }
      midx += 1;
    }
    if (this._material_by_name != null) {
      this._material_by_name = void 0;
    }
    return this;
  };

  return MD5Model;

})(Node);

module.exports = {
  MD5Model: MD5Model
};



},{"../animation/skeleton":2,"../colour/colour":4,"../core/node":6,"../geometry/primitive":9,"../material/basic":25,"../material/phong":28,"../math/math":30,"../util/log":35,"../util/promise":38,"../util/request":40}],19:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


- A class to import OBJ files

- TODO
  - We are passing in a queue here and this class modifies it
    - Do we want that, or should this class implement an interface of some kind? Not sure

- Potentially

// Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
  // Great success! All the File APIs are supported.
} else {
  alert('The File APIs are not fully supported in this browser.');
}
 */
var BasicColourMaterial, Node, OBJModel, PXLError, PXLLog, PXLWarning, PhongMaterial, Promise, RGB, Request, Triangle, TriangleMesh, Vec2, Vec3, Vertex, ref, ref1, ref2,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../util/log'), PXLWarning = ref.PXLWarning, PXLError = ref.PXLError, PXLLog = ref.PXLLog;

ref1 = require('../geometry/primitive'), TriangleMesh = ref1.TriangleMesh, Triangle = ref1.Triangle, Vertex = ref1.Vertex;

ref2 = require('../math/math'), Vec3 = ref2.Vec3, Vec2 = ref2.Vec2;

Node = require('../core/node').Node;

RGB = require('../colour/colour').RGB;

Promise = require('../util/promise').Promise;

Request = require('../util/request').Request;

PhongMaterial = require('../material/phong').PhongMaterial;

BasicColourMaterial = require('../material/basic').BasicColourMaterial;


/*OBJModel */

OBJModel = (function(superClass) {
  extend(OBJModel, superClass);

  function OBJModel(url, promise1) {
    var load_data_promise, promise_data, promise_main, promise_material;
    this.url = url;
    this.promise = promise1;
    OBJModel.__super__.constructor.call(this);
    promise_main = new Promise();
    promise_material = new Promise();
    promise_data = new Promise();
    promise_main.when(promise_data).then((function(_this) {
      return function() {
        return _this.promise.resolve();
      };
    })(this));
    load_data_promise = (function(_this) {
      return function() {
        var r;
        r = new Request(_this.url);
        return r.get(function(data) {
          var load_material_promise, materials, matlibName;
          matlibName = _this._checkForMaterials(data);
          if (matlibName) {
            materials = {};
            load_material_promise = function() {
              var r2;
              matlibName = _this.url.substring(0, _this.url.lastIndexOf('/')) + "/" + matlibName;
              r2 = new Request(matlibName);
              return r2.get(function(matlibData) {
                return _this._parseMaterialFile(matlibData, materials, promise_material);
              });
            };
            promise_material.then(function() {
              _this._parse(data, materials);
              return promise_data.resolve();
            });
            return load_material_promise();
          } else {
            materials = [];
            _this._parse(data, materials);
            return promise_data.resolve();
          }
        });
      };
    })(this);
    load_data_promise();
    this;
  }

  OBJModel.prototype._checkForMaterials = function(text_data) {
    var j, len, line, lines;
    lines = text_data.split("\n");
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      if (line.slice(0, 6) === "mtllib") {
        return line.slice(7);
      }
      if (line.slice(0, 2) === "f ") {
        break;
      }
    }
    return void 0;
  };

  OBJModel.prototype._parseMaterialFile = function(text_data, materials, promise) {
    var _mat_names, _material_promise, _materialsLoaded, _ml, _tex_func, _tex_funcs, _tex_promise, _tex_promises, _tt, j, k, len, len1, line, lines, mat_name, new_tokens, tex_name, tex_url, tf, token, tokens;
    lines = text_data.split("\n");
    _tex_promises = [];
    _tex_funcs = [];
    _mat_names = [];
    _material_promise = new Promise();
    _materialsLoaded = function(_materials, _mat_names, _promise) {
      return function() {
        var j, len, m, name;
        for (j = 0, len = _mat_names.length; j < len; j++) {
          name = _mat_names[j];
          m = _materials[name];
          if (m.texture != null) {
            _materials[name] = new PhongMaterial(m.ambient, m.texture, m.specular, m.shine);
          } else {
            _materials[name] = new PhongMaterial(m.ambient, m.diffuse, m.specular, m.shine);
          }
        }
        return _promise.resolve();
      };
    };
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      if (line.slice(0, 7) === "newmtl ") {
        mat_name = line.split(" ")[1];
        materials[mat_name] = {};
        _mat_names.push(mat_name);
      }
      if (line.slice(0, 2) === "Ka") {
        tokens = line.split(" ");
        new_tokens = [
          (function() {
            var k, len1, ref3, results;
            ref3 = tokens.slice(1);
            results = [];
            for (k = 0, len1 = ref3.length; k < len1; k++) {
              token = ref3[k];
              results.push(parseFloat(token));
            }
            return results;
          })()
        ][0];
        materials[mat_name].ambient = new RGB(new_tokens[0], new_tokens[1], new_tokens[2]);
      }
      if (line.slice(0, 2) === "Kd") {
        tokens = line.split(" ");
        new_tokens = [
          (function() {
            var k, len1, ref3, results;
            ref3 = tokens.slice(1);
            results = [];
            for (k = 0, len1 = ref3.length; k < len1; k++) {
              token = ref3[k];
              results.push(parseFloat(token));
            }
            return results;
          })()
        ][0];
        materials[mat_name].diffuse = new RGB(new_tokens[0], new_tokens[1], new_tokens[2]);
      }
      if (line.slice(0, 2) === "Ks") {
        tokens = line.split(" ");
        new_tokens = [
          (function() {
            var k, len1, ref3, results;
            ref3 = tokens.slice(1);
            results = [];
            for (k = 0, len1 = ref3.length; k < len1; k++) {
              token = ref3[k];
              results.push(parseFloat(token));
            }
            return results;
          })()
        ][0];
        materials[mat_name].specular = new RGB(new_tokens[0], new_tokens[1], new_tokens[2]);
      }
      if (line.slice(0, 2) === "Ns") {
        tokens = line.split(" ");
        new_tokens = [
          (function() {
            var k, len1, ref3, results;
            ref3 = tokens.slice(1);
            results = [];
            for (k = 0, len1 = ref3.length; k < len1; k++) {
              token = ref3[k];
              results.push(parseInt(token));
            }
            return results;
          })()
        ][0];
        materials[mat_name].shine = new_tokens[1];
      }
      if (line.slice(0, 7) === "map_Kd ") {
        tex_name = line.slice(7);
        tex_url = this.url.substring(0, this.url.lastIndexOf('/')) + "/" + tex_name;
        if (typeof PXL !== "undefined" && PXL !== null) {
          _tt = function(_tex_url, _mat_name, _cc, _materials, _tex_promise) {
            return function() {
              PXL.Context.switchContext(_cc);
              return PXL.GL.textureFromURL(_tex_url, function(tex) {
                _materials[_mat_name].texture = tex;
                return _tex_promise.resolve();
              });
            };
          };
          _tex_promise = new Promise();
          _tex_func = _tt(tex_url, mat_name, PXL.Context, materials, _tex_promise);
          _tex_promises.push(_tex_promise);
          _tex_funcs.push(_tex_func);
        }
      }
    }
    if (_tex_promises.length > 0) {
      _ml = _materialsLoaded(materials, _mat_names, promise);
      _material_promise.when.apply(_material_promise, _tex_promises).then(_ml);
      for (k = 0, len1 = _tex_funcs.length; k < len1; k++) {
        tf = _tex_funcs[k];
        tf();
      }
    } else {
      promise.resolve();
    }
    return this;
  };

  OBJModel.prototype._parse = function(text_data, materials) {
    var bit, bits, bobs, current_mesh, i, idx_n, idx_t, idx_v, j, k, l, len, line, lines, mat_name, material, n, normals, o, object_node, offset_n, offset_t, offset_v, p0, positions, ref3, ref4, tc, texcoords, token, tokens, v, vertices;
    positions = [];
    normals = [];
    texcoords = [];
    materials["none"] = new BasicColourMaterial();
    object_node = null;
    offset_v = 0;
    offset_t = 0;
    offset_n = 0;
    lines = text_data.split("\n");
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      if (line.slice(0, 2) === "o ") {
        object_node = new Node;
        object_node._label = line.slice(2);
        this.add(object_node);
        current_mesh = new TriangleMesh(true);
        object_node.geometry = current_mesh;
        offset_v = positions.length;
        offset_n = normals.length;
        offset_t = texcoords.length;
      }
      if (line.slice(0, 2) === "v ") {
        bits = line.slice(2).split(" ");
        tokens = (function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = bits.length; k < len1; k++) {
            token = bits[k];
            results.push(parseFloat(token));
          }
          return results;
        })();
        v = new Vec3(tokens[0], tokens[1], tokens[2]);
        positions.push(v);
      } else if (line.slice(0, 3) === "vt ") {
        bits = line.slice(3).split(" ");
        tokens = (function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = bits.length; k < len1; k++) {
            token = bits[k];
            results.push(parseFloat(token));
          }
          return results;
        })();
        v = new Vec2(tokens[0], tokens[1]);
        texcoords.push(v);
      } else if (line.slice(0, 3) === "vn ") {
        bits = line.slice(3).split(" ");
        tokens = (function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = bits.length; k < len1; k++) {
            token = bits[k];
            results.push(parseFloat(token));
          }
          return results;
        })();
        v = new Vec3(tokens[0], tokens[1], tokens[2]);
        normals.push(v);
      } else if (line.slice(0, 7) === "usemtl ") {
        mat_name = line.slice(7);
        material = materials[mat_name];
        if (object_node.material == null) {
          object_node.material = material;
        }
      } else if (line.slice(0, 2) === "f ") {
        tc = line.slice(2);
        bits = tc.split(" ");
        bobs = (function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = bits.length; k < len1; k++) {
            bit = bits[k];
            results.push(bit.split("/"));
          }
          return results;
        })();
        if (bobs.length === 3) {
          vertices = [];
          for (i = k = 0; k <= 2; i = ++k) {
            idx_v = parseInt(bobs[i][0]) - 1;
            p0 = positions[idx_v];
            v = new Vertex({
              p: p0
            });
            if (bobs[i][2] !== "") {
              idx_n = parseInt(bobs[i][2]) - 1;
              if (idx_n < normals.length) {
                v.n = normals[idx_n].clone();
              }
            }
            if (bobs[i][1] !== "") {
              idx_t = parseInt(bobs[i][1]) - 1;
              if (idx_t < texcoords.length) {
                v.t = texcoords[idx_t].clone();
              }
            }
            vertices.push(v);
          }
          current_mesh.addTriangle(new Triangle(vertices[0], vertices[1], vertices[2]));
        } else if (bobs.length === 4) {
          vertices = [];
          for (i = l = 0; l <= 3; i = ++l) {
            idx_v = parseInt(bobs[i][0]) - 1;
            p0 = positions[idx_v];
            v = new Vertex({
              p: p0
            });
            if (bobs[i][2] !== "") {
              idx_n = parseInt(bobs[i][2]) - 1;
              if (idx_n < normals.length) {
                v.n = normals[idx_n].clone();
              }
            }
            if (bobs[i][1] !== "") {
              idx_t = parseInt(bobs[i][1]) - 1;
              if (idx_t < texcoords.length) {
                v.t = texcoords[idx_t].clone();
              }
            }
            vertices.push(v);
          }
          current_mesh.addTriangle(new Triangle(vertices[0], vertices[1], vertices[2]));
          current_mesh.addTriangle(new Triangle(vertices[0], vertices[2], vertices[3]));
        } else {
          vertices = [];
          for (i = n = 0, ref3 = bobs.length - 1; 0 <= ref3 ? n <= ref3 : n >= ref3; i = 0 <= ref3 ? ++n : --n) {
            idx_v = tokens[i] - 1;
            p0 = positions[idx_v];
            v = new Vertex({
              p: p0
            });
            if (bobs[i][2] !== "") {
              idx_n = parseInt(bobs[i][2]) - 1;
              if (idx_n < normals.length) {
                v.n = normals[idx_n];
              }
            }
            if (bobs[i][1] !== "") {
              idx_t = parseInt(bobs[i][1]) - 1;
              if (idx_t < texcoords.length) {
                v.t = normals[idx_t];
              }
            }
            vertices.push(v);
          }
          for (i = o = 1, ref4 = tokens.length - 1; 1 <= ref4 ? o <= ref4 : o >= ref4; i = 1 <= ref4 ? ++o : --o) {
            if (i === tokens.length - 1) {
              current_mesh.addTriangle(new Triangle(vertices[0], vertices[i], vertices[1]));
            } else {
              current_mesh.addTriangle(new Triangle(vertices[0], vertices[i], vertices[i + 1]));
            }
          }
        }
      }
    }
    return this;
  };

  return OBJModel;

})(Node);

module.exports = {
  OBJModel: OBJModel
};



},{"../colour/colour":4,"../core/node":6,"../geometry/primitive":9,"../material/basic":25,"../material/phong":28,"../math/math":30,"../util/log":35,"../util/promise":38,"../util/request":40}],20:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


- Resources

* http://www.yuiblog.com/blog/2007/06/12/module-pattern/
* http://www.plexical.com/blog/2012/01/25/writing-coffeescript-for-browser-and-nod/

A mesh is a collection of triangles with or without indices. All the triangles should have the same kinds of vertices 

- TODO
  * We split on materials at present. We should split on meshes if possible but
    not sure if the three.js supports that. For example, normal map and diffuse
    textures per mesh. Double check the three standard

  * There are texture loads in here. We need to set their callbacks and have a signal
    in here for when everything completes as 

  * is it a great idea to have an internal load queue
    - Probably not but we need to hook out to an external load queue so pass one in

ThreeJSModel is a node that creates geometries below it which are also nodes. These geometries are drawn seperatly, each with their own material. 
Accepts three.js style json model format
 */
var Matrix4, Node, PXLWarning, PhongBasicMaterial, Promise, Quad, RGB, RGBA, Request, Signal, Texture, ThreeJSModel, Triangle, TriangleMesh, Vec2, Vec3, Vec4, Vertex, ref, ref1, ref2,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../geometry/primitive'), Triangle = ref.Triangle, Quad = ref.Quad, Vertex = ref.Vertex, TriangleMesh = ref.TriangleMesh;

Node = require('../core/node').Node;

ref1 = require('../math/math'), Vec2 = ref1.Vec2, Vec3 = ref1.Vec3, Vec4 = ref1.Vec4, Matrix4 = ref1.Matrix4;

PhongBasicMaterial = require('../material/phong').PhongBasicMaterial;

ref2 = require('../colour/colour'), RGB = ref2.RGB, RGBA = ref2.RGBA;

Texture = require('../gl/texture').Texture;

Request = require('../util/request').Request;

Signal = require('../util/signal').Signal;

PXLWarning = require('../util/log').PXLWarning;

Promise = require('../util/promise').Promise;


/*ThreeJSModel */

ThreeJSModel = (function(superClass) {
  extend(ThreeJSModel, superClass);

  ThreeJSModel.prototype._bitset = function(value, position) {
    return value & (1 << position);
  };

  function ThreeJSModel(json_data, params) {
    var cc, closure_parse, colourAmbient, colourDiffuse, colourSpecular, i, j, materials, model, n, path, ref3, specularCoef, tf, url;
    this.params = params;
    this._parse = bind(this._parse, this);
    ThreeJSModel.__super__.constructor.call(this);
    if (this.params == null) {
      this.params = {};
      this.params.texturing = true;
    } else {
      if (this.params.texturing == null) {
        this.params.texturing = true;
      }
    }
    this.queue = new LoadQueue(this, this.params.onItem, this.params.onLoad);
    materials = json_data["materials"];
    if (materials.length === 0) {
      this.add(new Node(new TriangleMesh(true)));
    } else {
      for (i = j = 0, ref3 = materials.length - 1; 0 <= ref3 ? j <= ref3 : j >= ref3; i = 0 <= ref3 ? ++j : --j) {
        n = new Node();
        this.add(n);
        if (json_data["materials"][i]["DbgName"] != null) {
          n.dbgName = json_data["materials"][i]["DbgName"];
        }
        if (json_data["materials"][i]["DbgName"] === "default" || json_data["materials"][i]["DbgIndex"] === 1) {
          n.add(PhongColourMaterial());
        } else {
          colourAmbient = new RGB(json_data["materials"][i]["colorAmbient"][0], json_data["materials"][i]["colorAmbient"][1], json_data["materials"][i]["colorAmbient"][2]);
          if (colourAmbient == null) {
            colourAmbient = RGB.WHITE();
          }
          colourDiffuse = new RGB(json_data["materials"][i]["colorDiffuse"][0], json_data["materials"][i]["colorDiffuse"][1], json_data["materials"][i]["colorDiffuse"][2]);
          if (colourDiffuse == null) {
            colourDiffuse = RGB.WHITE();
          }
          colourSpecular = new RGB(json_data["materials"][i]["colorSpecular"][0], json_data["materials"][i]["colorSpecular"][1], json_data["materials"][i]["colorSpecular"][2]);
          if (colourSpecular == null) {
            colourSpecular = RGB.WHITE();
          }
          specularCoef = json_data["materials"][i]["specularCoef"];
          if (json_data["materials"][i]["mapDiffuse"] == null) {
            n.add(new PhongColourMaterial(colourAmbient, colourDiffuse, colourSpecular, specularCoef));
          }
        }
        n.geometry = new TriangleMesh(true);
        if (this.params.texturing) {
          if ((json_data["materials"][i]["mapDiffuse"] != null) && (json_data._coffeegl_request_url != null)) {
            url = json_data._coffeegl_request_url.substring(0, json_data._coffeegl_request_url.lastIndexOf("/"));
            path = url + "/" + json_data["materials"][i]["mapDiffuse"];
            cc = PXL.Context;
            tf = new LoadItem((function(n, path) {
              var _cc, _n, _path;
              _n = n;
              _path = path;
              _cc = cc;
              return function() {
                PXL.Context.switchContext(_cc);
                return PXL.GL.textureFromURL(_path, (function(_this) {
                  return function(texture) {
                    _n.add(new PhongBasicMaterial(texture, colourAmbient, colourDiffuse, colourSpecular, specularCoef));
                    _this.loaded();
                    return _this;
                  };
                })(this));
              };
              return this;
            })(n, path));
            this.queue.add(tf);
          }
        }
      }
    }
    cc = PXL.Context;
    model = this;
    closure_parse = (function(n, model) {
      var _cc, _model, data;
      data = json_data;
      _model = model;
      _cc = cc;
      return (function(_this) {
        return function() {
          PXL.Context.switchContext(_cc);
          return _model._parse(data);
        };
      })(this);
    })(n, model);
    this.queue.add(new LoadItem(function() {
      closure_parse();
      return this.loaded();
    }));
    this.queue.start();
  }

  ThreeJSModel.prototype._parse = function(json_data) {
    var child, cidx, i, i0, i1, i2, i3, j, k, len, len1, midx, nidx, node_idx, prim, ref3, removals, type, type2, uvidx, vertices, vi0, vi1, vi2, vi3, vidx;
    node_idx = 0;
    vidx = 0;
    vertices = [];
    while (vidx < json_data["vertices"].length) {
      vertices.push(new Vertex({
        p: new Vec3(json_data["vertices"][vidx++], json_data["vertices"][vidx++], json_data["vertices"][vidx++])
      }));
    }
    i = 0;
    while (i < json_data["faces"].length) {
      type = json_data["faces"][i++];
      prim;
      vi0;
      vi1;
      vi2;
      vi3;
      midx = {
        id: 0,
        type: -1
      };
      if (this._bitset(type, 0)) {
        vi0 = json_data["faces"][i++];
        vi1 = json_data["faces"][i++];
        vi2 = json_data["faces"][i++];
        vi3 = json_data["faces"][i++];
        prim = new Quad(vertices[vi0], vertices[vi1], vertices[vi2], vertices[vi3]);
        prim.indexed = true;
      } else {
        vi0 = json_data["faces"][i++];
        vi1 = json_data["faces"][i++];
        vi2 = json_data["faces"][i++];
        prim = new Triangle(vertices[vi0], vertices[vi1], vertices[vi2]);
        prim.indexed = true;
      }
      if (this._bitset(type, 1)) {
        midx.id = json_data["faces"][i++];
        type2 = type | 1;
        if (midx.type === -1) {
          midx.type = type2;
        } else {
          if (type2 !== midx.type) {
            PXLWarning("Different types within the same material");
          }
        }
      }
      if (this._bitset(type, 2)) {
        uvidx = json_data["faces"][i++];
      }
      if (this._bitset(type, 3)) {
        i0 = json_data["faces"][i++];
        i1 = json_data["faces"][i++];
        i2 = json_data["faces"][i++];
        if (prim instanceof Quad) {
          i3 = json_data["faces"][i++];
          vertices[vi3].t = new Vec2(json_data["uvs"][0][i3 * 2], json_data["uvs"][0][i3 * 2 + 1]);
        }
        vertices[vi0].t = new Vec2(json_data["uvs"][0][i0 * 2], json_data["uvs"][0][i0 * 2 + 1]);
        vertices[vi1].t = new Vec2(json_data["uvs"][0][i1 * 2], json_data["uvs"][0][i1 * 2 + 1]);
        vertices[vi2].t = new Vec2(json_data["uvs"][0][i2 * 2], json_data["uvs"][0][i2 * 2 + 1]);
      }
      if (this._bitset(type, 4)) {
        nidx = json_data["faces"][i++];
      }
      if (this._bitset(type, 5)) {
        i0 = json_data["faces"][i++];
        i1 = json_data["faces"][i++];
        i2 = json_data["faces"][i++];
        if (prim instanceof Quad) {
          i3 = json_data["faces"][i++];
          vertices[vi3].n = new Vec3(json_data["normals"][i3 * 3], json_data["normals"][i3 * 3 + 1], json_data["normals"][i3 * 3 + 2]);
        }
        vertices[vi0].n = new Vec3(json_data["normals"][i0 * 3], json_data["normals"][i0 * 3 + 1], json_data["normals"][i0 * 3 + 2]);
        vertices[vi1].n = new Vec3(json_data["normals"][i1 * 3], json_data["normals"][i1 * 3 + 1], json_data["normals"][i1 * 3 + 2]);
        vertices[vi2].n = new Vec3(json_data["normals"][i2 * 3], json_data["normals"][i2 * 3 + 1], json_data["normals"][i2 * 3 + 2]);
      }
      if (this._bitset(type, 6)) {
        cidx = json_data["faces"][i++];
      }
      if (this._bitset(type, 7)) {
        i0 = json_data["faces"][i++];
        i1 = json_data["faces"][i++];
        i2 = json_data["faces"][i++];
        if (prim instanceof Quad) {
          i3 = json_data["faces"][i++];
        }
      }
      if (prim instanceof Triangle) {
        this.children[midx.id].geometry.addTriangle(prim);
      } else {
        this.children[midx.id].geometry.addQuad(prim);
      }
    }
    removals = [];
    ref3 = this.children;
    for (j = 0, len = ref3.length; j < len; j++) {
      child = ref3[j];
      if (child.geometry != null) {
        if (child.geometry.vertices.length === 0) {
          removals.push(child);
        }
      }
    }
    for (k = 0, len1 = removals.length; k < len1; k++) {
      child = removals[k];
      this.remove(child);
    }
    return this;
  };

  return ThreeJSModel;

})(Node);

module.exports = {
  ThreeJSModel: ThreeJSModel
};



},{"../colour/colour":4,"../core/node":6,"../geometry/primitive":9,"../gl/texture":14,"../material/phong":28,"../math/math":30,"../util/log":35,"../util/promise":38,"../util/request":40,"../util/signal":41}],21:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var KeyEmitter, Signal, Vec2, makeKeyEmitter, removeKeyEmitter, util;

util = require("../util/util");

Vec2 = require("../math/math").Vec2;

Signal = require("../util/signal").Signal;


/*KeyEmitter */

KeyEmitter = {};

KeyEmitter["pauseKeyEmitter"] = function(force) {
  this.keyUp.pause(force);
  this.keyDown.pause(force);
  return this.keyPress.pause(force);
};

makeKeyEmitter = function(obj) {
  if (obj.canvas != null) {
    util.extend(obj, KeyEmitter);
    obj.keyUp = new Signal();
    obj.keyDown = new Signal();
    obj.keyPress = new Signal();
    obj["_onKeyUp"] = function(event) {
      PXL.Context.switchContext(obj);
      obj.keyUp.dispatch(event);
      return false;
    };
    obj.canvas.addEventListener("keyup", obj["_onKeyUp"]);
    obj["_onKeyDown"] = function(event) {
      PXL.Context.switchContext(obj);
      obj.keyDown.dispatch(event);
      return false;
    };
    obj.canvas.addEventListener("keydown", obj["_onKeyDown"]);
    obj["_onKeyPress"] = function(event) {
      PXL.Context.switchContext(obj);
      obj.keyPress.dispatch(event);
      return false;
    };
    return obj.canvas.addEventListener("keypress", obj["_onKeyPress"]);
  }
};

removeKeyEmitter = function(obj) {
  obj.canvas.removeEventListener('keyup', obj["_onKeyUp"]);
  return obj.canvas.removeEventListener('keydown', obj["_onKeyDown"]);
};

module.exports = {
  makeKeyEmitter: makeKeyEmitter,
  removeKeyEmitter: removeKeyEmitter
};



},{"../math/math":30,"../util/signal":41,"../util/util":42}],22:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var MouseEmitter, Signal, Vec2, makeMouseEmitter, removeMouseEmitter, util;

util = require("../util/util");

Vec2 = require("../math/math").Vec2;

Signal = require("../util/signal").Signal;


/*MouseEmitter */

MouseEmitter = {};

MouseEmitter["pauseMouseEmitter"] = function(force) {
  this.mouseMove.pause(force);
  this.mouseDown.pause(force);
  this.mouseUp.pause(force);
  this.mouseClick.pause(force);
  this.mouseOut.pause(force);
  this.mouseOver.pause(force);
  return this.mouseWheel.pause(force);
};

MouseEmitter["_setMouseEvent"] = function(event) {
  this._getMousePos(event);
  this._setButtons(event);
  if (event.preventDefault != null) {
    event.preventDefault();
  }
  if (event.stopImmediatePropagation != null) {
    event.stopImmediatePropagation();
  }
  if (event.stopPropagation != null) {
    event.stopPropagation();
  }
  return event;
};

MouseEmitter["_getMousePos"] = function(e) {
  if (e.clientX || e.clientY) {
    e.mouseX = e.clientX;
    e.mouseY = e.clientY;
  } else if (e.offsetX || e.offsetY) {
    e.mouseX = e.offsetX;
    e.mouseY = e.offsetY;
  }
  return [e.mouseX, e.mouseY];
};

MouseEmitter["_setButtons"] = function(event) {
  if (event.type === "mousedown") {
    this._mouseButton = true;
  } else if (event.type === "mouseup" || event.type === "mouseout") {
    this._mouseButton = false;
  }
  if (PXL.Context.profile.browser === "Firefox") {
    if (event.type === "mousemove" && event.buttons !== 0) {
      this._mouseButton = true;
    }
  }
  if (this._mouseButton) {
    if (PXL.Context.profile.browser === "Firefox") {
      if ((event.button === 0 && event.buttons === 1) || event.buttons === 1) {
        event.buttonLeft = true;
        event.buttonMiddle = false;
        event.buttonRight = false;
        return event;
      } else if ((event.button === 1 && event.buttons === 4) || event.buttons === 4) {
        event.buttonLeft = false;
        event.buttonMiddle = true;
        event.buttonRight = false;
        return event;
      } else if ((event.button === 2 && event.buttons === 2) || event.buttons === 2) {
        event.buttonLeft = false;
        event.buttonMiddle = false;
        event.buttonRight = true;
        return event;
      }
    } else {
      if (event.button === 0) {
        event.buttonLeft = true;
        event.buttonMiddle = false;
        event.buttonRight = false;
        return event;
      } else if (event.button === 1) {
        event.buttonLeft = false;
        event.buttonMiddle = true;
        event.buttonRight = false;
        return event;
      } else if (event.button === 2) {
        event.buttonLeft = false;
        event.buttonMiddle = false;
        event.buttonRight = true;
        return event;
      }
    }
  } else {
    event.buttonLeft = false;
    event.buttonMiddle = false;
    event.buttonRight = false;
    return event;
  }
};

makeMouseEmitter = function(obj) {
  if (obj.canvas != null) {
    util.extend(obj, MouseEmitter);
    obj.mouseMove = new Signal();
    obj.mouseDown = new Signal();
    obj.mouseUp = new Signal();
    obj.mouseClick = new Signal();
    obj.mouseOut = new Signal();
    obj.mouseOver = new Signal();
    obj.mouseWheel = new Signal();
    obj["_mouseButton"] = false;
    obj["_onMouseMove"] = function(event) {
      var e;
      PXL.Context.switchContext(obj);
      e = obj._setMouseEvent(event);
      obj.mouseMove.dispatch(e);
      return false;
    };
    obj.canvas.onmousemove = obj["_onMouseMove"];
    obj["_onMouseDown"] = function(event) {
      PXL.Context.switchContext(obj);
      obj._setMouseEvent(event);
      obj.mouseDown.dispatch(event);
      return false;
    };
    obj.canvas.onmousedown = obj["_onMouseDown"];
    obj["_onMouseUp"] = function(event) {
      PXL.Context.switchContext(obj);
      obj._setMouseEvent(event);
      obj.mouseUp.dispatch(event);
      return false;
    };
    obj.canvas.onmouseup = obj["_onMouseUp"];
    obj["_onMouseClick"] = function(event) {
      PXL.Context.switchContext(obj);
      obj._setMouseEvent(event);
      obj.mouseClick.dispatch(event);
      return false;
    };
    obj.canvas.onmouseclick = obj["_onMouseClick"];
    obj["_onContextMenu"] = function(event) {
      PXL.Context.switchContext(obj);
      obj._setMouseEvent(event);
      return false;
    };
    obj.canvas.oncontextmenu = obj["_onContextMenu"];
    obj["_onMouseOut"] = function(event) {
      PXL.Context.switchContext(obj);
      obj._setMouseEvent(event);
      obj.mouseOut.dispatch(event);
      return false;
    };
    obj.canvas.onmouseout = obj["_onMouseOut"];
    obj["_onMouseOver"] = function(event) {
      PXL.Context.switchContext(obj);
      obj._setMouseEvent(event);
      obj.mouseOver.dispatch(event);
      return false;
    };
    obj.canvas.onmouseover = obj["_onMouseOver"];
    if (obj.canvas.addEventListener != null) {
      obj["_onMouseWheel"] = (function(_this) {
        return function(event) {
          PXL.Context.switchContext(obj);
          obj._setMouseEvent(event);
          obj.mouseWheel.dispatch(event);
          return false;
        };
      })(this);
      obj["_onDOMNouseScroll"] = (function(_this) {
        return function(event) {
          PXL.Context.switchContext(obj);
          event.wheelDelta = Math.max(-500, Math.min(500, (event.wheelDelta || -event.detail) * 500));
          obj._setMouseEvent(event);
          obj.mouseWheel.dispatch(event);
          return false;
        };
      })(this);
      obj["_onMouseClick"] = (function(_this) {
        return function(event) {
          PXL.Context.switchContext(obj);
          obj._setMouseEvent(event);
          obj.mouseClick.dispatch(event);
          return false;
        };
      })(this);
      obj.canvas.addEventListener("mousewheel", obj["_onMouseWheel"], false);
      obj.canvas.addEventListener("DOMMouseScroll", obj["_onDOMNouseScroll"], false);
      return obj.canvas.addEventListener("mouseclick", obj["_onMouseClick"], false);
    } else {
      if (obj.canvas.onmousewheel != null) {
        obj["_onMouseWheel"] = function(event) {
          PXL.Context.switchContext(obj);
          obj._setMouseEvent(event);
          obj.mouseWheel.dispatch(event);
          return false;
        };
        return obj.canvas.onmousewheel = obj["_onMouseWheel"];
      }
    }
  }
};

removeMouseEmitter = function(obj) {
  if (obj.canvas != null) {
    obj.canvas.removeEventListener('click', obj["_onMouseClick"]);
    obj.canvas.removeEventListener('mousewheel', obj["_onMouseWheel"]);
    obj.canvas.removeEventListener('DOMMouseScroll', obj["_onDOMNouseScroll"]);
    obj.canvas.removeEventListener('mouseover', obj["_onMouseOver"]);
    obj.canvas.removeEventListener('mouseout', obj["_onMouseOut"]);
    obj.canvas.removeEventListener('mouseclick', obj["_onMouseClick"]);
    obj.canvas.removeEventListener('mouseup', obj["_onMouseUp"]);
    obj.canvas.removeEventListener('mousedown', obj["_onMouseDown"]);
    obj.canvas.removeEventListener('mousemove', obj["_onMouseMove"]);
    return obj.canvas.removeEventListener('mousebutton', obj["_onMouseButton"]);

    /*
    delete obj.mouseMove
    delete obj.mouseDown
    delete obj.mouseUp
    delete obj.mouseClick
    delete obj.mouseOut
    delete obj.mouseOver
    delete obj.mouseWheel
     */
  }
};

module.exports = {
  makeMouseEmitter: makeMouseEmitter,
  removeMouseEmitter: removeMouseEmitter
};



},{"../math/math":30,"../util/signal":41,"../util/util":42}],23:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var DISTANCE_LIMIT, FINGER_UP_LIMIT, GESTURE_FLICK_LIMIT, GESTURE_FLICK_TIME, Signal, TouchEmitter, Vec2, makeTouchEmitter, removeTouchEmitter, util;

util = require("../util/util");

Vec2 = require("../math/math").Vec2;

Signal = require("../util/signal").Signal;

DISTANCE_LIMIT = 1;

GESTURE_FLICK_TIME = 280;

GESTURE_FLICK_LIMIT = 0.001;

FINGER_UP_LIMIT = 60;


/*TouchEmitter */

TouchEmitter = {};

TouchEmitter["pauseTouchEmitter"] = function(force) {
  this.touchPinch.pause(force);
  this.touchTap.pause(force);
  this.touchSpread.pause(force);
  this.touchFlick.pause(force);
  this.touchDrag.pause(force);
  return this.touchDone.pause(force);
};

makeTouchEmitter = function(obj) {
  var ongoingTouchIndexById;
  if (obj.canvas != null) {
    util.extend(obj, TouchEmitter);
    obj.touchPinch = new Signal();
    obj.touchTap = new Signal();
    obj.touchSpread = new Signal();
    obj.touchDrag = new Signal();
    obj.touchFlick = new Signal();
    obj.touchDone = new Signal();
    obj.ongoingTouches = [];
    obj._lastTouchTime = Date.now();
    ongoingTouchIndexById = function(idToFind) {
      var i, id, j, ref, touch;
      PXL.Context.switchContext(obj);
      if (obj.ongoingTouches.length > 0) {
        for (i = j = 0, ref = obj.ongoingTouches.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          touch = obj.ongoingTouches[i];
          id = touch.identifier;
          if (id === idToFind) {
            return i;
          }
        }
      }
      return -1;
    };
    obj["_onTouchStart"] = (function(_this) {
      return function(evt) {
        var idx, j, len, touch, touches;
        PXL.Context.switchContext(obj);
        evt.preventDefault();
        touches = evt.changedTouches;
        for (j = 0, len = touches.length; j < len; j++) {
          touch = touches[j];
          idx = ongoingTouchIndexById(touch.identifier);
          if (idx === -1) {
            touch.ppos = new Vec2(touch.clientX, touch.clientY);
            touch.cpos = new Vec2(touch.clientX, touch.clientY);
            touch.spos = new Vec2(touch.clientX, touch.clientY);
            touch.moved = false;
            touch.timeStart = touch.timeNow = touch.timePrev = Date.now();
            obj.ongoingTouches.push(touch);
          }
        }
        if (PXL.Context.debug) {
          return console.log("Touch Start ", obj.ongoingTouches);
        }
      };
    })(this);
    obj.canvas.ontouchstart = obj["_onTouchStart"];
    obj["_onTouchMove"] = function(evt) {
      var cosa, d0, d1, dd0, dd1, idx, j, len, newtouch, speed, touch, touches;
      PXL.Context.switchContext(obj);
      evt.preventDefault();
      touches = evt.changedTouches;
      for (j = 0, len = touches.length; j < len; j++) {
        newtouch = touches[j];
        idx = ongoingTouchIndexById(newtouch.identifier);
        touch = obj.ongoingTouches[idx];
        touch.ppos.x = touch.cpos.x;
        touch.ppos.y = touch.cpos.y;
        touch.cpos.x = newtouch.clientX;
        touch.cpos.y = newtouch.clientY;
        touch.timePrev = touch.timeNow;
        touch.timeNow = Date.now();
        if (touch.ppos.x !== touch.cpos.x || touch.ppos.y || touch.cpos.y) {
          touch.moved = true;
        } else {
          touch.moved = false;
        }
      }
      if (obj.ongoingTouches.length === 2 && touch.moved) {
        d0 = obj.ongoingTouches[0].cpos.dist(obj.ongoingTouches[1].cpos);
        d1 = obj.ongoingTouches[0].ppos.dist(obj.ongoingTouches[1].ppos);
        evt.ddist = d0 - d1;
        dd0 = Vec2.sub(obj.ongoingTouches[0].cpos, obj.ongoingTouches[0].ppos);
        dd1 = Vec2.sub(obj.ongoingTouches[1].cpos, obj.ongoingTouches[1].ppos);
        cosa = dd0.dot(dd1) / (dd0.length() * dd1.length());
        if (Math.abs(evt.ddist) > DISTANCE_LIMIT) {
          if (cosa > 0.5) {
            evt.currentPos = obj.ongoingTouches[0].cpos;
            evt.previousPos = obj.ongoingTouches[0].ppos;
            evt.fingers = 2;
            return obj.touchSwipe.dispatch(evt);
          } else {
            evt.center = Vec2.add(obj.ongoingTouches[0].cpos, obj.ongoingTouches[1].cpos);
            evt.center.multScalar(0.5);
            if (d0 > d1) {
              return obj.touchSpread.dispatch(evt);
            } else {
              return obj.touchPinch.dispatch(evt);
            }
          }
        }
      } else if (obj.ongoingTouches.length === 1) {
        if (Date.now() - obj._lastTouchTime > FINGER_UP_LIMIT) {
          touch = obj.ongoingTouches[0];
          speed = touch.cpos.distanceTo(touch.ppos) / (Date.now() - touch.timeStart);
          if (speed <= GESTURE_FLICK_LIMIT || touch.timeNow - touch.timeStart > GESTURE_FLICK_TIME) {
            if (touch.cpos.distanceTo(touch.ppos) > 0) {
              evt.currentPos = touch.cpos.copy();
              evt.previousPos = touch.ppos.copy();
              evt.startPos = touch.spos.copy();
              evt.fingers = 1;
              return obj.touchDrag.dispatch(evt);
            }
          }
        }
      }
    };
    obj.canvas.ontouchmove = obj["_onTouchMove"];
    obj["_touchEnd"] = function(evt) {
      var idx, j, k, len, len1, newtouch, speed, touch, touches, tp;
      PXL.Context.switchContext(obj);
      evt.preventDefault();
      touches = evt.changedTouches;
      if (obj.ongoingTouches.length === 1) {
        if (Date.now() - obj._lastTouchTime > FINGER_UP_LIMIT) {
          tp = new Vec2(touches[0].clientX, touches[0].clientY);
          speed = tp.distanceTo(obj.ongoingTouches[0].ppos) / (Date.now() - obj.ongoingTouches[0].timeStart);
          if (speed >= GESTURE_FLICK_LIMIT) {
            touch = obj.ongoingTouches[0];
            evt.currentPos = touch.cpos.copy();
            evt.previousPos = touch.ppos.copy();
            evt.startPos = touch.spos.copy();
            evt.fingers = 1;
            obj.touchFlick.dispatch(evt);
          }
        }
        for (j = 0, len = touches.length; j < len; j++) {
          newtouch = touches[j];
          idx = ongoingTouchIndexById(newtouch.identifier);
          if (obj.ongoingTouches[idx].moved === fa(lse && Date.now() - obj._lastTouchTime > FINGER_UP_LIMIT)) {
            if (PXL.Context.debug) {
              console.log(evt);
            }
            evt.currentPos = obj.ongoingTouches[idx].cpos.copy();
            evt.fingers = 1;
            obj.touchTap.dispatch(evt);
          }
          obj.ongoingTouches.splice(idx, 1);
        }
      } else {
        for (k = 0, len1 = touches.length; k < len1; k++) {
          newtouch = touches[k];
          idx = ongoingTouchIndexById(newtouch.identifier);
          obj.ongoingTouches.splice(idx, 1);
        }
        if (PXL.Context.debug) {
          console.log("Touch End ", obj.ongoingTouches);
        }
      }
      obj._lastTouchTime = Date.now();
      if (obj.ongoingTouches.length === 0) {
        return obj.touchDone.dispatch(evt);
      }
    };
    obj.canvas.ontouchend = obj["_touchEnd"];
    return obj.canvas.ontouchcancel = obj["_touchEnd"];
  }
};

removeTouchEmitter = function(obj) {
  obj.canvas.removeEventListener("touchend", obj["_onTouchEnd"]);
  obj.canvas.removeEventListener("touchcancel", obj["_onTouchEnd"]);
  obj.canvas.removeEventListener("touchmove", obj["_onTouchMove"]);
  return obj.canvas.removeEventListener("touchstart", obj["_onTouchStart"]);
};

module.exports = {
  makeTouchEmitter: makeTouchEmitter,
  removeTouchEmitter: removeTouchEmitter
};



},{"../math/math":30,"../util/signal":41,"../util/util":42}],24:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

Basic forward rendering lights such as ambient, spotlight and such

- TODO 
* Issue arises with timing of shader definitions such as num-lights. Shader will need to 
be rebuilt essentially if the lights change. To do that we have a set of define lines in the
shader which we can modify easily. A user will need to set these if they wish to mess with stuff

*updating the pos and the matrix together :S tricksy
 */
var AmbientLight, Contract, LIGHTING_NUM_POINT_LIGHTS, LIGHTING_NUM_SPOT_LIGHTS, Matrix4, PointLight, RGB, RGBA, SpotLight, Vec2, Vec3, Vec4, ref, ref1;

ref = require('../math/math'), Matrix4 = ref.Matrix4, Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4;

ref1 = require('../colour/colour'), RGB = ref1.RGB, RGBA = ref1.RGBA;

Contract = require('../gl/contract').Contract;

LIGHTING_NUM_POINT_LIGHTS = 5;

LIGHTING_NUM_SPOT_LIGHTS = 5;


/*AmbientLight */

AmbientLight = (function() {
  AmbientLight.vertex_head = "uniform vec3 uAmbientLightingColour;\n";

  AmbientLight.fragment_head = AmbientLight.vertex_head;

  function AmbientLight(colour) {
    this.colour = colour;
    if (this.colour == null) {
      this.colour = new RGB(0, 0, 0);
    }
    this.contract = new Contract();
    this.contract.roles.uAmbientLightingColour = "colour";
  }

  AmbientLight.prototype._addToNode = function(node) {
    node.ambientLight = this;
    return this;
  };

  return AmbientLight;

})();


/* PointLight */

PointLight = (function() {
  PointLight.vertex_head = "#ifdef LIGHTING_POINT\n" + "#define LIGHTING_NUM_POINT_LIGHTS " + LIGHTING_NUM_POINT_LIGHTS + "\n" + "uniform int uPointLightNum;\n" + "uniform vec3 uPointLightPos[LIGHTING_NUM_POINT_LIGHTS];\n" + "uniform vec3 uPointLightColour[LIGHTING_NUM_POINT_LIGHTS];\n" + "uniform vec4 uPointLightAttenuation[LIGHTING_NUM_POINT_LIGHTS];\n" + "#endif\n";

  PointLight.fragment_head = PointLight.vertex_head;

  PointLight._posGlobal = new Float32Array(LIGHTING_NUM_POINT_LIGHTS * 3);

  PointLight._colourGlobal = new Float32Array(LIGHTING_NUM_POINT_LIGHTS * 3);

  PointLight._attenuationGlobal = new Float32Array(LIGHTING_NUM_POINT_LIGHTS * 4);

  PointLight.contract = new Contract();

  PointLight.contract.roles.uPointLightPos = "_posGlobal";

  PointLight.contract.roles.uPointLightColour = "_colourGlobal";

  PointLight.contract.roles.uPointLightAttenuation = "_attenuationGlobal";

  PointLight.contract.roles.uPointLightNum = "_numGlobal";

  PointLight._preDraw = function(lights) {
    var i, idx, len, light;
    idx = 0;
    if (lights == null) {
      return;
    }
    for (i = 0, len = lights.length; i < len; i++) {
      light = lights[i];
      PointLight._posGlobal[idx * 3] = light.pos.x;
      PointLight._posGlobal[idx * 3 + 1] = light.pos.y;
      PointLight._posGlobal[idx * 3 + 2] = light.pos.z;
      PointLight._colourGlobal[idx * 3] = light.colour.r;
      PointLight._colourGlobal[idx * 3 + 1] = light.colour.g;
      PointLight._colourGlobal[idx * 3 + 2] = light.colour.b;
      PointLight._attenuationGlobal[idx * 4] = light.attenuation.x;
      PointLight._attenuationGlobal[idx * 4 + 1] = light.attenuation.y;
      PointLight._attenuationGlobal[idx * 4 + 2] = light.attenuation.z;
      PointLight._attenuationGlobal[idx * 4 + 3] = light.attenuation.w;
    }
    return PointLight._numGlobal = lights.length;
  };

  function PointLight(pos, colour, attenuation) {
    this.pos = pos;
    this.colour = colour;
    this.attenuation = attenuation;
    this.contract = PointLight.contract;
    this._posGlobal = PointLight._posGlobal;
    this._colourGlobal = PointLight._colourGlobal;
    this._attenuationGlobal = PointLight._attenuationGlobal;
    this._numGlobal = PointLight._numGlobal;
    if (this.pos == null) {
      this.pos = new Vec3(1, 1, 1);
    }
    if (this.colour == null) {
      this.colour = RGB.WHITE();
    }
    if (this.attenuation == null) {
      this.attenuation = [100, 1.0, 0.045, 0.0075];
    }
  }

  PointLight.prototype._addToNode = function(node) {
    node.pointLights.push(this);
    return this;
  };

  PointLight.prototype._removeFromNode = function(node) {
    node.pointLights.splice(node.pointLights.indexOf(this));
    return this;
  };

  return PointLight;

})();


/* SpotLight */

SpotLight = (function() {
  SpotLight.vertex_head = "#ifdef LIGHTING_SPOT\n" + "#define LIGHTING_NUM_SPOT_LIGHTS " + LIGHTING_NUM_SPOT_LIGHTS + "\n" + "uniform int uSpotLightNum;\n" + "uniform vec3 uSpotLightPos[LIGHTING_NUM_SPOT_LIGHTS];\n" + "uniform vec3 uSpotLightColour[LIGHTING_NUM_SPOT_LIGHTS];\n" + "uniform vec3 uSpotLightDir[LIGHTING_NUM_SPOT_LIGHTS];\n" + "uniform vec4 uSpotLightAttenuation[LIGHTING_NUM_SPOT_LIGHTS];\n" + "uniform float uSpotLightAngle[LIGHTING_NUM_SPOT_LIGHTS];\n" + "uniform float uSpotLightExp[LIGHTING_NUM_SPOT_LIGHTS];\n" + "#endif\n";

  SpotLight.fragment_head = SpotLight.vertex_head;

  SpotLight._posGlobal = new Float32Array(LIGHTING_NUM_SPOT_LIGHTS * 3);

  SpotLight._colourGlobal = new Float32Array(LIGHTING_NUM_SPOT_LIGHTS * 3);

  SpotLight._attenuationGlobal = new Float32Array(LIGHTING_NUM_SPOT_LIGHTS * 4);

  SpotLight._dirGlobal = new Float32Array(LIGHTING_NUM_SPOT_LIGHTS * 3);

  SpotLight._angleGlobal = new Float32Array(LIGHTING_NUM_SPOT_LIGHTS);

  SpotLight._expGlobal = new Float32Array(LIGHTING_NUM_SPOT_LIGHTS);

  SpotLight.contract = new Contract();

  SpotLight.contract.roles.uSpotLightPos = "_posGlobal";

  SpotLight.contract.roles.uSpotLightColour = "_colourGlobal";

  SpotLight.contract.roles.uSpotLightAttenuation = "_attenuationGlobal";

  SpotLight.contract.roles.uSpotLightDir = "_dirGlobal";

  SpotLight.contract.roles.uSpotLightAngle = "_angleGlobal";

  SpotLight.contract.roles.uSpotLightExp = "_expGlobal";

  SpotLight.contract.roles.uSpotLightNum = "_numGlobal";

  SpotLight._preDraw = function(lights) {
    var i, idx, len, light;
    idx = 0;
    if (lights == null) {
      return;
    }
    for (i = 0, len = lights.length; i < len; i++) {
      light = lights[i];
      SpotLight._posGlobal[idx * 3] = light.pos.x;
      SpotLight._posGlobal[idx * 3 + 1] = light.pos.y;
      SpotLight._posGlobal[idx * 3 + 2] = light.pos.z;
      SpotLight._colourGlobal[idx * 3] = light.colour.r;
      SpotLight._colourGlobal[idx * 3 + 1] = light.colour.g;
      SpotLight._colourGlobal[idx * 3 + 2] = light.colour.b;
      SpotLight._attenuationGlobal[idx * 4] = light.attenuation.x;
      SpotLight._attenuationGlobal[idx * 4 + 1] = light.attenuation.y;
      SpotLight._attenuationGlobal[idx * 4 + 2] = light.attenuation.z;
      SpotLight._attenuationGlobal[idx * 4 + 3] = light.attenuation.w;
      SpotLight._dirGlobal[idx * 3] = light.dir.x;
      SpotLight._dirGlobal[idx * 3 + 1] = light.dir.y;
      SpotLight._dirGlobal[idx * 3 + 2] = light.dir.z;
      SpotLight._angleGlobal[idx] = light.angle;
      SpotLight._expGlobal[idx] = light.exponent;
      idx += 1;
    }
    return SpotLight.numGlobal = lights.length;
  };

  function SpotLight(pos, colour, dir, angle, exponent, shadowmap, attenuation) {
    this.pos = pos;
    this.colour = colour;
    this.dir = dir;
    this.angle = angle;
    this.exponent = exponent;
    this.shadowmap = shadowmap;
    this.attenuation = attenuation;
    this.contract = SpotLight.contract;
    this._posGlobal = SpotLight._posGlobal;
    this._colourGlobal = SpotLight._colourGlobal;
    this._attenuationGlobal = SpotLight._attenuationGlobal;
    this._dirGlobal = SpotLight._dirGlobal;
    this._angleGlobal = SpotLight._angleGlobal;
    this._expGlobal = SpotLight._expGlobal;
    if (this.pos == null) {
      this.pos = new Vec3(1, 1, 1);
    }
    if (this.colour == null) {
      this.colour = RGB.WHITE();
    }
    if (this.shadowmap == null) {
      this.shadowmap = false;
    }
    if (this.shadowmap) {
      this._shadowmap_fbo = new Fbo(640, 640, GL.R);
    }
    if (this.attenuation == null) {
      this.attenuation = [100, 1.0, 0.045, 0.0075];
    }
    if (this.dir == null) {
      this.dir = new Vec3(0, -1, 0);
    }
    this.dir.normalize();
    if (this.angle == null) {
      this.angle = 45.0;
    }
    if (this.exponent == null) {
      this.exponent = 100.0;
    }
    this.idx = -1;
  }

  SpotLight.prototype._addToNode = function(node) {
    node.spotLights.push(this);
    return this;
  };

  SpotLight.prototype._removeFromNode = function(node) {
    node.spotLights.splice(node.spotLights.indexOf(this));
    return this;
  };

  return SpotLight;

})();

module.exports = {
  PointLight: PointLight,
  AmbientLight: AmbientLight,
  SpotLight: SpotLight
};



},{"../colour/colour":4,"../gl/contract":11,"../math/math":30}],25:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

Basic materials for our ubershader
 */
var BasicColourMaterial, Material, RGBA, TextureMaterial, VertexColourMaterial, ref, uber_texture_mat, uber_uniform_colour, uber_vertex_colour,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Material = require("./material").Material;

RGBA = require("../colour/colour").RGBA;

ref = require('../gl/uber_shader_paths'), uber_uniform_colour = ref.uber_uniform_colour, uber_vertex_colour = ref.uber_vertex_colour, uber_texture_mat = ref.uber_texture_mat;


/* BasicColourMaterial */

BasicColourMaterial = (function(superClass) {
  extend(BasicColourMaterial, superClass);

  function BasicColourMaterial(colour) {
    this.colour = colour;
    BasicColourMaterial.__super__.constructor.call(this);
    if (this.colour == null) {
      this.colour = new RGBA.WHITE();
    }
    if (this.colour.a == null) {
      this.colour = new RGBA(this.colour.r, this.colour.g, this.colour.b, 1.0);
    }
    this.contract.roles.uColour = "colour";
    this._uber0 = uber_uniform_colour(true, this._uber0);
    this._uber_defines = ['BASIC_COLOUR'];
  }

  return BasicColourMaterial;

})(Material);


/* VertexColourMaterial */

VertexColourMaterial = (function(superClass) {
  extend(VertexColourMaterial, superClass);

  function VertexColourMaterial() {
    VertexColourMaterial.__super__.constructor.call(this);
    this._uber0 = uber_vertex_colour(true, this._uber0);
    this._uber_defines = ['VERTEX_COLOUR'];
  }

  return VertexColourMaterial;

})(Material);


/* TextureMaterial */

TextureMaterial = (function(superClass) {
  extend(TextureMaterial, superClass);

  TextureMaterial.fragment_head = "#ifdef MAT_TEXTURE\nuniform sampler2D uSamplerTexture;\n#endif\n";

  TextureMaterial.fragment_main = "#ifdef MAT_TEXTURE\nif(bitcheck(uUber0,4)) { gl_FragColor = texture2D(uSamplerTexture, vTexCoord); }\n#endif\n";

  function TextureMaterial(texture) {
    this.texture = texture;
    TextureMaterial.__super__.constructor.call(this);
    this._uber0 = uber_texture_mat(true, this._uber0);
    this._uber_defines = ['MAT_TEXTURE', 'VERTEX_TEXTURE'];
    this.contract.roles.uSamplerTexture = "texture";
  }

  TextureMaterial.prototype._preDraw = function() {
    return this.texture.bind();
  };

  return TextureMaterial;

})(Material);

module.exports = {
  Material: Material,
  BasicColourMaterial: BasicColourMaterial,
  VertexColourMaterial: VertexColourMaterial,
  TextureMaterial: TextureMaterial
};



},{"../colour/colour":4,"../gl/uber_shader_paths":16,"./material":27}],26:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

A 'Depth' material. Not a material in the convential sense but render
everything below this using a depth shader instead of any other
 */
var DepthMaterial, Material, ViewDepthMaterial, ref, uber_depth_read, uber_depth_set,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Material = require("./material").Material;

ref = require('../gl/uber_shader_paths'), uber_depth_set = ref.uber_depth_set, uber_depth_read = ref.uber_depth_read;


/* DepthMaterial */

DepthMaterial = (function(superClass) {
  extend(DepthMaterial, superClass);

  DepthMaterial.fragment_head = "#ifdef FRAGMENT_DEPTH\n" + "vec4 pack (float depth) {\n" + "  const vec4 bitSh = vec4(256 * 256 * 256,\n" + "  256 * 256,\n" + "  256,\n" + "  1.0);\n" + "  const vec4 bitMsk = vec4(0,\n" + "   1.0 / 256.0,\n" + "   1.0 / 256.0,\n" + "   1.0 / 256.0);\n" + "   vec4 comp = fract(depth * bitSh);\n" + "   comp -= comp.xxyz * bitMsk;\n" + "   return comp;\n" + "  }\n" + "vec4 packDepth() { return pack(gl_FragCoord.z); }\n\n" + "// Returns the 3D position in eye space.\n" + "vec3 positionFromDepth(float depth, vec2 texcoord) {\n" + "  vec4 position = vec4(texcoord, depth, 1.0);\n" + "  position.xyz = position.xyz*2.0 -1.0;\n" + "  position = uInverseProjectionMatrix*position;\n" + "  position.xyz /= position.w;\n" + "  return position.xyz;\n}\n\n" + "uniform sampler2D uSamplerDepth;\n" + "float unpack (in vec4 colour) {\n" + " const vec4 bitShifts = vec4(1.0 / (256.0 * 256.0 * 256.0),\n" + "    1.0 / (256.0 * 256.0),\n" + "    1.0 / 256.0,\n" + "    1.0);\n" + "return dot(colour, bitShifts);\n}\n\n" + "// Passed in by the coffeegl depth shader. Reproduces from non linear gl_FragCoord.z to linear 0-1\n" + "float readDepth(in vec2 coord)  {\n" + "  vec4 colour = texture2D(uSamplerDepth, coord);\n" + "  float unpacked = unpack(colour);\n" + "  return (uCameraNear * unpacked) / ( uCameraFar - unpacked * (uCameraFar - uCameraNear) );\n" + "}\n#endif\n";

  function DepthMaterial() {
    DepthMaterial.__super__.constructor.call(this);
    this._override = true;
    this._uber0 = uber_depth_set(true, this._uber0);
    this._uber_defines = ['FRAGMENT_DEPTH', 'ADVANCED_CAMERA'];
  }

  return DepthMaterial;

})(Material);


/* ViewDepthMaterial */

ViewDepthMaterial = (function(superClass) {
  extend(ViewDepthMaterial, superClass);

  function ViewDepthMaterial(depth_texture) {
    this.depth_texture = depth_texture;
    ViewDepthMaterial.__super__.constructor.call(this);
    this._override = true;
    this._uber0 = uber_depth_read(true, this._uber0);
    this._uber_defines = ['FRAGMENT_DEPTH', 'ADVANCED_CAMERA', 'VERTEX_TEXTURE'];
  }

  ViewDepthMaterial.prototype._preDraw = function() {
    return this.depth_texture.bind();
  };

  ViewDepthMaterial.prototype._postDraw = function() {
    return this.depth_texture.unbind();
  };

  return ViewDepthMaterial;

})(Material);

module.exports = {
  DepthMaterial: DepthMaterial,
  ViewDepthMaterial: ViewDepthMaterial
};



},{"../gl/uber_shader_paths":16,"./material":27}],27:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

 * A material represents how a surface reacts to the lighting solution. 
 * Each material has a list of shaderChunks that contribute to the final shader
 */
var Contract, Material;

Contract = require('../gl/contract').Contract;

Material = (function() {
  function Material() {
    this.contract = new Contract();
    this._uber0 = 0;
    this._uber_defines = [];
    this._override = false;
  }

  Material.prototype._addToNode = function(node) {
    return node.material = this;
  };

  Material.prototype._preDraw = function() {
    return this;
  };

  Material.prototype._postDraw = function() {
    return this;
  };

  return Material;

})();

module.exports = {
  Material: Material
};



},{"../gl/contract":11}],28:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Material, PhongMaterial, RGB, RGBA, Texture, ref, ref1, uber_phong_diff_tex, uber_phong_emis_tex, uber_phong_mat, uber_phong_spec_tex, uber_vertex_colour,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require("../colour/colour"), RGB = ref.RGB, RGBA = ref.RGBA;

Material = require("./material").Material;

Texture = require("../gl/texture").Texture;

ref1 = require('../gl/uber_shader_paths'), uber_phong_diff_tex = ref1.uber_phong_diff_tex, uber_phong_spec_tex = ref1.uber_phong_spec_tex, uber_phong_emis_tex = ref1.uber_phong_emis_tex, uber_vertex_colour = ref1.uber_vertex_colour, uber_phong_mat = ref1.uber_phong_mat;


/* PhongMaterial */

PhongMaterial = (function(superClass) {
  extend(PhongMaterial, superClass);

  PhongMaterial.fragment_head = "#ifdef MAT_PHONG\nuniform vec3 uMaterialAmbientColour;\nuniform float uMaterialShininess;\n" + "\nuniform vec3 uMaterialDiffuseColour;\n" + "\nuniform sampler2D uSamplerDiffuse;\n" + "\nuniform vec3 uMaterialSpecularColour;\n" + "\nuniform sampler2D uSamplerSpecular;\n" + "\nuniform vec3 uMaterialEmissiveColour;\n" + "\nuniform sampler2D uSamplerEmissive;\n#endif\n";

  PhongMaterial.fragment_main = "#ifdef MAT_PHONG\nvec3 materialDiffuseColour = uMaterialDiffuseColour;\n" + "vec3 materialSpecularColour;\n" + "vec3 materialEmissiveColour;\n" + "#ifdef VERTEX_TEXTURE\n" + "if(bitcheck(uUber0,10)){ materialDiffuseColour = texture2D(uSamplerDiffuse, vTexCoord).rgb;}\n" + "if(bitcheck(uUber0,11)){ materialSpecularColour = texture2D(uSamplerSpecular, vTexCoord).rgb;}\n" + "if(bitcheck(uUber0,12)){ materialEmissiveColour = texture2D(uSamplerEmissive, vTexCoord).rgb;}\n" + "#endif\n" + "materialSpecularColour = uMaterialSpecularColour;\n" + "materialEmissiveColour = uMaterialEmissiveColour;\n" + "vec3 specularLightWeighting = vec3(0.0, 0.0, 0.0);\n" + "vec3 diffuseLightWeighting = vec3(0.0, 0.0, 0.0);\n" + "vec3 materialAmbientColour = uMaterialAmbientColour * uAmbientLightingColour;\n" + "gl_FragColor = vec4(materialAmbientColour, 1.0);\n" + "vec3 eyeDirection = normalize(-vPosition.xyz);\n" + "#ifdef LIGHTING_POINT\n" + "for (int i=0; i < LIGHTING_NUM_POINT_LIGHTS; i++) {\n" + "  vec3 lightDirection = normalize((uModelMatrix * vec4(uPointLightPos[i],1.0)).xyz - vPosition.xyz);\n" + "  vec3 reflectionDirection = reflect(-lightDirection, vTransformedNormal.xyz);\n" + "  float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);\n" + "  specularLightWeighting = specularLightWeighting + (uPointLightColour[i] * specularLightBrightness);\n" + "  float diffuseLightBrightness = max(dot(vTransformedNormal.xyz, lightDirection), 0.0);\n" + "  diffuseLightWeighting = diffuseLightWeighting + (uPointLightColour[i] * diffuseLightBrightness);\n" + "  gl_FragColor += vec4( materialDiffuseColour * diffuseLightWeighting " + "   + materialSpecularColour * specularLightWeighting" + "   + materialEmissiveColour," + "   0.0);\n" + "}\n#endif\n" + "#ifdef LIGHTING_SPOT\n" + "for (int i=0; i < LIGHTING_NUM_SPOT_LIGHTS; i++) {\n" + "  vec3 lightDirection = normalize((uModelMatrix * vec4(uSpotLightPos[i],1.0)).xyz - vPosition.xyz);\n" + "  float spotFactor = dot ( -lightDirection, uSpotLightDir[i]);\n" + "  if (spotFactor >= cos(uSpotLightAngle[i])){\n" + "    spotFactor = pow(spotFactor, uSpotLightExp[i]);\n" + "  } else {\n" + "    spotFactor = 0.0;\n" + "  }\n" + "  vec3 reflectionDirection = reflect(-lightDirection, vTransformedNormal.xyz);\n" + "  float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);\n" + "  specularLightWeighting = specularLightWeighting + (uSpotLightColour[i] * specularLightBrightness);\n" + "  float diffuseLightBrightness = max(dot(vTransformedNormal.xyz, lightDirection), 0.0);\n" + "  diffuseLightWeighting = diffuseLightWeighting + (uSpotLightColour[i] * diffuseLightBrightness);\n" + "  specularLightWeighting *= spotFactor;\n" + "  diffuseLightWeighting *= spotFactor; \n" + "  gl_FragColor += vec4( materialDiffuseColour * diffuseLightWeighting " + "   + materialSpecularColour * specularLightWeighting" + "   + materialEmissiveColour," + "   0.0);\n" + "}\n#endif\n" + "#endif\n";

  function PhongMaterial(ambient, diffuse, specular, shine, emissive) {
    var usingTexture;
    this.ambient = ambient;
    this.diffuse = diffuse;
    this.specular = specular;
    this.shine = shine;
    this.emissive = emissive;
    PhongMaterial.__super__.constructor.call(this);
    this._uber_defines = ['MAT_PHONG', 'VERTEX_NORMAL', 'ADVANCED_CAMERA'];
    this._preDrawCalls = [];
    if (this.ambient == null) {
      this.ambient = new RGB(0, 0, 0);
    }
    if (this.specular == null) {
      this.specular = new RGB(1.0, 1.0, 1.0);
    }
    if (this.shine == null) {
      this.shine = 20.0;
    }
    if (this.emissive == null) {
      this.emissive = new RGB(0.0, 0.0, 0.0);
    }
    this.contract.roles.uMaterialAmbientColour = "ambient";
    this.contract.roles.uMaterialShininess = "shine";
    usingTexture = false;
    if (this.diffuse == null) {
      this._uber_defines += ['VERTEX_COLOUR'];
      this._uber0 = uber_vertex_colour(true, this._uber0);
    } else {
      if (this.diffuse instanceof RGB || this.diffuse instanceof RGBA) {
        this.diffuse = new RGB(this.diffuse.r, this.diffuse.g, this.diffuse.b);
        this.contract.roles.uMaterialDiffuseColour = "diffuse";
        this._uber0 = uber_phong_diff_tex(false, this._uber0);
      } else if (this.diffuse instanceof Texture) {
        this.diffuse.contract.roles.uSamplerDiffuse = "unit";
        this._preDrawCalls.push((function(_this) {
          return function() {
            return _this.diffuse.bind();
          };
        })(this));
        usingTexture = true;
        this._uber0 = uber_phong_diff_tex(true, this._uber0);
      }
    }
    if (this.specular instanceof RGB) {
      this.contract.roles.uMaterialSpecularColour = "specular";
      this._uber0 = uber_phong_spec_tex(false, this._uber0);
    } else if (this.specular instanceof Texture) {
      this.specular.contract.roles.uSamplerSpecular = "unit";
      this._preDrawCalls.push((function(_this) {
        return function() {
          return _this.specular.bind();
        };
      })(this));
      usingTexture = true;
      this._uber0 = uber_phong_spec_tex(true, this._uber0);
    }
    if (this.emissive instanceof RGB) {
      this.contract.roles.uMaterialEmissiveColour = "emissive";
      this._uber0 = uber_phong_emis_tex(false, this._uber0);
    } else if (this.emissive instanceof Texture) {
      this.emissive.contract.roles.uSamplerEmissive = "unit";
      this._preDrawCalls.push((function(_this) {
        return function() {
          return _this.emissive.bind();
        };
      })(this));
      usingTexture = true;
      this._uber0 = uber_phong_spec_tex(true, this._uber0);
    }
    if (usingTexture) {
      this._uber_defines.push('VERTEX_TEXTURE');
    }
    this._uber0 = uber_phong_mat(true, this._uber0);
  }

  PhongMaterial.prototype._preDraw = function() {
    var func, i, len, ref2, results;
    ref2 = this._preDrawCalls;
    results = [];
    for (i = 0, len = ref2.length; i < len; i++) {
      func = ref2[i];
      results.push(func());
    }
    return results;
  };

  return PhongMaterial;

})(Material);

module.exports = {
  PhongMaterial: PhongMaterial
};



},{"../colour/colour":4,"../gl/texture":14,"../gl/uber_shader_paths":16,"./material":27}],29:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var BezierCubic3, CatmullPatch, CatmullRomSpline, CubicHermiteSpline, Curve, Curve2, CurveSlide, Matrix4, NURB, PI, Parabola, Vec2, Vec3, Vec4, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../math/math'), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix4 = ref.Matrix4, PI = ref.PI;


/* Curve2 */

Curve2 = (function() {
  function Curve2() {
    this;
  }

  Curve2.prototype.pointOnCurve = function(u) {
    return new Vec2(u, u);
  };

  Curve2.prototype.y = function(x) {
    return x;
  };

  Curve2.prototype.stepForU = function(x) {
    return x;
  };

  Curve2.prototype.xForStep = function(d) {
    return x;
  };

  Curve2.prototype.pointDistance = function(d) {
    var t;
    t = Math.sqrt(d * d / 2.0);
    return new Vec2(t, t);
  };

  Curve2.prototype.tangentOnCurve = function(x) {
    return new Vec2(1, 1);
  };

  Curve2.prototype.tangentDistance = function(d) {
    return new Vec2(1, 1);
  };

  return Curve2;

})();


/* Curve */

Curve = (function() {
  Curve.step_rez = 0.01;

  Curve.cache_table = true;

  Curve.cache_size = 200;

  function Curve() {
    var i, j, ref1, step, tu;
    this.length = 0;
    if (Curve.cache_table) {
      this._table = [];
      step = 1 / Curve.cache_size;
      for (i = j = 0, ref1 = Curve.cache_size - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        tu = i * step;
        this._table.push({
          u: tu,
          d: this.stepForU(tu)
        });
      }
      this.length = this._table[this._table.length - 1]["d"];
    } else {
      this.length = this.stepForU(1.0);
    }
    this;
  }

  Curve.prototype.pointOnCurve = function(u) {
    return new Vec3(0, 0, 0);
  };

  Curve.prototype.stepForU = function(u) {
    var curr_dist, curr_point, curr_u, du, prev_dist, prev_point, prev_u;
    if (u === 0) {
      return 0;
    }
    prev_dist = 0;
    curr_dist = 0;
    prev_u = 0;
    curr_u = 0;
    prev_point = this.pointOnCurve(0);
    curr_point = prev_point;
    while (curr_u < u) {
      prev_dist = curr_dist;
      prev_u = curr_u;
      prev_point.copyFrom(curr_point);
      curr_u += Curve.step_rez;
      curr_point = this.pointOnCurve(curr_u);
      curr_dist += curr_point.dist(prev_point);
    }
    du = (u - prev_u) / (curr_u - prev_u);
    return du * (curr_dist - prev_dist) + prev_dist;
  };

  Curve.prototype.uForStep = function(d) {
    var curr_dist, curr_point, curr_u, dd, prev_dist, prev_point, prev_u;
    if (d === 0) {
      return 0;
    }
    prev_dist = 0;
    curr_dist = 0;
    prev_u = 0;
    curr_u = 0;
    prev_point = this.pointOnCurve(0);
    curr_point = prev_point;
    while (curr_dist < d) {
      prev_dist = curr_dist;
      prev_u = curr_u;
      prev_point.copyFrom(curr_point);
      curr_u += Curve.step_rez;
      curr_point = this.pointOnCurve(curr_u);
      curr_dist += curr_point.dist(prev_point);
    }
    dd = d - prev_dist;
    if ((curr_dist - prev_dist) > 0) {
      dd = dd / (curr_dist - prev_dist);
    }
    return dd * (curr_u - prev_u) + prev_u;
  };

  Curve.prototype.pointDistance = function(d) {
    var curr_dist, curr_u, dd, j, len, prev_dist, prev_u, ref1, step;
    if (d === 0) {
      return this.pointOnCurve(0);
    }
    if (d >= this.length) {
      return this.pointOnCurve(1.0);
    }
    if (this._table) {
      curr_dist = 0;
      curr_u = 0;
      prev_dist = 0;
      prev_u = 0;
      ref1 = this._table;
      for (j = 0, len = ref1.length; j < len; j++) {
        step = ref1[j];
        prev_u = curr_u;
        prev_dist = curr_dist;
        curr_u = step.u;
        curr_dist = step.d;
        if (step.d >= d) {
          break;
        }
      }
      dd = d - prev_dist;
      if ((curr_dist - prev_dist) > 0) {
        dd = dd / (curr_dist - prev_dist);
      }
      return this.pointOnCurve(dd * (curr_u - prev_u) + prev_u);
    } else {
      return this.pointOnCurve(this.uForStep(d));
    }
  };

  Curve.prototype.tangentOnCurve = function(u) {
    var v0, v1;
    v0 = this.pointOnCurve(u);
    v1 = this.pointOnCurve(u + Curve.step_rez / 2);
    if (u >= 1.0) {
      v1 = v0;
      v0 = v1 - Curve.step_rez / 2;
    }
    return Vec3.sub(v1, v0).normalize();
  };

  Curve.prototype.tangentDistance = function(d) {
    var v0, v1;
    v0 = this.pointDistance(d);
    v1 = this.pointDistance(d + Curve.step_rez / 2);
    if (d >= this.length) {
      v1 = v0;
      v0 = v1 - Curve.step_rez / 2;
    }
    return Vec3.sub(v1, v0).normalize();
  };

  return Curve;

})();


/*BezierCubic3 */

BezierCubic3 = (function(superClass) {
  extend(BezierCubic3, superClass);

  function BezierCubic3(v01, v11, v21, v31) {
    this.v0 = v01;
    this.v1 = v11;
    this.v2 = v21;
    this.v3 = v31;
    BezierCubic3.__super__.constructor.call(this);
  }

  BezierCubic3.prototype._B1 = function(t) {
    return t * t * t;
  };

  BezierCubic3.prototype._B2 = function(t) {
    return 3 * t * t * (1 - t);
  };

  BezierCubic3.prototype._B3 = function(t) {
    return 3 * t * (1 - t) * (1 - t);
  };

  BezierCubic3.prototype._B4 = function(t) {
    return (1 - t) * (1 - t) * (1 - t);
  };

  BezierCubic3.prototype.pointOnCurve = function(u) {
    return new Vec3(v0.x * this._B1(u) + v1.x * this._B2(u) + v2.x * this._B3(u) + v3.x * this._B4(u), v0.y * this._B1(u) + v1.y * this._B2(u) + v2.y * this._B3(u) + v3.y * this._B4(u), v0.z * this._B1(u) + v1.z * this._B2(u) + v2.z * this._B3(u) + v3.z * this._B4(u));
  };

  return BezierCubic3;

})(Curve);

Parabola = (function() {
  function Parabola(f1, a1, b1, c4) {
    this.f = f1;
    this.a = a1;
    this.b = b1;
    this.c = c4;
    this;
  }

  Parabola.prototype.sample = function(x) {
    var a, as, b, bs, c, cs, h, k, p, t0, t1, t2, t3, u, us, v, vs, xs, y, y0, y1;
    if (this.a === 0 && this.b !== 0) {
      h = this.f.x;
      k = (this.f.y + this.c) / 2;
      p = this.f.y - k;
      a = 1 / (4 * p);
      b = -h / (2 * p);
      c = (h * h) / (4 * p) + k;
      y = a * x * x + b * x + c;
      return [y, y];
    } else if (this.b === 0 && this.a !== 0) {
      h = (this.f.x + this.c) / 2;
      k = this.f.y;
      p = this.f.x - h;
      y0 = Math.sqrt(4 * p * (x - h)) + k;
      y1 = k - Math.sqrt(4 * p * (x - h));
      return [y0, y1];
    } else if (this.a !== 0 && this.b !== 0) {
      as = this.a * this.a;
      bs = this.b * this.b;
      cs = this.c * this.c;
      u = this.f.x;
      us = u * u;
      v = this.f.y;
      vs = v * v;
      xs = x * x;
      t0 = -2 * as * v - 2 * this.a * this.b * x - 2 * bs * v - 2 * this.b * this.c;
      t1 = Math.sqrt((t0 * t0) - 4 * as * (as * us - 2 * as * u * x + as * vs - 2 * this.a * this.c * x + bs * us - 2 * bs * u * x + bs * vs + bs * xs - cs));
      t2 = 2 * as * v + 2 * this.a * this.b * x + 2 * bs * v + 2 * this.b * this.c;
      t3 = 2 * as;
      return [(-t1 + t2) / t3, (t1 + t2) / t3];
    } else {
      PXLError("Malformed ");
      return [0, 0];
    }
  };

  Parabola.prototype.lineCrossing = function(e, f, g) {
    var a, as, b, bs, c, cs, es, fs, gs, h, hs, k, ks, t0, t1, t2, t3, x0, x1;
    a = this.a;
    b = this.b;
    c = this.c;
    as = this.a * this.a;
    bs = this.b * this.b;
    cs = this.c * this.c;
    fs = f * f;
    es = e * e;
    gs = g * g;
    h = this.f.x;
    k = this.f.y;
    hs = h * h;
    ks = k * k;
    console.log(a, b, c, f, e, g, h, k);
    t0 = 2 * as * e * f * k + 2 * as * e * g - 2 * as * fs * h + 2 * a * b * f * g - 2 * a * c * fs + 2 * bs * e * f * k - 2 * bs * fs * h + 2 * b * c * e * f;
    console.log("t0", t0);
    t1 = 4 * (as * es + 2 * a * b * e * f + bs * fs) * (as * fs * hs + as * fs * ks + 2 * as * f * g * k + as * gs + bs * fs * hs + bs * fs * ks + 2 * bs * f * g * k + 2 * b * c * f * g - cs * fs);
    console.log("t1", t1);
    t2 = 2 * as * e * f * k - 2 * as * e * g + 2 * as * fs * h - 2 * a * b * f * g + 2 * a * c * fs - 2 * bs * e * f * k + 2 * bs * fs * h - 2 * b * c * e * f;
    console.log("t2", t2);
    t3 = 2 * (as * es + 2 * a * b * e * f + bs * fs);
    console.log("t3", t3);
    x0 = (-Math.sqrt(t0 * t0 - t1) - t2) / t3;
    x1 = (Math.sqrt(t0 * t0 - t1) - t2) / t3;
    return [new Vec2(x0, (-e * x0 - g) / f), new Vec2(x1, (-e * x1 - g) / f)];
  };

  return Parabola;

})();


/*CatmullPatch */

CatmullPatch = (function() {
  function CatmullPatch(points) {
    var b, bt, j, l, len, len1, len2, m, p, t;
    if (points.length !== 16) {
      PXLError("Catmull Patch needs 16 points");
      return;
    }
    b = new Matrix4([-0.5, 1, -0.5, 0, 1.5, -2.5, 0, 1, -1.5, 2, 0.5, 0, 0.5, -0.5, 0, 0]);
    t = [];
    for (j = 0, len = points.length; j < len; j++) {
      p = points[j];
      t.push(p.x);
    }
    this.px = new Matrix4(t);
    t = [];
    for (l = 0, len1 = points.length; l < len1; l++) {
      p = points[l];
      t.push(p.y);
    }
    this.py = new Matrix4(t);
    t = [];
    for (m = 0, len2 = points.length; m < len2; m++) {
      p = points[m];
      t.push(p.z);
    }
    this.pz = new Matrix4(t);
    bt = Matrix4.transpose(b);
    this.px = Matrix4.mult(b, this.px).mult(bt);
    this.py = Matrix4.mult(b, this.py).mult(bt);
    this.pz = Matrix4.mult(b, this.pz).mult(bt);
  }

  CatmullPatch.prototype.sample = function(v) {
    var u, u1, u2, u3, um, w, w1, w2, w3, x, y, z;
    u1 = v.x;
    u2 = u1 * u1;
    u3 = u2 * u1;
    w1 = v.y;
    w2 = w1 * w1;
    w3 = w2 * w1;
    u = new Vec4(u3, u2, u1, 1);
    w = new Vec4(w3, w2, w1, 1);
    um = Matrix4.multVec(this.px, w);
    x = u.x * um.x + u.y * um.y + u.z * um.z + u.w * um.w;
    um = Matrix4.multVec(this.py, w);
    y = u.x * um.x + u.y * um.y + u.z * um.z + u.w * um.w;
    um = Matrix4.multVec(this.pz, w);
    z = u.x * um.x + u.y * um.y + u.z * um.z + u.w * um.w;
    return new Vec3(x, y, z);
  };

  return CatmullPatch;

})();


/*CubicHermiteSpline */

CubicHermiteSpline = (function(superClass) {
  extend(CubicHermiteSpline, superClass);

  function CubicHermiteSpline(p0, p1, m01, m11) {
    this.p0 = p0;
    this.p1 = p1;
    this.m0 = m01;
    this.m1 = m11;
    CubicHermiteSpline.__super__.constructor.call(this);
    this;
  }

  CubicHermiteSpline.prototype.pointOnCurve = function(u) {
    var c0, c1, c2, c3, t2, t3;
    t3 = u * u * u;
    t2 = u * u;
    c0 = this.p0.copy().multScalar(2 * t3 - 3 * t2 + 1);
    c1 = this.m0.copy().multScalar(t3 - 2 * t2 + u);
    c2 = this.p1.copy().multScalar(-2 * t3 + 3 * t2);
    c3 = this.m1.copy().multScalar(t3 - t2);
    return c0.add(c1).add(c2).add(c3);
  };

  return CubicHermiteSpline;

})(Curve);


/*CatmullRomSpline */

CatmullRomSpline = (function(superClass) {
  extend(CatmullRomSpline, superClass);

  function CatmullRomSpline(points) {
    var i, j, m0, m1, ref1, segments;
    if (points.length < 4) {
      PXLError("Catmull-Rom Spline needs at least 4 points");
      return;
    }
    segments = points.length - 3;
    this.splines = [];
    for (i = j = 0, ref1 = segments - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
      m0 = points[i + 2].copy().sub(points[i]);
      m1 = points[i + 3].copy().sub(points[i + 1]);
      this.splines.push(new CubicHermiteSpline(points[i + 1], points[i + 2], m0, m1));
    }
    CatmullRomSpline.__super__.constructor.call(this);
    this;
  }

  CatmullRomSpline.prototype.pointOnCurve = function(u) {
    var segment;
    segment = Math.floor(u * this.splines.length);
    if (u >= 1) {
      return this.splines[this.splines.length - 1].pointOnCurve(1.0);
    } else if (u <= 0) {
      return this.splines[0].pointOnCurve(0);
    } else {
      return this.splines[segment].pointOnCurve((this.splines.length * u) - segment);
    }
  };

  return CatmullRomSpline;

})(Curve);


/* CurveSlide */

CurveSlide = (function() {
  function CurveSlide(curve, normal) {
    this.curve = curve;
    this.normal = normal;
    this.reset(this.normal, 0);
  }

  CurveSlide.prototype.reset = function(normal, d) {
    this.normal = normal;
    if (d == null) {
      d = 0;
    }
    this.d = d;
    this.pos = this.curve.pointDistance(this.d);
    this.tangent = this.curve.tangentDistance(this.d);
    this.bp = Vec3.cross(this.normal, this.tangent);
    this.np = this.normal;
    return this.binormal = this.bp;
  };

  CurveSlide.prototype.slide = function(dd) {
    this.d += dd;
    if (this.d > this.curve.length) {
      this.reset(this.normal, 0);
    }
    this.pos = this.curve.pointDistance(this.d);
    this.tangent = this.curve.tangentDistance(this.d);
    this.bp = this.binormal;
    this.normal = Vec3.cross(this.bp, this.tangent);
    return this.binormal = Vec3.cross(this.tangent, this.normal);
  };

  return CurveSlide;

})();


/* NURB */

NURB = (function(superClass) {
  extend(NURB, superClass);

  function NURB() {
    this;
  }

  return NURB;

})(Curve);

module.exports = {
  Curve2: Curve2,
  BezierCubic3: BezierCubic3,
  CubicHermiteSpline: CubicHermiteSpline,
  CatmullRomSpline: CatmullRomSpline,
  Parabola: Parabola,
  CatmullPatch: CatmullPatch,
  CurveSlide: CurveSlide
};



},{"../math/math":30}],30:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


http://www.flipcode.com/documents/matrfaq.html
http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/index.htm
 */
var EPSILON, Edge2, HalfEdge2, Matrix2, Matrix3, Matrix4, PI, PXLWarning, Quaternion, Vec2, Vec3, Vec4, degToRad, glMatrixArrayType, radToDeg,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PXLWarning = require('../util/log').PXLWarning;

if (typeof (typeof Float32Array !== "undefined" && Float32Array !== null)) {
  glMatrixArrayType = Float32Array;
} else if (typeof (typeof WebGLFloatArray !== "undefined" && WebGLFloatArray !== null)) {
  glMatrixArrayType = WebGLFloatArray;
} else {
  glMatrixArrayType = Array;
}

EPSILON = 4.37114e-05;

PI = 3.14159;

({
  sinx_over_x: function(x) {
    if (x * x < 1.19209290e-07) {
      return 1;
    } else {
      return Math.sin(x) / x;
    }
  }
});

radToDeg = function(a) {
  return a * 57.2957795;
};

degToRad = function(a) {
  return a * 0.017453292523928;
};


/* Vec2 */

Vec2 = (function() {
  Vec2.prototype.DIM = 2;

  Vec2.sub = function(a, b) {
    return a.clone()["sub"](b);
  };

  Vec2.add = function(a, b) {
    return a.clone()["add"](b);
  };

  Vec2.div = function(a, b) {
    return a.clone()["div"](b);
  };

  Vec2.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Vec2.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Vec2.normalize = function(a) {
    return a.clone()["normalize"]();
  };

  Vec2.dot = function(a, b) {
    return a.dot(b);
  };

  function Vec2(x, y) {
    var ref;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    ref = [x, y], this.x = ref[0], this.y = ref[1];
  }

  Vec2.prototype.clone = function() {
    return new Vec2(this.x, this.y);
  };

  Vec2.prototype.copy = function(a) {
    this.x = a.x;
    this.y = a.y;
    return this;
  };

  Vec2.prototype.length = function() {
    return Math.sqrt(this.lengthSquared());
  };

  Vec2.prototype.lengthSquared = function() {
    return this.x * this.x + this.y * this.y;
  };

  Vec2.prototype.normalize = function() {
    var m;
    m = this.length();
    if (m > 0) {
      this.multScalar(1.0 / m);
    }
    return this;
  };

  Vec2.prototype.sub = function(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  };

  Vec2.prototype.add = function(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  };

  Vec2.prototype.dv = function(v) {
    return new Vec2(Math.abs(this.x - v.x)(Math.abs(this.y - v.y)));
  };

  Vec2.prototype.dist = function(v) {
    return Vec2.sub(this, v).length();
  };

  Vec2.prototype.distSquared = function(v) {
    return Vec2.sub(this, v).lengthSquared();
  };

  Vec2.prototype.div = function(n) {
    var ref;
    ref = [this.x / n.x, this.y / n.y], this.x = ref[0], this.y = ref[1];
    return this;
  };

  Vec2.prototype.mult = function(v) {
    var ref;
    ref = [this.x * v.x, this.y * v.y], this.x = ref[0], this.y = ref[1];
    return this;
  };

  Vec2.prototype.multScalar = function(n) {
    var ref;
    ref = [this.x * n, this.y * n], this.x = ref[0], this.y = ref[1];
    return this;
  };

  Vec2.prototype.equals = function(v) {
    return this.x === v.x && this.y === v.y;
  };

  Vec2.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y;
  };

  Vec2.prototype.invalid = function() {
    return (this.x === Infinity) || isNaN(this.x) || this.y === Infinity || isNaN(this.y);
  };

  Vec2.prototype.flatten = function() {
    return [this.x, this.y];
  };

  Vec2.prototype.set = function(x1, y1) {
    this.x = x1;
    this.y = y1;
    return this;
  };

  return Vec2;

})();


/* Edge2 */

Edge2 = (function() {
  function Edge2(start, end1) {
    this.start = start;
    this.end = end1;
    this;
  }

  Edge2.prototype.equation = function() {
    return [this.start.y - this.end.y, this.end.x - this.start.x, this.start.x * this.end.y - this.end.x * this.start.y];
  };

  Edge2.prototype.sample = function(x) {
    var a, b, c, ref;
    ref = this.equation(), a = ref[0], b = ref[1], c = ref[2];
    return (-a * x - c) / b;
  };

  Edge2.prototype.length = function() {
    return this.end.dist(this.start);
  };

  return Edge2;

})();


/* HalfEdge2 */

HalfEdge2 = (function(superClass) {
  extend(HalfEdge2, superClass);

  function HalfEdge2(start, end1, face0, face1) {
    this.start = start;
    this.end = end1;
    this.face0 = face0;
    this.face1 = face1;
    HalfEdge2.__super__.constructor.call(this, this.start, this.end);
    this;
  }

  return HalfEdge2;

})(Edge2);


/* Vec3 */

Vec3 = (function() {
  Vec3.prototype.DIM = 3;

  Vec3.sub = function(a, b) {
    return a.clone()["sub"](b);
  };

  Vec3.add = function(a, b) {
    return a.clone()["add"](b);
  };

  Vec3.cross = function(a, b) {
    return a.clone()["cross"](b);
  };

  Vec3.div = function(a, b) {
    return a.clone()["div"](b);
  };

  Vec3.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Vec3.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Vec3.normalize = function(a) {
    return a.clone()["normalize"]();
  };

  Vec3.dot = function(a, b) {
    return a.dot(b);
  };

  function Vec3(x, y, z) {
    var ref;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    ref = [x, y, z], this.x = ref[0], this.y = ref[1], this.z = ref[2];
  }

  Vec3.prototype.clone = function() {
    return new Vec3(this.x, this.y, this.z);
  };

  Vec3.prototype.copy = function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    return this;
  };

  Vec3.prototype.xy = function() {
    return new Vec3(this.x, this.y);
  };

  Vec3.prototype.length = function() {
    return Math.sqrt(this.lengthSquared());
  };

  Vec3.prototype.lengthSquared = function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };

  Vec3.prototype.normalize = function() {
    var m;
    m = this.length();
    if (m > 0) {
      this.multScalar(1.0 / m);
    }
    return this;
  };

  Vec3.prototype.sub = function(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  };

  Vec3.prototype.add = function(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  };

  Vec3.prototype.cross = function(v) {
    var x, y, z;
    x = this.y * v.z - this.z * v.y;
    y = this.z * v.x - this.x * v.z;
    z = this.x * v.y - this.y * v.x;
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };

  Vec3.prototype.dv = function(v) {
    this.x = Math.abs(this.x - v.x);
    this.y = Math.abs(this.y - v.y);
    this.z = Math.abs(this.z - v.z);
    return this;
  };

  Vec3.prototype.dist = function(v) {
    return Vec3.sub(this, v).length();
  };

  Vec3.prototype.distSquared = function(v) {
    return Vec3.sub(this, v).lengthSquared();
  };

  Vec3.prototype.div = function(n) {
    var ref;
    ref = [this.x / n.x, this.y / n.y, this.z / n.z], this.x = ref[0], this.y = ref[1], this.z = ref[2];
    return this;
  };

  Vec3.prototype.mult = function(v) {
    var ref;
    ref = [this.x * v.x, this.y * v.y, this.z * v.z], this.x = ref[0], this.y = ref[1], this.z = ref[2];
    return this;
  };

  Vec3.prototype.multScalar = function(n) {
    var ref;
    ref = [this.x * n, this.y * n, this.z * n], this.x = ref[0], this.y = ref[1], this.z = ref[2];
    return this;
  };

  Vec3.prototype.equals = function(v) {
    return this.x === v.x && this.y === v.y && this.z === v.z;
  };

  Vec3.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  };

  Vec3.prototype.invalid = function() {
    return (this.x === Infinity) || isNaN(this.x) || this.y === Infinity || isNaN(this.y) || this.z === Infinity || isNaN(this.z);
  };

  Vec3.prototype.flatten = function() {
    return [this.x, this.y, this.z];
  };

  Vec3.prototype.set = function(x1, y1, z1) {
    this.x = x1;
    this.y = y1;
    this.z = z1;
    return this;
  };

  return Vec3;

})();


/* Vec4 */

Vec4 = (function() {
  Vec4.prototype.DIM = 4;

  Vec4.sub = function(a, b) {
    return a.clone()["sub"](b);
  };

  Vec4.add = function(a, b) {
    return a.clone()["add"](b);
  };

  Vec4.cross = function(a, b) {
    return a.clone()["cross"](b);
  };

  Vec4.div = function(a, b) {
    return a.clone()["div"](b);
  };

  Vec4.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Vec4.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Vec4.normalize = function(a) {
    return a.clone()["normalize"]();
  };

  Vec4.dot = function(a, b) {
    return a.dot(b);
  };

  function Vec4(x, y, z, w) {
    var ref;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    if (w == null) {
      w = 1;
    }
    ref = [x, y, z, w], this.x = ref[0], this.y = ref[1], this.z = ref[2], this.w = ref[3];
  }

  Vec4.prototype.clone = function() {
    return new Vec4(this.x, this.y, this.z, this.w);
  };

  Vec4.prototype.copy = function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    this.w = a.w;
    return this;
  };

  Vec4.prototype.xyz = function() {
    return new Vec3(this.x, this.y, this.z);
  };

  Vec4.prototype.length = function() {
    return Math.sqrt(this.lengthSquared());
  };

  Vec4.prototype.lengthSquared = function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  };

  Vec4.prototype.normalize = function() {
    var m;
    m = this.length();
    if (m > 0) {
      this.multScalar(1.0 / m);
    }
    return this;
  };

  Vec4.prototype.sub = function(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    this.w -= v.w;
    return this;
  };

  Vec4.prototype.equals = function(v) {
    return this.x === v.x && this.y === v.y && this.z === v.z && this.w === v.w;
  };

  Vec4.prototype.add = function(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    this.w += v.w;
    return this;
  };

  Vec4.prototype.cross = function(v) {
    var x, y, z;
    x = this.y * v.z - this.z * v.y;
    y = this.z * v.x - this.x * v.z;
    z = this.x * v.y - this.y * v.x;
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };

  Vec4.prototype.dv = function(v) {
    this.x = Math.abs(this.x - v.x);
    this.y = Math.abs(this.y - v.y);
    this.z = Math.abs(this.z - v.z);
    this.w = Math.abs(this.w - v.w);
    return this;
  };

  Vec4.prototype.dist = function(v) {
    return Vec4.sub(this, v).length();
  };

  Vec4.prototype.distSquared = function(v) {
    return Vec4.sub(this, v).lengthSquared();
  };

  Vec4.prototype.div = function(n) {
    var ref;
    ref = [this.x / n.x, this.y / n.y, this.z / n.z, this.w / n.w], this.x = ref[0], this.y = ref[1], this.z = ref[2], this.w = ref[3];
    return this;
  };

  Vec4.prototype.mult = function(v) {
    var ref;
    ref = [this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w], this.x = ref[0], this.y = ref[1], this.z = ref[2], this.w = ref[3];
    return this;
  };

  Vec4.prototype.multScalar = function(n) {
    var ref;
    ref = [this.x * n, this.y * n, this.z * n, this.w * n], this.x = ref[0], this.y = ref[1], this.z = ref[2], this.w = ref[3];
    return this;
  };

  Vec4.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
  };

  Vec4.prototype.invalid = function() {
    return (this.x === Infinity) || isNaN(this.x) || this.y === Infinity || isNaN(this.y) || this.z === Infinity || isNaN(this.z) || this.w === Infinity || isNaN(this.w);
  };

  Vec4.prototype.flatten = function() {
    return [this.x, this.y, this.z, this.w];
  };

  Vec4.prototype.set = function(x1, y1, z1, w1) {
    this.x = x1;
    this.y = y1;
    this.z = z1;
    this.w = w1;
    return this;
  };

  return Vec4;

})();


/* Matrix2 */

Matrix2 = (function() {
  Matrix2.prototype.DIM = 2;

  Matrix2.addScalar = function(a, b) {
    return a.clone()["addScalar"](b);
  };

  Matrix2.subScalar = function(a, b) {
    return a.clone()["subScalar"](b);
  };

  Matrix2.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Matrix2.divScalar = function(a, b) {
    return a.clone()["divScalar"](b);
  };

  Matrix2.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Matrix2.multVec = function(m, v) {
    var tv;
    tv = v.clone();
    m.multVec(tv);
    return tv;
  };

  Matrix2.transpose = function(a) {
    return new Matrix2([a.a[0], a.a[2], a.a[1], a.a[3]]);
  };

  function Matrix2(a) {
    if (a == null) {
      a = [1, 0, 0, 1];
    }
    if (a instanceof Matrix2) {
      this.a = a.a;
    } else {
      this.a = new glMatrixArrayType(a);
    }
  }

  Matrix2.prototype.clone = function() {
    return new Matrix2(this.a);
  };

  Matrix2.prototype.copy = function(a) {
    var i, l;
    for (i = l = 0; l <= 3; i = ++l) {
      this.a[i] = a.a[i];
    }
    return this;
  };

  Matrix2.prototype.multScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num * n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix2.prototype.addScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num + n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix2.prototype.subScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num - n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix2.prototype.divScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num / n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix2.prototype.identity = function() {
    this.a.set([1, 0, 0, 1]);
    return this;
  };

  Matrix2.prototype.flatten = function() {
    return this.a;
  };

  Matrix2.prototype.at = function(r, c) {
    return this.a[c * 2 + r];
  };

  Matrix2.prototype.mult = function(m) {
    var a;
    a = new Matrix2();
    a.a[0] = this.a[0] * m.a[0] + this.a[2] * m.a[1];
    a.a[1] = this.a[1] * m.a[0] + this.a[3] * m.a[1];
    a.a[2] = this.a[0] * m.a[2] + this.a[2] * m.a[3];
    a.a[3] = this.a[1] * m.a[2] + this.a[3] * m.a[3];
    this.copy(a);
    return this;
  };

  Matrix2.prototype.multVec = function(v) {
    var x, y;
    if ((v.z != null) || (v.w != null)) {
      PXLWarning("Mismatched vector and matrix dimensions");
      return;
    }
    x = this.a[0] * v.x + this.a[2] * v.y;
    y = this.a[1] * v.x + this.a[3] * v.y;
    v.x = x;
    v.y = y;
    return this;
  };

  Matrix2.prototype.getCol = function(c) {
    c = c * Matrix2.DIM;
    return Vec2(this.a[c + 0](this.a[c + 1]));
  };

  Matrix2.prototype.getRow = function(r) {
    return Vec2(this.a[r + 0](this.a[r + 2]));
  };

  Matrix2.prototype.transpose = function() {
    this.copy(new Matrix2([this.a[0], a[2], this.a[1], this.a[3]]));
    return this;
  };

  Matrix2.prototype.print = function() {
    console.log(this.a[0] + "," + this.a[2]);
    console.log(this.a[1] + "," + this.a[3]);
    return this;
  };

  Matrix2.prototype.rotate = function(a) {
    var c, r, s;
    r = new Matrix2();
    s = Math.sin(a);
    c = Math.cos(a);
    r.a[0] = c;
    r.a[1] = s;
    r.a[2] = -s;
    r.a[3] = c;
    this.mult(r);
    return this;
  };

  Matrix2.prototype.scale = function(v) {
    var r;
    r = new Matrix3();
    r.a[0] = v.x;
    r.a[4] = v.y;
    r.a[8] = v.z;
    this.mult(r);
    return this;
  };

  return Matrix2;

})();


/* Matrix3 */

Matrix3 = (function() {
  Matrix3.prototype.DIM = 3;

  Matrix3.addScalar = function(a, b) {
    return a.clone()["addScalar"](b);
  };

  Matrix3.subScalar = function(a, b) {
    return a.clone()["subScalar"](b);
  };

  Matrix3.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Matrix3.divScalar = function(a, b) {
    return a.clone()["divScalar"](b);
  };

  Matrix3.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Matrix3.invert = function(a) {
    return a["_invert"]();
  };

  Matrix3.multVec = function(m, v) {
    var tv;
    tv = v.clone();
    m.multVec(tv);
    return tv;
  };

  Matrix3.transpose = function(a) {
    return new Matrix3([a.a.a.a[0], a.a[3], a.a[6], a.a[1], a.a[4], a.a[7], a.a[2], a.a[5], a.a[8]]);
  };

  function Matrix3(a) {
    if (a == null) {
      a = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
    }
    if (a instanceof Matrix3) {
      this.a = a.a;
    } else {
      this.a = new glMatrixArrayType(a);
    }
  }

  Matrix3.prototype.clone = function() {
    return new Matrix3(this.a);
  };

  Matrix3.prototype.copy = function(a) {
    var i, l;
    for (i = l = 0; l <= 8; i = ++l) {
      this.a[i] = a.a[i];
    }
    return this;
  };

  Matrix3.prototype.multScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num * n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix3.prototype.addScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num + n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix3.prototype.subScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num - n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix3.prototype.divScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num / n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix3.prototype.identity = function() {
    this.a.set([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]);
    return this;
  };

  Matrix3.prototype.at = function(r, c) {
    return this.a[c * 3 + r];
  };

  Matrix3.prototype.mult = function(m) {
    var a;
    a = new Matrix3();
    a.a[0] = this.a[0] * m.a[0] + this.a[3] * m.a[1] + this.a[6] * m.a[2];
    a.a[1] = this.a[1] * m.a[0] + this.a[4] * m.a[1] + this.a[7] * m.a[2];
    a.a[2] = this.a[2] * m.a[0] + this.a[5] * m.a[1] + this.a[8] * m.a[2];
    a.a[3] = this.a[0] * m.a[3] + this.a[3] * m.a[4] + this.a[6] * m.a[5];
    a.a[4] = this.a[1] * m.a[3] + this.a[4] * m.a[4] + this.a[7] * m.a[5];
    a.a[5] = this.a[2] * m.a[3] + this.a[5] * m.a[4] + this.a[8] * m.a[5];
    a.a[6] = this.a[0] * m.a[6] + this.a[3] * m.a[7] + this.a[6] * m.a[8];
    a.a[7] = this.a[1] * m.a[6] + this.a[4] * m.a[7] + this.a[7] * m.a[8];
    a.a[8] = this.a[2] * m.a[6] + this.a[5] * m.a[7] + this.a[8] * m.a[8];
    this.copy(a);
    return this;
  };

  Matrix3.prototype.flatten = function() {
    return this.a;
  };

  Matrix3.prototype.multVec = function(v) {
    var x, y, z;
    if ((v.z == null) || (v.w != null)) {
      PXLWarning("Mismatched vector and matrix dimensions");
      return;
    }
    x = this.a[0] * v.x + this.a[3] * v.y + this.a[6] * v.z;
    y = this.a[1] * v.x + this.a[4] * v.y + this.a[7] * v.z;
    z = this.a[2] * v.x + this.a[5] * v.y + this.a[8] * v.z;
    v.x = x;
    v.y = y;
    v.z = z;
    return this;
  };

  Matrix3.prototype.getCol = function(c) {
    c = c * Matrix3.DIM;
    return Vec3(this.a[c + 0](this.a[c + 1](this.a[c + 2])));
  };

  Matrix3.prototype.getRow = function(r) {
    return Vec3(this.a[r + 0](this.a[r + 3](this.a[r + 6])));
  };

  Matrix3.prototype._invert = function() {
    var det, epsilon, inv, invDet;
    inv = new Matrix3();
    epsilon = 4.37114e-05;
    inv.a[0] = this.a[4] * this.a[8] - this.a[5] * this.a[7];
    inv.a[1] = this.a[2] * this.a[7] - this.a[1] * this.a[8];
    inv.a[2] = this.a[1] * this.a[5] - this.a[2] * this.a[4];
    inv.a[3] = this.a[5] * this.a[6] - this.a[3] * this.a[8];
    inv.a[4] = this.a[0] * this.a[8] - this.a[2] * this.a[6];
    inv.a[5] = this.a[2] * this.a[3] - this.a[0] * this.a[5];
    inv.a[6] = this.a[3] * this.a[7] - this.a[4] * this.a[6];
    inv.a[7] = this.a[1] * this.a[6] - this.a[0] * this.a[7];
    inv.a[8] = this.a[0] * this.a[4] - this.a[1] * this.a[3];
    det = this.a[0] * inv.a[0] + this.a[1] * inv.a[3] + this.a[2] * inv.a[6];
    if (Math.abs(det) > epsilon) {
      invDet = 1.0 / det;
      inv.multScalar(invDet);
    }
    return inv;
  };

  Matrix3.prototype.invert = function() {
    this.copy(this._invert());
    return this;
  };

  Matrix3.prototype.transpose = function() {
    this.copy(new Matrix3([this.a[0], this.a[3], this.a[6], this.a[1], this.a[4], this.a[7], this.a[2], this.a[5], this.a[8]]));
    return this;
  };

  Matrix3.prototype.print = function() {
    console.log(this.a[0] + "," + this.a[3] + "," + this.a[6]);
    console.log(this.a[1] + "," + this.a[4] + "," + this.a[7]);
    return console.log(this.a[2] + "," + this.a[5] + "," + this.a[8]);
  };

  Matrix3.prototype.rotate = function(v, a) {
    var c, r, s;
    r = new Matrix3();
    s = Math.sin(a);
    c = Math.cos(a);
    v.normalize();
    r.a[0] = v.x * v.x * (1 - c) + c;
    r.a[1] = v.x * v.y * (1 - c) + v.z * s;
    r.a[2] = v.x * v.z * (1 - c) - v.y * s;
    r.a[3] = v.x * v.y * (1 - c) - v.z * s;
    r.a[4] = v.y * v.y * (1 - c) + c;
    r.a[5] = v.y * v.z * (1 - c) + v.x * s;
    r.a[6] = v.x * v.z * (1 - c) + v.y * s;
    r.a[7] = v.y * v.z * (1 - c) - v.x * s;
    r.a[8] = v.z * v.z * (1 - c) + c;
    this.mult(r);
    return this;
  };

  Matrix3.prototype.scale = function(v) {
    var r;
    r = new Matrix3();
    r.a[0] = v.x;
    r.a[4] = v.y;
    r.a[8] = v.z;
    this.mult(r);
    return this;
  };

  return Matrix3;

})();


/*Matrix4 */

Matrix4 = (function() {
  Matrix4.prototype.DIM = 4;

  Matrix4.addScalar = function(a, b) {
    return a.clone()["addScalar"](b);
  };

  Matrix4.subScalar = function(a, b) {
    return a.clone()["subScalar"](b);
  };

  Matrix4.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Matrix4.divScalar = function(a, b) {
    return a.clone()["divScalar"](b);
  };

  Matrix4.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Matrix4.invert = function(a) {
    return a["_invert"]();
  };

  Matrix4.transpose = function(a) {
    return new Matrix4([a.a[0], a.a[4], a.a[8], a.a[12], a.a[1], a.a[5], a.a[9], a.a[13], a.a[2], a.a[6], a.a[10], a.a[14], a.a[3], a.a[7], a.a[11], a.a[15]]);
  };

  Matrix4.multVec = function(m, v) {
    var tv;
    tv = v.clone();
    m.multVec(tv);
    return tv;
  };

  function Matrix4(a) {
    if (a == null) {
      a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }
    if (a instanceof Matrix4) {
      this.a = a.a;
    } else {
      this.a = new glMatrixArrayType(a);
    }
  }

  Matrix4.prototype.clone = function() {
    return new Matrix4(this.a);
  };

  Matrix4.prototype.copy = function(a) {
    var i, l;
    for (i = l = 0; l <= 15; i = ++l) {
      this.a[i] = a.a[i];
    }
    return this;
  };

  Matrix4.prototype.multScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num * n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix4.prototype.addScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num + n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix4.prototype.subScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num - n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix4.prototype.divScalar = function(n) {
    var num;
    this.a = (function() {
      var l, len1, ref, results;
      ref = this.a;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        num = ref[l];
        results.push(num / n);
      }
      return results;
    }).call(this);
    return this;
  };

  Matrix4.prototype.identity = function() {
    this.a.set([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
    return this;
  };

  Matrix4.prototype.at = function(r, c) {
    return this.a[c * 4 + r];
  };

  Matrix4.prototype.getMatrix3 = function() {
    return new Matrix3([this.a[0], this.a[1], this.a[2], this.a[4], this.a[5], this.a[6], this.a[8], this.a[9], this.a[10]]);
  };

  Matrix4.prototype.mult = function(m) {
    var a;
    a = new Matrix4();
    a.a[0] = this.a[0] * m.a[0] + this.a[4] * m.a[1] + this.a[8] * m.a[2] + this.a[12] * m.a[3];
    a.a[1] = this.a[1] * m.a[0] + this.a[5] * m.a[1] + this.a[9] * m.a[2] + this.a[13] * m.a[3];
    a.a[2] = this.a[2] * m.a[0] + this.a[6] * m.a[1] + this.a[10] * m.a[2] + this.a[14] * m.a[3];
    a.a[3] = this.a[3] * m.a[0] + this.a[7] * m.a[1] + this.a[11] * m.a[2] + this.a[15] * m.a[3];
    a.a[4] = this.a[0] * m.a[4] + this.a[4] * m.a[5] + this.a[8] * m.a[6] + this.a[12] * m.a[7];
    a.a[5] = this.a[1] * m.a[4] + this.a[5] * m.a[5] + this.a[9] * m.a[6] + this.a[13] * m.a[7];
    a.a[6] = this.a[2] * m.a[4] + this.a[6] * m.a[5] + this.a[10] * m.a[6] + this.a[14] * m.a[7];
    a.a[7] = this.a[3] * m.a[4] + this.a[7] * m.a[5] + this.a[11] * m.a[6] + this.a[15] * m.a[7];
    a.a[8] = this.a[0] * m.a[8] + this.a[4] * m.a[9] + this.a[8] * m.a[10] + this.a[12] * m.a[11];
    a.a[9] = this.a[1] * m.a[8] + this.a[5] * m.a[9] + this.a[9] * m.a[10] + this.a[13] * m.a[11];
    a.a[10] = this.a[2] * m.a[8] + this.a[6] * m.a[9] + this.a[10] * m.a[10] + this.a[14] * m.a[11];
    a.a[11] = this.a[3] * m.a[8] + this.a[7] * m.a[9] + this.a[11] * m.a[10] + this.a[15] * m.a[11];
    a.a[12] = this.a[0] * m.a[12] + this.a[4] * m.a[13] + this.a[8] * m.a[14] + this.a[12] * m.a[15];
    a.a[13] = this.a[1] * m.a[12] + this.a[5] * m.a[13] + this.a[9] * m.a[14] + this.a[13] * m.a[15];
    a.a[14] = this.a[2] * m.a[12] + this.a[6] * m.a[13] + this.a[10] * m.a[14] + this.a[14] * m.a[15];
    a.a[15] = this.a[3] * m.a[12] + this.a[7] * m.a[13] + this.a[11] * m.a[14] + this.a[15] * m.a[15];
    this.copy(a);
    return this;
  };

  Matrix4.prototype.flatten = function() {
    return this.a;
  };

  Matrix4.prototype.multVec = function(v) {
    var w, x, y, z;
    if (v.z == null) {
      PXLWarning("Mismatched vector and matrix dimensions");
      return;
    }
    if (v.w == null) {
      x = this.a[0] * v.x + this.a[4] * v.y + this.a[8] * v.z + this.a[12];
      y = this.a[1] * v.x + this.a[5] * v.y + this.a[9] * v.z + this.a[13];
      z = this.a[2] * v.x + this.a[6] * v.y + this.a[10] * v.z + this.a[14];
      w = this.a[3] * v.x + this.a[7] * v.y + this.a[11] * v.z + this.a[15];
      v.x = x / w;
      v.y = y / w;
      v.z = z / w;
    } else {
      x = this.a[0] * v.x + this.a[4] * v.y + this.a[8] * v.z + this.a[12] * v.w;
      y = this.a[1] * v.x + this.a[5] * v.y + this.a[9] * v.z + this.a[13] * v.w;
      z = this.a[2] * v.x + this.a[6] * v.y + this.a[10] * v.z + this.a[14] * v.w;
      w = this.a[3] * v.x + this.a[7] * v.y + this.a[11] * v.z + this.a[15] * v.w;
      v.x = x;
      v.y = y;
      v.z = z;
      v.w = w;
    }
    return this;
  };

  Matrix4.prototype.at = function(r, c) {
    return this.a[c * 4 + r];
  };

  Matrix4.prototype.getCol = function(c) {
    c = c * 4;
    return Vec4(this.a[c + 0](this.a[c + 1](this.a[c + 2](this.a[c + 3]))));
  };

  Matrix4.prototype.getRow = function(r) {
    return Vec4(this.a[r + 0](this.a[r + 4](this.a[r + 8](this.a[r + 12]))));
  };

  Matrix4.prototype._invert = function() {
    var a0, a1, a2, a3, a4, a5, b0, b1, b2, b3, b4, b5, det, epsilon, inv, invDet;
    inv = new Matrix4();
    epsilon = 4.37114e-05;
    a0 = this.a[0] * this.a[5] - this.a[1] * this.a[4];
    a1 = this.a[0] * this.a[6] - this.a[2] * this.a[4];
    a2 = this.a[0] * this.a[7] - this.a[3] * this.a[4];
    a3 = this.a[1] * this.a[6] - this.a[2] * this.a[5];
    a4 = this.a[1] * this.a[7] - this.a[3] * this.a[5];
    a5 = this.a[2] * this.a[7] - this.a[3] * this.a[6];
    b0 = this.a[8] * this.a[13] - this.a[9] * this.a[12];
    b1 = this.a[8] * this.a[14] - this.a[10] * this.a[12];
    b2 = this.a[8] * this.a[15] - this.a[11] * this.a[12];
    b3 = this.a[9] * this.a[14] - this.a[10] * this.a[13];
    b4 = this.a[9] * this.a[15] - this.a[11] * this.a[13];
    b5 = this.a[10] * this.a[15] - this.a[11] * this.a[14];
    det = a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;
    if (Math.abs(det) > epsilon) {
      inv.a[0] = +this.a[5] * b5 - this.a[6] * b4 + this.a[7] * b3;
      inv.a[4] = -this.a[4] * b5 + this.a[6] * b2 - this.a[7] * b1;
      inv.a[8] = +this.a[4] * b4 - this.a[5] * b2 + this.a[7] * b0;
      inv.a[12] = -this.a[4] * b3 + this.a[5] * b1 - this.a[6] * b0;
      inv.a[1] = -this.a[1] * b5 + this.a[2] * b4 - this.a[3] * b3;
      inv.a[5] = +this.a[0] * b5 - this.a[2] * b2 + this.a[3] * b1;
      inv.a[9] = -this.a[0] * b4 + this.a[1] * b2 - this.a[3] * b0;
      inv.a[13] = +this.a[0] * b3 - this.a[1] * b1 + this.a[2] * b0;
      inv.a[2] = +this.a[13] * a5 - this.a[14] * a4 + this.a[15] * a3;
      inv.a[6] = -this.a[12] * a5 + this.a[14] * a2 - this.a[15] * a1;
      inv.a[10] = +this.a[12] * a4 - this.a[13] * a2 + this.a[15] * a0;
      inv.a[14] = -this.a[12] * a3 + this.a[13] * a1 - this.a[14] * a0;
      inv.a[3] = -this.a[9] * a5 + this.a[10] * a4 - this.a[11] * a3;
      inv.a[7] = +this.a[8] * a5 - this.a[10] * a2 + this.a[11] * a1;
      inv.a[11] = -this.a[8] * a4 + this.a[9] * a2 - this.a[11] * a0;
      inv.a[15] = +this.a[8] * a3 - this.a[9] * a1 + this.a[10] * a0;
    }
    invDet = 1.0 / det;
    inv.multScalar(invDet);
    return inv;
  };

  Matrix4.prototype.invert = function() {
    this.copy(this._invert());
    return this;
  };

  Matrix4.prototype.transpose = function() {
    this.copy(new Matrix4([this.a[0], this.a[4], this.a[8], this.a[12], this.a[1], this.a[5], this.a[9], this.a[13], this.a[2], this.a[6], this.a[10], this.a[14], this.a[3], this.a[7], this.a[11], this.a[15]]));
    return this;
  };

  Matrix4.prototype.translate = function(v) {
    var r;
    if (v.DIM != null) {
      if (v.DIM !== 3) {
        PXLWarning("Mismatched vector and matrix dimensions");
        return this;
      }
    }
    r = new Matrix4();
    r.a[12] = v.x;
    r.a[13] = v.y;
    r.a[14] = v.z;
    this.mult(r);
    return this;
  };

  Matrix4.prototype.setPos = function(v) {
    if (v.x != null) {
      this.a[12] = v.x;
    }
    if (v.y != null) {
      this.a[13] = v.y;
    }
    if (v.z != null) {
      this.a[14] = v.z;
    }
    return this;
  };

  Matrix4.prototype.getPos = function() {
    return new Vec3(this.a[12], this.a[13], this.a[14]);
  };

  Matrix4.prototype.print = function() {
    console.log(this.a[0] + "," + this.a[4] + "," + this.a[8] + "," + this.a[12]);
    console.log(this.a[1] + "," + this.a[5] + "," + this.a[9] + "," + this.a[13]);
    console.log(this.a[2] + "," + this.a[6] + "," + this.a[10] + "," + this.a[14]);
    console.log(this.a[3] + "," + this.a[7] + "," + this.a[11] + "," + this.a[15]);
    return this;
  };

  Matrix4.prototype.lookAt = function(eye, look, up) {
    var f, m, s, t, u, w;
    f = Vec3.sub(look, eye);
    f.normalize();
    u = up.clone();
    u.normalize();
    s = Vec3.cross(f, u);
    w = Vec3.cross(s, f);
    m = new Matrix4([s.x, u.x, -f.x, 0, s.y, u.y, -f.y, 0, s.z, u.z, -f.z, 0, 0, 0, 0, 1]);
    t = new Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -eye.x, -eye.y, -eye.z, 1]);
    m.mult(t);
    this.copy(m);
    return this;
  };

  Matrix4.prototype.makePerspective = function(fovy, aspect, znear, zfar) {
    var xmax, xmin, ymax, ymin;
    ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    ymin = -ymax;
    xmin = ymin * aspect;
    xmax = ymax * aspect;
    this.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
    return this;
  };

  Matrix4.prototype.makeFrustum = function(left, right, bottom, top, znear, zfar) {
    var a, b, c, d, x, y;
    x = 2 * znear / (right - left);
    y = 2 * znear / (top - bottom);
    a = (right + left) / (right - left);
    b = (top + bottom) / (top - bottom);
    c = -(zfar + znear) / (zfar - znear);
    d = -2 * zfar * znear / (zfar - znear);
    this.a = new glMatrixArrayType([x, 0, 0, 0, 0, y, 0, 0, a, b, c, -1, 0, 0, d, 0]);
    return this;
  };

  Matrix4.prototype.makeOrtho = function(left, right, bottom, top, znear, zfar) {
    var tx, ty, tz;
    tx = -(right + left) / (right - left);
    ty = -(top + bottom) / (top - bottom);
    tz = -(zfar + znear) / (zfar - znear);
    this.a = new glMatrixArrayType([2 / (right - left), 0, 0, 0, 0, 2 / (top - bottom), 0, 0, 0, 0, -2 / (zfar - znear), 0, tx, ty, tz, 1]);
    return this;
  };

  Matrix4.prototype.rotate = function(v, a) {
    var c, r, s;
    r = new Matrix4();
    s = Math.sin(a);
    c = Math.cos(a);
    v.normalize();
    r.a[0] = v.x * v.x * (1 - c) + c;
    r.a[1] = v.x * v.y * (1 - c) + v.z * s;
    r.a[2] = v.x * v.z * (1 - c) - v.y * s;
    r.a[4] = v.x * v.y * (1 - c) - v.z * s;
    r.a[5] = v.y * v.y * (1 - c) + c;
    r.a[6] = v.y * v.z * (1 - c) + v.x * s;
    r.a[8] = v.x * v.z * (1 - c) + v.y * s;
    r.a[9] = v.y * v.z * (1 - c) - v.x * s;
    r.a[10] = v.z * v.z * (1 - c) + c;
    this.mult(r);
    return this;
  };

  Matrix4.prototype.scale = function(v) {
    var r;
    r = new Matrix4();
    r.a[0] = v.x;
    r.a[5] = v.y;
    r.a[10] = v.z;
    this.mult(r);
    return this;
  };

  return Matrix4;

})();


/*Quaternion */

Quaternion = (function() {
  Quaternion.addScalar = function(a, b) {
    return a.clone()["addScalar"](b);
  };

  Quaternion.subScalar = function(a, b) {
    return a.clone()["subScalar"](b);
  };

  Quaternion.multScalar = function(a, b) {
    return a.clone()["multScalar"](b);
  };

  Quaternion.divScalar = function(a, b) {
    return a.clone()["divScalar"](b);
  };

  Quaternion.conjugate = function(a) {
    return a.clone()["conjugate"]();
  };

  Quaternion.mult = function(a, b) {
    return a.clone()["mult"](b);
  };

  Quaternion.invert = function(a) {
    return a.clone()["invert"]();
  };

  Quaternion.transVec3 = function(q, v) {
    var tv;
    tv = v.clone();
    q.transVec3(tv);
    return tv;
  };

  Quaternion.fromRotations = function(x, y, z) {
    var tv;
    tv = new Quaternion();
    tv.fromRotations(x, y, z);
    return tv;
  };

  Quaternion.fromTo = function(f, t) {
    var tv;
    tv = new Quaternion();
    tv.fromTo(f, t);
    return tv;
  };

  function Quaternion(x1, y1, z1, w1) {
    this.x = x1;
    this.y = y1;
    this.z = z1;
    this.w = w1;
    if (this.x == null) {
      this.x = 0;
    }
    if (this.y == null) {
      this.y = 0;
    }
    if (this.z == null) {
      this.z = 0;
    }
    if (this.w == null) {
      this.w = 1;
    }
  }

  Quaternion.prototype.clone = function() {
    return new Quaternion(this.x, this.y, this.z, this.w);
  };

  Quaternion.prototype.copy = function(q) {
    this.x = q.x;
    this.y = q.y;
    this.z = q.z;
    this.w = q.w;
    return this;
  };

  Quaternion.prototype.axis = function() {
    var ca, invlen;
    ca = this.w;
    invlen = 1.0 / Math.sqrt(1.0 - ca * ca);
    this.x *= invlen;
    this.y *= invlen;
    return this.z *= invlen;
  };

  Quaternion.prototype.angle = function() {
    var ca;
    ca = this.w;
    return Math.acos(ca) * 2;
  };

  Quaternion.prototype.pitch = function() {
    return Math.atan2(2 * (this.y * this.z + this.w * this.x), this.w * this.w - this.x * this.x - this.y * this.y + this.z * this.z);
  };

  Quaternion.prototype.yaw = function() {
    return Math.sin(-2 * (this.x * this.z - this.w * this.y));
  };

  Quaternion.prototype.roll = function() {
    return Math.atan2(2 * (this.x * this.y + this.w * this.z), this.w * this.w + this.x * this.x - this.y * this.y - this.z * this.z);
  };

  Quaternion.prototype.dot = function(a) {
    return this.w * a.w + this.x * a.x + this.y * a.y + this.z * a.z;
  };

  Quaternion.prototype.length = function() {
    return Math.sqrt(this.lengthSquared());
  };

  Quaternion.prototype.lengthSquared = function() {
    return this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z;
  };

  Quaternion.prototype.conjugate = function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  };

  Quaternion.prototype.invert = function() {
    var q;
    q = Quaternion.conjugate(this);
    q = q.multScalar(1.0 / this.lengthSquared());
    this.x = q.x;
    this.y = q.y;
    this.z = q.z;
    this.w = q.w;
    return this;
  };

  Quaternion.prototype.add = function(q) {
    this.w += q.w;
    this.x += q.x;
    this.y += q.y;
    this.z += q.z;
    return this;
  };

  Quaternion.prototype.sub = function(q) {
    this.w -= q.w;
    this.x -= q.x;
    this.y -= q.y;
    this.z -= q.z;
    return this;
  };

  Quaternion.prototype.multiply = function(q) {
    return this.mult(q);
  };

  Quaternion.prototype.mult = function(q) {
    var w, x, y, z;
    w = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;
    x = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;
    y = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;
    z = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;
    this.w = w;
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };

  Quaternion.prototype.multScalar = function(s) {
    this.w *= s;
    this.x *= s;
    this.y *= s;
    this.z *= s;
    return this;
  };

  Quaternion.prototype.transVec3 = function(v) {
    var qc, vf, vp;
    qc = Quaternion.conjugate(this);
    vp = new Quaternion(v.x, v.y, v.z, 0);
    vf = qc.mult(vp).mult(this);
    v.x = vf.x;
    v.y = vf.y;
    v.z = vf.z;
    return this;
  };

  Quaternion.prototype.normalize = function() {
    var len;
    len = 1.0 / this.length();
    this.w *= len;
    this.x *= len;
    this.y *= len;
    this.z *= len;
    return this;
  };

  Quaternion.prototype.log = function() {
    var k, sintheta, t, theta;
    t = 1.0;
    if (this.w < t) {
      t = this.w;
    }
    theta = Math.acos(t);
    if (theta === 0) {
      return new Quaternion(this.x, this.y, this.z, 0);
    }
    sintheta = Math.sin(theta);
    k = theta / sintheta;
    if (Math.abs(sintheta) < 1 && Math.abs(theta) >= 3.402823466e+38 * Math.abs(sintheta)) {
      k = 1;
    }
    return new Quaternion(this.x * k, this.y * k, this.z * k, 0);
  };

  Quaternion.prototype.exp = function() {
    var costheta, k, sintheta, theta;
    theta = this.v.length();
    sintheta = sin(theta);
    k = sintheta / theta;
    if (Math.abs(theta) < 1 && Math.abs(sintheta) >= 3.402823466e+38 * Math.abs(theta)) {
      k = 1;
    }
    costheta = Math.cos(theta);
    return new Quaternion(this.x * k, this.y * k, this.z * k, costheta);
  };

  Quaternion.prototype.fromTo = function(f, t) {
    var axis;
    axis = Vec3.cross(f, t);
    this.w = f.dot(t);
    this.x = axis.x;
    this.y = axis.y;
    this.z = axis.z;
    this.normalize();
    this.w += 1.0;
    if (this.w <= EPSILON) {
      if (f.z * f.z > f.x * f.x) {
        this.w = 0.0;
        this.x = 0;
        this.y = f.z;
        this.z = -f.y;
      } else {
        this.w = 0.0;
        this.x = f.y;
        this.y = -f.x;
        this.z = 0.0;
      }
      this.normalize();
    }
    return this;
  };

  Quaternion.prototype.fromAxisAngle = function(a, r) {
    var v;
    this.w = Math.cos(r / 2);
    v = new Vec3(a.x, a.y, a.z);
    v.normalize().multScalar(Math.sin(r / 2));
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  };

  Quaternion.prototype.fromRotations = function(x, y, z) {
    var cx, cy, cz, sx, sy, sz;
    x *= 0.5;
    y *= 0.5;
    z *= 0.5;
    cx = Math.cos(x);
    sx = Math.sin(x);
    cy = Math.cos(y);
    sy = Math.sin(y);
    cz = Math.cos(z);
    sz = Math.sin(z);
    this.w = cx * cy * cz - sx * sy * sz;
    this.x = sx * cy * cx + cx * sy * sz;
    this.y = cx * sy * cz - sx * cy * sz;
    this.z = cx * cy * sz + sx * sy * cx;
    return this;
  };

  Quaternion.prototype.getAxisAngle = function() {
    var ca, invlen, r;
    ca = this.w;
    r = Math.acos(ca) * 2;
    invlen = 1.0 / Math.sqrt(1.0 - ca * ca);
    return [new Vec3(this.x * invlen, this.y * invlen, this.z * invlen), r];
  };

  Quaternion.prototype.getMatrix4 = function() {
    var wx, wy, wz, xs, xx, xy, xz, ys, yy, yz, zs, zz;
    xs = this.x + this.x;
    ys = this.y + this.y;
    zs = this.z + this.z;
    wx = this.w * xs;
    wy = this.w * ys;
    wz = this.w * zs;
    xx = this.x * xs;
    xy = this.x * ys;
    xz = this.x * zs;
    yy = this.y * ys;
    yz = this.y * zs;
    zz = this.z * zs;
    return new Matrix4([1.0 - (yy + zz), xy + wz, xz - wy, 0, xy - wz, 1.0 - (xx + zz), yz + wx, 0, xz + wy, yz - wx, 1.0 - (xx + yy), 0, 0, 0, 0, 1.0]);
  };

  Quaternion.prototype.getMatrix3 = function() {
    var wx, wy, wz, xs, xx, xy, xz, ys, yy, yz, zs, zz;
    xs = this.x + this.x;
    ys = this.y + this.y;
    zs = this.z + this.z;
    wx = this.w * xs;
    wy = this.w * ys;
    wz = this.w * zs;
    xx = this.x * xs;
    xy = this.x * ys;
    xz = this.x * zs;
    yy = this.y * ys;
    yz = this.y * zs;
    zz = this.z * zs;
    return new Matrix3([1.0 - (yy + zz), xy + wz, xz - wy, xy - wz, 1.0 - (xx + zz), yz + wx, xz + wy, yz - wx, 1.0 - (xx + yy)]);
  };

  Quaternion.prototype.lerp = function(t, end) {
    var costheta, result;
    costheta = end.dot();
    result = Quaternion.multScalar(end, t);
    if (costheta >= EPSILON) {
      result.add(result.multScalar(1.0 - t));
    } else {
      result.add(result.multScalar(t - 1.0));
    }
    return result;
  };

  Quaternion.prototype.slerpShortestUnenforced = function(t, end) {
    var a, d, e, lengthD, lengthS, q, s, st;
    d = this.clone();
    d.sub(end);
    lengthD = Math.sqrt(this.dot(end));
    st = this.clone();
    st.add(end);
    lengthS = Math.sqrt(st.dot(st));
    a = 2 * Math.atan2(lengthD, lengthS);
    s = 1 - t;
    q = this.clone();
    q.multScalar(sinx_over_x(s * a) / sinx_over_x(a) * s);
    e = end.clone();
    e.multScalar(sinx_over_x(t * a) / sinx_over_x(a) * t);
    q.add(e);
    q.normalize();
    return q;
  };

  Quaternion.prototype.slerp = function(t, end) {
    var cosTheta, e, endInterp, q, recipSinTheta, startInterp, theta;
    cosTheta = this.dot(end);
    if (cosTheta >= EPSILON) {
      if (1.0 - cosTheta > EPSILON) {
        theta = Math.acos(cosTheta);
        recipSinTheta = 1.0 / Math.sin(theta);
        startInterp = Math.sin((1.0 - t) * theta) * recipSinTheta;
        endInterp = Math.sin(t * theta) * recipSinTheta;
      } else {
        startInterp = 1.0 - t;
        endInterp = t;
      }
    } else {
      if (1.0 + cosTheta > EPSILON) {
        theta = Math.acos(-cosTheta);
        recipSinTheta = 1.0 / Math.sin(theta);
        startInterp = Math.sin((t - 1.0) * theta) * recipSinTheta;
        endInterp = Math.sin(t * theta) * recipSinTheta;
      } else {
        startInterp = t(-1.0);
        endInterp = t;
      }
    }
    q = this.clone();
    q.mult(startInterp);
    e = end.clone();
    e.mult(endInterp);
    q.add(e);
    return q;
  };

  Quaternion.prototype.fromMatrix4 = function(m) {
    var a, b, i, j, k, recip, s, trace;
    trace = m.a[0] + m.a[5] + m.a[10];
    if (trace > 0.0) {
      s = Math.sqrt(trace + 1.0);
      this.w = s * 0.5;
      recip = 0.5 / s;
      this.x = (m.at(2, 1) - m.at(1, 2)) * recip;
      this.y = (m.at(0, 2) - m.at(2, 0)) * recip;
      this.z = (m.at(1, 0) - m.at(0, 1)) * recip;
    } else {
      i = 0;
      if (m.at(1, 1) > m.at(0, 0)) {
        i = 1;
      }
      if (m.at(2, 2) > m.at(i, i)) {
        i = 2;
      }
      j = (i + 1) % 3;
      k = (j + 1) % 3;
      s = Math.sqrt(m.at(i, i) - m.at(j, j) - m.at(k, k) + 1.0);
      if (i === 0) {
        this.x = 0.5 * s;
      } else if (i === 1) {
        this.y = 0.5 * s;
      } else {
        this.z = 0.5 * s;
      }
      recip = 0.5 / s;
      this.w = (m.at(k, j) - m.at(j, k)) * recip;
      a = (m.at(j, i) + m.at(i, j)) * recip;
      b = (m.at(k, i) + m.at(i, k)) * recip;
      if (j === 0) {
        this.x = a;
      } else if (j === 1) {
        this.y = a;
      } else {
        this.z = a;
      }
      if (k === 0) {
        this.x = b;
      } else if (k === 1) {
        this.y = b;
      } else {
        this.z = b;
      }
    }
    return this;
  };

  return Quaternion;

})();

module.exports = {
  Vec2: Vec2,
  Vec3: Vec3,
  Vec4: Vec4,
  Matrix2: Matrix2,
  Matrix3: Matrix3,
  Matrix4: Matrix4,
  radToDeg: radToDeg,
  degToRad: degToRad,
  Quaternion: Quaternion,
  PI: PI,
  EPSILON: EPSILON,
  Edge2: Edge2
};



},{"../util/log":35}],31:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 * TODO - this file is sort of a catch all. Could do to be improved
 */
var EPSILON, Matrix4, PI, Vec2, Vec3, Vec4, Vertex, _precomputeTangent, boundingBox, closestPointLine, edge2Bisector, lerp, medialAxis2D, precomputeTangent, rayCircleIntersection, rayPlaneIntersect, ref, screenNodeHitTest;

ref = require('../math/math'), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4, Matrix4 = ref.Matrix4, PI = ref.PI, EPSILON = ref.EPSILON;

Vertex = require('../geometry/primitive').Vertex;


/* rayPlaneIntersect */

rayPlaneIntersect = function(plane_point, plane_normal, line_point, line_dir) {
  var den, num;
  num = Vec3.dot(plane_normal, Vec3.sub(plane_point, line_point));
  den = Vec3.dot(plane_normal, line_dir);
  return num / den;
};


/* screenNodeHitTest */

screenNodeHitTest = function(sx, sy, camera, node) {
  var _comp, _rec, results;
  results = [];
  _rec = (function(_this) {
    return function(node, matrix) {
      var a, alpha, ap, b, bp, c, child, cp, dist, e1, e2, f, i, indexer, j, k, len, num_tris, q, r, ray, ref1, ref2, ref3, results1, s, t, u, v;
      ray = camera.castRay(sx, sy);
      matrix = Matrix4.mult(matrix, node.matrix);
      if (node.geometry != null) {
        indexer = node.geometry.getTrisIndexer();
        num_tris = node.geometry.getNumTris();
        for (i = j = 0, ref1 = num_tris - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
          ref2 = indexer(i), a = ref2[0], b = ref2[1], c = ref2[2];
          if (a instanceof Vertex) {
            a = a.p;
            b = b.p;
            c = c.p;
          }
          if (a.equals(b) || b.equals(c) || a.equals(c)) {
            continue;
          }
          matrix.multVec(a).multVec(b).multVec(c);
          e1 = Vec3.sub(b, a);
          e2 = Vec3.sub(c, a);
          q = ray.xyz().cross(e2);
          alpha = e1.dot(q);
          if (alpha > -EPSILON && alpha < EPSILON) {
            continue;
          }
          f = 1.0 / alpha;
          s = Vec3.sub(camera.pos, a);
          u = s.dot(q) * f;
          if (u < 0.0) {
            continue;
          }
          r = Vec3.cross(s, e1);
          v = ray.xyz().dot(r) * f;
          if (v < 0.0 || (u + v) > 1.0) {
            continue;
          }
          t = e2.dot(q) * f;
          ap = a.copy().multScalar(1 - u - v);
          bp = b.copy().multScalar(u);
          cp = c.copy().multScalar(v);
          ap.add(bp).add(cp);
          dist = Vec3.sub(ap, camera.pos).length();
          results.push({
            "pos": ap,
            "node": node,
            "index": i,
            "dist": dist
          });
        }
      }
      ref3 = node.children;
      results1 = [];
      for (k = 0, len = ref3.length; k < len; k++) {
        child = ref3[k];
        results1.push(_rec(child, matrix));
      }
      return results1;
    };
  })(this);
  _rec(node, new Matrix4());
  _comp = function(a, b) {
    if (a.dist < b.dist) {
      return -1;
    }
    if (a.dist > b.dist) {
      return 1;
    }
    return 0;
  };
  results.sort(_comp);
  return results;
};


/* precomputeTangent */

precomputeTangent = function(a, b, c, na, nb, nc, ta, tb, tc) {
  return [_precomputeTangent(a, b, c, na, ta, tb, tc), _precomputeTangent(b, c, a, nb, tb, tc, ta), _precomputeTangent(c, a, b, nc, tc, ta, tb)];
};

_precomputeTangent = function(a, b, c, n, ta, tb, tc) {
  var alpha, binormal, binormal2, d, e, f, g, tangent, tx, ty, tz, ux, uy, uz;
  d = Vec3.sub(b, a);
  e = Vec3.sub(c, a);
  f = Vec2.sub(tb, ta);
  g = Vec2.sub(tc, ta);
  alpha = 1 / ((f.x * g.y) - (f.y * g.x));
  tx = alpha * (g.y * d.x + -f.y * e.x);
  ty = alpha * (g.y * d.y + -f.y * e.y);
  tz = alpha * (g.y * d.z + -f.y * e.z);
  ux = alpha * (-g.x * d.x + f.x * e.x);
  uy = alpha * (-g.x * d.y + f.x * e.y);
  uz = alpha * (-g.x * d.z + f.x * e.z);
  tangent = new Vec3(tx, ty, tz);
  binormal = new Vec3(ux, uy, uz);
  tangent = tangent.sub(Vec3.multScalar(n, Vec3.dot(n, tangent)));
  binormal2 = binormal.sub(Vec3.multScalar(n, Vec3.dot(n, binormal)));
  binormal2 = binormal2.sub(Vec3.multScalar(tangent, Vec3.dot(tangent, binormal)));
  tangent.normalize();
  binormal2.normalize();
  return tangent;
};


/* rayCircleIntersection */

rayCircleIntersection = function(ray_start, ray_dir, circle_centre, circle_radius) {
  var a, b, c, d2, discriminant, f, r, t, t1, t2, v;
  f = PXL.Vec2.sub(ray_start, circle_centre);
  r = circle_radius;
  a = ray_dir.dot(ray_dir);
  b = 2 * f.dot(ray_dir);
  c = f.dot(f) - r * r;
  v = new PXL.Vec2();
  discriminant = b * b - 4 * a * c;
  if (discriminant !== 0) {
    discriminant = Math.sqrt(discriminant);
    t1 = (-b - discriminant) / (2 * a);
    t2 = (-b + discriminant) / (2 * a);
    t = t2;
    if (t2 < 0) {
      t = t1;
    }
    v.copyFrom(ray_start);
    d2 = PXL.Vec2.multScalar(ray_dir, t);
    v.add(d2);
  }
  return v;
};

boundingBox = function(points) {
  var j, k, len, len1, max, min, point;
  if (points.length) {
    if (points[0]._DIM === 3) {
      min = new PXL.Vec3(Infinity, Infinity, Infinity);
      max = new PXL.Vec3(-Infinity, -Infinity, -Infinity);
      for (j = 0, len = points.length; j < len; j++) {
        point = points[j];
        if (point.x < min.x) {
          min.x = point.x;
        }
        if (point.y < min.y) {
          min.y = point.y;
        }
        if (point.x > max.x) {
          max.x = point.x;
        }
        if (point.y > max.y) {
          max.y = point.y;
        }
      }
    } else if (points[1]._DIM === 2) {
      min = new PXL.Vec2(Infinity, Infinity);
      max = new PXL.Vec2(-Infinity, -Infinity);
      for (k = 0, len1 = points.length; k < len1; k++) {
        point = points[k];
        if (point.x < min.x) {
          min.x = point.x;
        }
        if (point.y < min.y) {
          min.y = point.y;
        }
        if (point.z < min.z) {
          min.z = point.z;
        }
        if (point.x > max.x) {
          max.x = point.x;
        }
        if (point.y > max.y) {
          max.y = point.y;
        }
        if (point.z > max.z) {
          max.z = point.z;
        }
      }
    }
  }
  return [min, max];
};

edge2Bisector = function(edge0, edge1) {
  var e0, e1;
  if (edge0.start === edge1.start) {
    e0 = Vec2.normalize(Vec2.sub(edge0.end, edge0.start));
    e1 = Vec2.normalize(Vec2.sub(edge1.end, edge1.start));
    return new new Edge2(edge0.start, Vec2.add(edge0.start, Vec2.normalize(e0.add(e1))));
  } else if (edge0.end === edge1.start) {
    e0 = Vec2.normalize(Vec2.sub(edge0.start, edge0.end));
    e1 = Vec2.normalize(Vec2.sub(edge1.end, edge1.start));
    return new Edge2(edge0.end, Vec2.add(edge0.end, Vec2.normalize(e0.add(e1))));
  } else if (edge0.start === edge1.end) {
    e0 = Vec2.normalize(Vec2.sub(edge0.end, edge0.start));
    e1 = Vec2.normalize(Vec2.sub(edge1.start, edge1.end));
    return new Edge2(edge0.start, Vec2.add(edge0.start, Vec2.normalize(e0.add(e1))));
  } else if (edge0.end === edge1.end) {
    e0 = Vec2.normalize(Vec2.sub(edge0.start, edge0.end));
    e1 = Vec2.normalize(Vec2.sub(edge1.start, edge1.end));
    return new Edge2(edge0.end, Vec2.add(edge0.end, Vec2.normalize(e0.add(e1))));
  } else {
    return PXLError("edge2Bisector - edges must have a common Vec2");
  }
};


/* LERP */

lerp = function(bottom, top, value) {
  return (value - bottom) / (top - bottom);
};


/* closestPointLine */

closestPointLine = function(a, b, p) {
  var c, cross0, cross1, dir, m, perp, v0, v1, xp, yp;
  dir = Vec2.sub(b, a);
  perp = new Vec3(dir.y, -dir.x, 0);
  v0 = Vec3.sub(new Vec3(b.x, b.y), new Vec3(a.x, a.y));
  v1 = Vec3.sub(new Vec3(a.x, a.y), new Vec3(b.x, b.y));
  cross0 = Vec3.cross(perp, v0);
  cross1 = Vec3.cross(perp, v1);
  if (cross0.z < 0) {
    return b;
  } else if (cross1.z > 0) {
    return a;
  }
  dir = Vec2.sub(b, a);
  if (dir.x === 0) {
    return new Vec3(0, p.y);
  }
  if (dir.y === 0) {
    return new Vec3(p.x, 0);
  }
  m = dir.y / dir.x;
  c = a.y - (m * a.x);
  xp = (m * p.y + p.x - m * c) / (m * m + 1);
  yp = m * xp + c;
  return new Vec2(xp, yp);
};


/* medialAxis2D */

medialAxis2D = function(polygon, top, left, bottom, right) {
  var chain, chains, cross, current_chain, e0, e1, edges, element, idx, j, k, l, len, n, ne, o, p, pe, ref1, ref2, ref3, v0, v1, voronoi, wedge, wedge_length, wedges, zaxis;
  if (polygon.length < 3) {
    return [];
  }
  edges = [];
  for (idx = j = 0, ref1 = polygon.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; idx = 0 <= ref1 ? ++j : --j) {
    if (idx + 1 < polygon.length) {
      edges.push([polygon[idx], polygon[idx + 1]]);
    } else {
      edges.push([polygon[idx], polygon[0]]);
    }
  }
  chains = [];
  current_chain = new Array();
  for (idx = k = 0, ref2 = edges.length - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; idx = 0 <= ref2 ? ++k : --k) {
    e0 = edges[idx];
    e1 = edges[idx + 1];
    if (idx + 1 === edges.length) {
      e1 = edges[0];
    }
    v0 = Vec3.sub(new Vec3(e0[1].x, e0[1].y), new Vec3(e0[0].x, e0[0].y));
    v1 = Vec3.sub(new Vec3(e1[1].x, e1[1].y), new Vec3(e1[0].x, e1[0].y));
    cross = Vec3.cross(v0, v1);
    if (cross.z > 0) {
      if (current_chain.length === 0) {
        current_chain.push(e0);
      }
      current_chain.push([e1[0]]);
      current_chain.push(e1);
    } else {
      if (current_chain.length === 0) {
        current_chain.push(e0);
      }
      chains.push(current_chain);
      current_chain = new Array();
    }
  }
  voronoi = [];
  wedges = [];
  zaxis = new Vec3(0, 0, 1);
  wedge_length = 100.0;
  for (l = 0, len = chains.length; l < len; l++) {
    chain = chains[l];
    for (idx = o = 0, ref3 = chain.length - 1; 0 <= ref3 ? o <= ref3 : o >= ref3; idx = 0 <= ref3 ? ++o : --o) {
      element = chain[idx];
      wedge = [];
      if (element.length === 2) {
        v0 = Vec3.sub(new Vec3(element[0].x, element[0].y), new Vec3(element[1].x, element[1].y));
        cross = Vec3.cross(v0, zaxis);
        cross.normalize();
        wedge.push([new Vec2(element[0].x, element[0].y), new Vec2(element[0].x - cross.x, element[0].y - cross.y)]);
        wedge.push([new Vec2(element[1].x, element[1].y), new Vec2(element[1].x - cross.x, element[1].y - cross.y)]);
      } else {
        p = idx - 1;
        if (idx === 0) {
          p = chain.length - 1;
        }
        n = idx + 1;
        if (idx === chain.length - 1) {
          n = 0;
        }
        pe = chain[p];
        ne = chain[n];
        v0 = Vec3.sub(new Vec3(pe[0].x, pe[0].y), new Vec3(pe[1].x, pe[1].y));
        cross = Vec3.cross(v0, zaxis);
        cross.normalize();
        wedge.push([new Vec2(element[0].x, element[0].y), new Vec2(element[0].x - cross.x, element[0].y - cross.y)]);
        v1 = Vec3.sub(new Vec3(ne[0].x, ne[0].y), new Vec3(ne[1].x, ne[1].y));
        cross = Vec3.cross(v1, zaxis);
        cross.normalize();
        wedge.push([new Vec2(element[0].x, element[0].y), new Vec2(element[0].x - cross.x, element[0].y - cross.y)]);
      }
      wedges.push(wedge);
    }
  }
  console.log(wedges);
  return wedges;
};

module.exports = {
  rayPlaneIntersect: rayPlaneIntersect,
  rayCircleIntersection: rayCircleIntersection,
  precomputeTangent: precomputeTangent,
  closestPointLine: closestPointLine,
  medialAxis2D: medialAxis2D,
  boundingBox: boundingBox,
  edge2Bisector: edge2Bisector,
  screenNodeHitTest: screenNodeHitTest
};



},{"../geometry/primitive":9,"../math/math":30}],32:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

- Resources

* http://www.yuiblog.com/blog/2007/06/12/module-pattern/
* http://www.plexical.com/blog/2012/01/25/writing-coffeescript-for-browser-and-nod/
* https://github.com/field/FieldKit.js

- TODO
* Need a shorthand here for sure!
 */

/* PXL entry point */
var GL, PXL, _setupFrame, extend, util;

PXL = {};

GL = {};

util = require('./util/util');

extend = function() {
  var pkg;
  switch (arguments.length) {
    case 1:
      return util.extend(PXL, arguments[0]);
    case 2:
      pkg = arguments[0];
      if (PXL[pkg] == null) {
        PXL[pkg] = {};
      }
      return util.extend(PXL[pkg], arguments[1]);
  }
};

if (typeof window !== "undefined" && window !== null) {
  window.PXL = PXL;
}

if (typeof window !== "undefined" && window !== null) {
  window.GL = GL;
}

extend(require('./core/app'));

extend(require('./core/node'));

extend("Math", require('./math/math'));

extend("Math", require('./math/curve'));

extend("Math", require('./math//math_functions'));

extend("Colour", require('./colour/colour'));

extend("Geometry", require('./geometry/primitive'));

extend("Geometry", require('./geometry/shape'));

extend("Geometry", require('./geometry/plane'));

extend("Import", require('./import/three'));

extend("Import", require('./import/obj'));

extend("Import", require('./import/md5'));

extend("GL", require('./gl/shader'));

extend("GL", require('./gl/uber_shader_paths'));

extend("GL", require('./gl/uber_shader'));

extend("GL", require('./gl/fbo'));

extend("GL", require('./gl/texture'));

extend("GL", require('./gl/webgl'));

extend("Util", require('./util/request'));

extend("Util", require('./util/promise'));

extend("Util", require('./util/util'));

extend("Util", require('./util/signal'));

extend("Util", require('./util/log'));

extend("Util", require('./util/voronoi'));

extend("Util", require('./util/medial_axis'));

extend("Util", require('./util/webcam'));

extend("Util", require('./util/noise'));

extend("Util", require('./util/cache_var'));

extend("Interact", require('./interact/key'));

extend("Interact", require('./interact/mouse'));

extend("Interact", require('./interact/touch'));

extend("Camera", require('./camera/camera'));

extend("Light", require('./light/light'));

extend("Material", require('./material/material'));

extend("Material", require('./material/basic'));

extend("Material", require('./material/phong'));

extend("Material", require('./material/depth'));

extend("Animation", require('./animation/animation'));

PXL.applications = [];

_setupFrame = function(root) {
  var _cb, onEachFrame;
  if (root.requestAnimationFrame) {
    onEachFrame = function(context, run) {
      var _cb, c, i, len, r, ref, ref1;
      ref = PXL.applications;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], c = ref1[0], r = ref1[1];
        if (c === context && r === run) {
          return;
        }
      }
      PXL.applications.push([context, run]);
      _cb = function() {
        var app, j, len1, ref2;
        ref2 = PXL.applications;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          app = ref2[j];
          PXL.Context.switchContext(app[0]);
          app[1].call(app[0]);
        }
        return requestAnimationFrame(_cb);
      };
      return _cb();
    };
  } else if (root.webkitRequestAnimationFrame) {
    onEachFrame = function(context, run) {
      var _cb, c, i, len, r, ref, ref1;
      ref = PXL.applications;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], c = ref1[0], r = ref1[1];
        if (c === context && r === run) {
          return;
        }
      }
      PXL.applications.push([context, run]);
      _cb = function() {
        var app, j, len1, ref2;
        ref2 = PXL.applications;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          app = ref2[j];
          PXL.Context.switchContext(app[0]);
          app[1].call(app[0]);
        }
        return webkitRequestAnimationFrame(_cb);
      };
      return _cb();
    };
  } else if (root.mozRequestAnimationFrame) {
    onEachFrame = function(context, run) {
      return PXL.applications.push([context, run]);
    };
    _cb = function() {
      var app, i, len, ref;
      ref = PXL.applications;
      for (i = 0, len = ref.length; i < len; i++) {
        app = ref[i];
        PXL.Context.switchContext(app[0]);
        app[1].call(app[0]);
      }
      return mozRequestAnimationFrame(_cb);
    };
    _cb();
  } else {
    onEachFrame = function(context, run) {
      var _go;
      PXL.applications.push([context, run]);
      _go = function() {
        var app, i, len, ref, results;
        ref = PXL.applications;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          app = ref[i];
          PXL.Context.switchContext(app[0]);
          results.push(app[1].call(app[0]));
        }
        return results;
      };
      return setInterval(_go, 1000 / 60);
    };
  }
  return root.onEachFrame = onEachFrame;
};

if (typeof window !== "undefined" && window !== null) {
  _setupFrame(window);
}

module.exports = {
  PXL: PXL,
  GL: GL
};



},{"./animation/animation":1,"./camera/camera":3,"./colour/colour":4,"./core/app":5,"./core/node":6,"./geometry/plane":8,"./geometry/primitive":9,"./geometry/shape":10,"./gl/fbo":12,"./gl/shader":13,"./gl/texture":14,"./gl/uber_shader":15,"./gl/uber_shader_paths":16,"./gl/webgl":17,"./import/md5":18,"./import/obj":19,"./import/three":20,"./interact/key":21,"./interact/mouse":22,"./interact/touch":23,"./light/light":24,"./material/basic":25,"./material/depth":26,"./material/material":27,"./material/phong":28,"./math//math_functions":31,"./math/curve":29,"./math/math":30,"./util/cache_var":33,"./util/log":35,"./util/medial_axis":36,"./util/noise":37,"./util/promise":38,"./util/request":40,"./util/signal":41,"./util/util":42,"./util/voronoi":43,"./util/webcam":44}],33:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

Small getter and setter class used to track values that change. Used in the 
shader class predominantly
 */
var CacheVar;

CacheVar = (function() {
  function CacheVar(variable) {
    this.variable = variable;
    this.dirty = false;
    this;
  }

  CacheVar.prototype.set = function(new_value) {
    var i, j, ref;
    if (new_value instanceof Array && this.variable instanceof Array) {
      if (new_value.length !== this.variable.length) {
        this.dirty = true;
        this.variable = new_value;
      } else {
        for (i = j = 0, ref = new_value.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if (!new_value[i].equals(this.variable[i])) {
            this.dirty = true;
            this.variable = new_value;
            return this;
          }
        }
      }
    } else if (new_value.equals != null) {
      if (!new_value.equals(this.variable)) {
        this.dirty = true;
        this.variable = new_value;
      }
    } else if (new_value !== this.variable) {
      this.dirty = true;
      this.variable = new_value;
    }
    return this;
  };

  CacheVar.prototype.get = function() {
    this.dirty = false;
    return this.variable;
  };

  CacheVar.prototype.isDirty = function() {
    return this.dirty;
  };

  return CacheVar;

})();

module.exports = {
  CacheVar: CacheVar
};



},{}],34:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var glEnumToString, glEnums, glFunctionArgToString, glValidEnumContexts, initDebugContext, makeDebugContext, mightBeEnum;

glValidEnumContexts = {
  'enable': {
    0: true
  },
  'disable': {
    0: true
  },
  'getParameter': {
    0: true
  },
  'drawArrays': {
    0: true
  },
  'drawElements': {
    0: true,
    2: true
  },
  'createShader': {
    0: true
  },
  'getShaderParameter': {
    1: true
  },
  'getProgramParameter': {
    1: true
  },
  'getVertexAttrib': {
    1: true
  },
  'vertexAttribPointer': {
    2: true
  },
  'bindTexture': {
    0: true
  },
  'activeTexture': {
    0: true
  },
  'getTexParameter': {
    0: true,
    1: true
  },
  'texParameterf': {
    0: true,
    1: true
  },
  'texParameteri': {
    0: true,
    1: true,
    2: true
  },
  'texImage2D': {
    0: true,
    2: true,
    6: true,
    7: true
  },
  'texSubImage2D': {
    0: true,
    6: true,
    7: true
  },
  'copyTexImage2D': {
    0: true,
    2: true
  },
  'copyTexSubImage2D': {
    0: true
  },
  'generateMipmap': {
    0: true
  },
  'bindBuffer': {
    0: true
  },
  'bufferData': {
    0: true,
    2: true
  },
  'bufferSubData': {
    0: true
  },
  'getBufferParameter': {
    0: true,
    1: true
  },
  'pixelStorei': {
    0: true,
    1: true
  },
  'readPixels': {
    4: true,
    5: true
  },
  'bindRenderbuffer': {
    0: true
  },
  'bindFramebuffer': {
    0: true
  },
  'checkFramebufferStatus': {
    0: true
  },
  'framebufferRenderbuffer': {
    0: true,
    1: true,
    2: true
  },
  'framebufferTexture2D': {
    0: true,
    1: true,
    2: true
  },
  'getFramebufferAttachmentParameter': {
    0: true,
    1: true,
    2: true
  },
  'getRenderbufferParameter': {
    0: true,
    1: true
  },
  'renderbufferStorage': {
    0: true,
    1: true
  },
  'clear': {
    0: true
  },
  'depthFunc': {
    0: true
  },
  'blendFunc': {
    0: true,
    1: true
  },
  'blendFuncSeparate': {
    0: true,
    1: true,
    2: true,
    3: true
  },
  'blendEquation': {
    0: true
  },
  'blendEquationSeparate': {
    0: true,
    1: true
  },
  'stencilFunc': {
    0: true
  },
  'stencilFuncSeparate': {
    0: true,
    1: true
  },
  'stencilMaskSeparate': {
    0: true
  },
  'stencilOp': {
    0: true,
    1: true,
    2: true
  },
  'stencilOpSeparate': {
    0: true,
    1: true,
    2: true,
    3: true
  },
  'cullFace': {
    0: true
  },
  'frontFace': {
    0: true
  }
};

glEnums = null;

initDebugContext = function(ctx) {
  var i, len, propertyName, results;
  if (glEnums === null) {
    glEnums = {};
    results = [];
    for (i = 0, len = ctx.length; i < len; i++) {
      propertyName = ctx[i];
      if (typeof ctx[propertyName] === 'number') {
        results.push(glEnums[ctx[propertyName]] = propertyName);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

mightBeEnum = function(value) {
  return glEnums[value] !== void 0;
};

glEnumToString = function(value) {
  var name, ref;
  checkInit();
  name = glEnums[value];
  return (ref = name !== void 0) != null ? ref : {
    name: "*UNKNOWN WebGL ENUM (0x" + value.toString(16) + ")"
  };
};

glFunctionArgToString = function(functionName, argumentIndex, value) {
  var funcInfo;
  funcInfo = glValidEnumContexts[functionName];
  if (funcInfo !== void 0) {
    if (funcInfo[argumentIndex]) {
      return glEnumToString(value);
    }
  }
  return value.toString();
};

makeDebugContext = function(ctx) {
  return initDebugContext(ctx);
};



},{}],35:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

Error Handling code

- TODO 
  * Line numbers maybe?
  * Problem with using @ as we are including this file in many places with node :S
  * Unfortunately, the way coffeescript works we have blablahblah = function() which means the functions dont have a name
    - therefore getting the function name for logging is HARD
 */
var PXLDebug, PXLError, PXLLog, PXLWarning, PXLWarningOnce, cache, printObjectName, printStackTrace,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

cache = [];


/* Print Stack Trace funtion */

printStackTrace = function() {
  var callstack, currentFunction, e, error, fn, fname, i, isCallstackPopulated, j, k, lines, ref, ref1;
  callstack = [];
  isCallstackPopulated = false;
  try {
    i.dont.exist += 0;
  } catch (error) {
    e = error;
    if (e.stack) {
      lines = e.stack.split('\n');
      for (i = j = 0, ref = lines.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        callstack.push(lines[i]);
      }
      callstack.shift();
      isCallstackPopulated = true;
    } else if (window.opera && e.message) {
      lines = e.message.split('\n');
      for (i = k = 0, ref1 = lines.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        callstack.push(entry);
      }
      callstack.shift();
      isCallstackPopulated = true;
    }
  }
  if (!isCallstackPopulated) {
    currentFunction = arguments.callee.caller;
    while (currentFunction) {
      fn = currentFunction.toString();
      fname = fn.substring(fn.indexOf("function") + 8, fn.indexOf('')) || 'anonymous';
      callstack.push(fname);
      currentFunction = currentFunction.caller;
    }
  }
  return callstack.join('\n');
};

printObjectName = function(obj) {
  var funcNameRegex, results;
  funcNameRegex = /function (.{1,})\(/;
  results = funcNameRegex.exec(obj.constructor.toString());
  if (results != null) {
    if (results.length > 1) {
      return results[1];
    }
  }
  return "";
};


/* PXLError */

PXLError = (function(_this) {
  return function(msg) {
    var f;
    f = "PXL Error : " + msg;
    console.error(f);
    throw f;
  };
})(this);


/* PXLWarning */

PXLWarning = (function(_this) {
  return function(msg) {
    var f;
    f = "PXL Warning : " + msg;
    console.warn(f);
    return console.warn(printStackTrace());
  };
})(this);


/* PXLWarningOnce */

PXLWarningOnce = (function(_this) {
  return function(msg) {
    var f, result;
    result = indexOf.call(cache, msg) >= 0;
    if (!result) {
      f = "PXL Warning : " + msg;
      console.warn(f);
      console.warn(printStackTrace());
      cache.push(msg);
    }
    return _this;
  };
})(this);


/* PXLDebug */

PXLDebug = (function(_this) {
  return function(msg) {
    var f;
    if (PXL.Context.debug) {
      f = "PXL Debug : " + msg;
      console.log(f);
      return _this;
    }
  };
})(this);


/* PXLLog */

PXLLog = function(msg) {
  var f, myName;
  f = "PXL Log : " + msg;
  myName = arguments.callee.toString();
  myName = myName.substr('function '.length);
  myName = myName.substr(0, myName.indexOf('('));
  return console.log(f);
};

module.exports = {
  PXLError: PXLError,
  PXLWarning: PXLWarning,
  PXLLog: PXLLog,
  PXLWarningOnce: PXLWarningOnce,
  PXLDebug: PXLDebug
};



},{}],36:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Edge2, MedialComponent, MedialComponentEdge, MedialComponentParabola, MedialGraph, Parabola, Vec2, edge2Bisector, medialAxis2D, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = require('../math/math'), Vec2 = ref.Vec2, Edge2 = ref.Edge2, Parabola = ref.Parabola;

edge2Bisector = require('../math/math_functions').edge2Bisector;

MedialComponent = (function() {
  function MedialComponent(start, end) {
    this.start = start;
    this.end = end;
    this;
  }

  return MedialComponent;

})();

MedialComponentEdge = (function(superClass) {
  extend(MedialComponentEdge, superClass);

  function MedialComponentEdge(edge2) {
    this.edge = edge2;
    this;
  }

  MedialComponentEdge.prototype.sample = function(dt) {
    var dx;
    dx = ((this.end.x - this.start.x) * dt) + this.start.x;
    return this.edge.sample(dx);
  };

  return MedialComponentEdge;

})(MedialComponent);

MedialComponentParabola = (function(superClass) {
  extend(MedialComponentParabola, superClass);

  function MedialComponentParabola(parabola1) {
    this.parabola = parabola1;
    this;
  }

  MedialComponentParabola.prototype.sample = function(dt) {
    var dx, dy, ref1, y0, y1;
    dx = ((this.end.x - this.start.x) * dt) + this.start.x;
    dy = ((this.end.y - this.start.y) * dt) + this.start.y;
    ref1 = this.parabola.sample(dx), y0 = ref1[0], y1 = ref1[1];
    if (y1 !== y0) {
      if (Math.abs(y0 - dy) < Math.abs(y1 - dy)) {
        return y0;
      } else {
        return y1;
      }
    }
    return y0;
  };

  return MedialComponentParabola;

})(MedialComponent);

MedialGraph = (function() {
  function MedialGraph() {
    this.components = [];
    this.right_handed = true;
  }

  MedialGraph.prototype.voronoiEdgeEdge = function(edge0, edge1) {
    var a, b, bisector, c, cp, influence_point, knot_point, long_edge, parabola, parta, ref1, ref2, short_edge;
    bisector = edge2Bisector(edge0, edge1);
    short_edge = edge1;
    long_edge = edge0;
    if (edge0.length() < edge1.length()) {
      short_edge = edge0;
      long_edge = edge1;
    }
    ref1 = this.edgeLineInfluence(bisector, short_edge, this.right_handed), knot_point = ref1[0], influence_point = ref1[1];
    parta = new Edge2(bisector.start, knot_point);
    this.components.push(new MedialComponentEdge(parta));
    ref2 = long_edge.equation(), a = ref2[0], b = ref2[1], c = ref2[2];
    parabola = new Parabola(influence_point, a, b, c);
    cp = this.edgeParabolaInfluence(parabola, long_edge, this.right_handed);
    return parabola;
  };

  MedialGraph.prototype.edgeParabolaInfluence = function(parabola, edge, right) {
    var e0, e1, ea, eb, ec, epoints, i, j, len, len1, pea, peb, pec, point, psa, psb, psc, ref1, ref2, ref3, rp, s0, s1, spoints, tt;
    ref1 = edge.equation(), ea = ref1[0], eb = ref1[1], ec = ref1[2];
    psa = eb;
    psb = -ea;
    psc = ea * edge.start.x + eb * edge.start.y + ec - eb * edge.start.x + ea * edge.start.y;
    pea = eb;
    peb = -ea;
    pec = ea * edge.end.x + eb * edge.end.y + ec - eb * edge.end.x + ea * edge.end.y;
    ref2 = parabola.lineCrossing(psa, psb, psc), s0 = ref2[0], s1 = ref2[1];
    ref3 = parabola.lineCrossing(pea, peb, pec), e0 = ref3[0], e1 = ref3[1];
    console.log(s0, s1);
    console.log(e0, e1);
    spoints = [Vec2.normalize(s0), Vec2.normalize(s1)];
    epoints = [Vec2.normalize(e0), Vec2.normalize(e1)];
    tt = Vec2.normalize(edge.start);
    rp = [];
    for (i = 0, len = spoints.length; i < len; i++) {
      point = spoints[i];
      if (right) {
        if (tt.dot(point) > 0) {
          rp.push([point, edge.start]);
        }
      } else if (tt.dot(point) <= 0) {
        rp.push([point, edge.start]);
      }
    }
    for (j = 0, len1 = epoints.length; j < len1; j++) {
      point = epoints[j];
      if (right) {
        if (tt.dot(point) > 0) {
          rp.push([point, edge.end]);
        }
      } else if (tt.dot(point) <= 0) {
        rp.push([point, edge.end]);
      }
    }
    return rp;
  };

  MedialGraph.prototype.edgeLineInfluence = function(line, edge, right) {
    var a, b, c, ea, eb, ec, end_cross, pea, peb, pec, psa, psb, psc, ref1, ref2, start_cross, ts, tt, xe, xs, ye, ys;
    ref1 = edge.equation(), ea = ref1[0], eb = ref1[1], ec = ref1[2];
    ref2 = line.equation(), a = ref2[0], b = ref2[1], c = ref2[2];
    psa = eb;
    psb = -ea;
    psc = ea * edge.start.x + eb * edge.start.y + ec - eb * edge.start.x + ea * edge.start.y;
    pea = eb;
    peb = -ea;
    pec = ea * edge.end.x + eb * edge.end.y + ec - eb * edge.end.x + ea * edge.end.y;
    ys = (psa * c - psc * a) / (a * psb - psa * b);
    xs = (-b * ys - c) / a;
    start_cross = new Vec2(xs, ys);
    ye = (pea * c - pec * a) / (a * peb - pea * b);
    xe = (-b * ye - c) / a;
    end_cross = new Vec2(xe, ye);
    ts = Vec2.normalize(start_cross);
    tt = Vec2.normalize(edge.start);
    ts.normalize();
    tt.normalize();
    if (right) {
      if (tt.dot(ts) > 0) {
        return [end_cross, edge.end];
      } else {
        return [start_cross, edge.start];
      }
    }
    if (tt.dot(ts) <= 0) {
      return [start_cross, edge.start];
    }
    return [end_cross, edge.end];
  };

  return MedialGraph;

})();


/* medialAxis2D */

medialAxis2D = function(polygon, top, left, bottom, right) {
  var chain, chains, cross, current_chain, e0, e1, edges, element, i, idx, j, k, l, len, n, ne, p, pe, ref1, ref2, ref3, v0, v1, voronoi, wedge, wedge_length, wedges, zaxis;
  if (polygon.length < 3) {
    return [];
  }
  edges = [];
  for (idx = i = 0, ref1 = polygon.length - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; idx = 0 <= ref1 ? ++i : --i) {
    if (idx + 1 < polygon.length) {
      edges.push([polygon[idx], polygon[idx + 1]]);
    } else {
      edges.push([polygon[idx], polygon[0]]);
    }
  }
  chains = [];
  current_chain = new Array();
  for (idx = j = 0, ref2 = edges.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; idx = 0 <= ref2 ? ++j : --j) {
    e0 = edges[idx];
    e1 = edges[idx + 1];
    if (idx + 1 === edges.length) {
      e1 = edges[0];
    }
    v0 = Vec3.sub(new Vec3(e0[1].x, e0[1].y), new Vec3(e0[0].x, e0[0].y));
    v1 = Vec3.sub(new Vec3(e1[1].x, e1[1].y), new Vec3(e1[0].x, e1[0].y));
    cross = Vec3.cross(v0, v1);
    if (cross.z > 0) {
      if (current_chain.length === 0) {
        current_chain.push(e0);
      }
      current_chain.push([e1[0]]);
      current_chain.push(e1);
    } else {
      if (current_chain.length === 0) {
        current_chain.push(e0);
      }
      chains.push(current_chain);
      current_chain = new Array();
    }
  }
  voronoi = [];
  wedges = [];
  zaxis = new Vec3(0, 0, 1);
  wedge_length = 100.0;
  for (k = 0, len = chains.length; k < len; k++) {
    chain = chains[k];
    for (idx = l = 0, ref3 = chain.length - 1; 0 <= ref3 ? l <= ref3 : l >= ref3; idx = 0 <= ref3 ? ++l : --l) {
      element = chain[idx];
      wedge = [];
      if (element.length === 2) {
        v0 = Vec3.sub(new Vec3(element[0].x, element[0].y), new Vec3(element[1].x, element[1].y));
        cross = Vec3.cross(v0, zaxis);
        cross.normalize();
        wedge.push([new Vec2(element[0].x, element[0].y), new Vec2(element[0].x - cross.x, element[0].y - cross.y)]);
        wedge.push([new Vec2(element[1].x, element[1].y), new Vec2(element[1].x - cross.x, element[1].y - cross.y)]);
      } else {
        p = idx - 1;
        if (idx === 0) {
          p = chain.length - 1;
        }
        n = idx + 1;
        if (idx === chain.length - 1) {
          n = 0;
        }
        pe = chain[p];
        ne = chain[n];
        v0 = Vec3.sub(new Vec3(pe[0].x, pe[0].y), new Vec3(pe[1].x, pe[1].y));
        cross = Vec3.cross(v0, zaxis);
        cross.normalize();
        wedge.push([new Vec2(element[0].x, element[0].y), new Vec2(element[0].x - cross.x, element[0].y - cross.y)]);
        v1 = Vec3.sub(new Vec3(ne[0].x, ne[0].y), new Vec3(ne[1].x, ne[1].y));
        cross = Vec3.cross(v1, zaxis);
        cross.normalize();
        wedge.push([new Vec2(element[0].x, element[0].y), new Vec2(element[0].x - cross.x, element[0].y - cross.y)]);
      }
      wedges.push(wedge);
    }
  }
  console.log(wedges);
  return wedges;
};

module.exports = {
  MedialGraph: MedialGraph
};



},{"../math/math":30,"../math/math_functions":31}],37:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 */
var Noise, Vec2, Vec3, Vec4, ref;

ref = require('../math/math'), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Vec4 = ref.Vec4;

Noise = (function() {
  Noise.prototype.setSeed = function(seed) {
    var i, l, results, v;
    if (seed > 0 && seed < 1) {
      seed *= 65536;
    }
    seed = Math.floor(seed);
    if (seed < 256) {
      seed |= seed << 8;
    }
    results = [];
    for (i = l = 0; l <= 255; i = ++l) {
      v = 0;
      if (i & 1) {
        v = this.p[i] ^ (seed & 255);
      } else {
        v = this.p[i] ^ ((seed >> 8) & 255);
      }
      this.perm[i] = this.perm[i + 256] = v;
      results.push(this.gradP[i] = this.gradP[i + 256] = this.grad3[v % 12]);
    }
    return results;
  };

  function Noise() {
    this.grad3 = [new Vec3(1, 1, 0), new Vec3(-1, 1, 0), new Vec3(1, -1, 0), new Vec3(-1, -1, 0), new Vec3(1, 0, 1), new Vec3(-1, 0, 1), new Vec3(1, 0, -1), new Vec3(-1, 0, -1), new Vec3(0, 1, 1), new Vec3(0, -1, 1), new Vec3(0, 1, -1), new Vec3(0, -1, -1)];
    this.p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];
    this.perm = new Array(512);
    this.gradP = new Array(512);
    this.setSeed(0);
    this.F2 = 0.5 * (Math.sqrt(3) - 1);
    this.G2 = (3 - Math.sqrt(3)) / 6;
    this.F3 = 1 / 3;
    this.G3 = 1 / 6;
  }

  Noise.prototype.simplex2 = function(xin, yin) {
    var gi0, gi1, gi2, i, i1, j, j1, n0, n1, n2, s, t, t0, t1, t2, x0, x1, x2, y0, y1, y2;
    n0 = n1 = n2 = 0;
    s = (xin + yin) * this.F2;
    i = Math.floor(xin + s);
    j = Math.floor(yin + s);
    t = (i + j) * this.G2;
    x0 = xin - i + t;
    y0 = yin - j + t;
    i1 = j1 = 0;
    if (x0 > y0) {
      i1 = 1;
      j1 = 0;
    } else {
      i1 = 0;
      j1 = 1;
    }
    x1 = x0 - i1 + this.G2;
    y1 = y0 - j1 + this.G2;
    x2 = x0 - 1 + 2 * this.G2;
    y2 = y0 - 1 + 2 * this.G2;
    i &= 255;
    j &= 255;
    gi0 = this.gradP[i + this.perm[j]];
    gi1 = this.gradP[i + i1 + this.perm[j + j1]];
    gi2 = this.gradP[i + 1 + this.perm[j + 1]];
    t0 = 0.5 - x0 * x0 - y0 * y0;
    if (t0 < 0) {
      n0 = 0;
    } else {
      t0 *= t0;
      n0 = t0 * t0 * Vec3.dot(gi0, new Vec3(x0, y0, 0));
    }
    t1 = 0.5 - x1 * x1 - y1 * y1;
    if (t1 < 0) {
      n1 = 0;
    } else {
      t1 *= t1;
      n1 = t1 * t1 * Vec3.dot(gi1, new Vec3(x1, y1, 0));
    }
    t2 = 0.5 - x2 * x2 - y2 * y2;
    if (t2 < 0) {
      n2 = 0;
    } else {
      t2 *= t2;
      n2 = t2 * t2 * Vec3.dot(gi2, new Vec3(x2, y2, 0));
    }
    return 70 * (n0 + n1 + n2);
  };

  Noise.prototype.simplex3 = function(xin, yin, zin) {
    var gi0, gi1, gi2, gi3, i, i1, i2, j, j1, j2, k, k1, k2, n0, n1, n2, n3, s, t, t0, t1, t2, t3, x0, x1, x2, x3, y0, y1, y2, y3, z0, z1, z2, z3;
    n0 = n1 = n2 = n3 = 0;
    s = (xin + yin + zin) * this.F3;
    i = Math.floor(xin + s);
    j = Math.floor(yin + s);
    k = Math.floor(zin + s);
    t = (i + j + k) * this.G3;
    x0 = xin - i + t;
    y0 = yin - j + t;
    z0 = zin - k + t;
    i1 = j1 = k1 = 0;
    i2 = j2 = k2 = 0;
    if (x0 >= y0) {
      if (y0 >= z0) {
        i1 = 1;
        j1 = 0;
        k1 = 0;
        i2 = 1;
        j2 = 1;
        k2 = 0;
      } else if (x0 >= z0) {
        i1 = 1;
        j1 = 0;
        k1 = 0;
        i2 = 1;
        j2 = 0;
        k2 = 1;
      } else {
        i1 = 0;
        j1 = 0;
        k1 = 1;
        i2 = 1;
        j2 = 0;
        k2 = 1;
      }
    } else {
      if (y0 < z0) {
        i1 = 0;
        j1 = 0;
        k1 = 1;
        i2 = 0;
        j2 = 1;
        k2 = 1;
      } else if (x0 < z0) {
        i1 = 0;
        j1 = 1;
        k1 = 0;
        i2 = 0;
        j2 = 1;
        k2 = 1;
      } else {
        i1 = 0;
        j1 = 1;
        k1 = 0;
        i2 = 1;
        j2 = 1;
        k2 = 0;
      }
    }
    x1 = x0 - i1 + this.G3;
    y1 = y0 - j1 + this.G3;
    z1 = z0 - k1 + this.G3;
    x2 = x0 - i2 + 2 * this.G3;
    y2 = y0 - j2 + 2 * this.G3;
    z2 = z0 - k2 + 2 * this.G3;
    x3 = x0 - 1 + 3 * this.G3;
    y3 = y0 - 1 + 3 * this.G3;
    z3 = z0 - 1 + 3 * this.G3;
    i &= 255;
    j &= 255;
    k &= 255;
    gi0 = this.gradP[i + this.perm[j + this.perm[k]]];
    gi1 = this.gradP[i + i1 + this.perm[j + j1 + this.perm[k + k1]]];
    gi2 = this.gradP[i + i2 + this.perm[j + j2 + this.perm[k + k2]]];
    gi3 = this.gradP[i + 1 + this.perm[j + 1 + this.perm[k + 1]]];
    t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0;
    if (t0 < 0) {
      n0 = 0;
    } else {
      t0 *= t0;
      n0 = t0 * t0 * Vec3.dot(gi0, new Vec3(x0, y0, z0));
    }
    t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1;
    if (t1 < 0) {
      n1 = 0;
    } else {
      t1 *= t1;
      n1 = t1 * t1 * Vec3.dot(gi1, new Vec3(x1, y1, z1));
    }
    t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2;
    if (t2 < 0) {
      n2 = 0;
    } else {
      t2 *= t2;
      n2 = t2 * t2 * Vec3.dot(gi2, new Vec3(x2, y2, z2));
    }
    t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3;
    if (t3 < 0) {
      n3 = 0;
    } else {
      t3 *= t3;
      n3 = t3 * t3 * Vec3.dot(gi3, new Vec3(x3, y3, z3));
    }
    return 32 * (n0 + n1 + n2 + n3);
  };

  Noise.prototype.fade = function(t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
  };

  Noise.prototype.lerp = function(a, b, t) {
    return (1 - t) * a + t * b;
  };

  Noise.prototype.perlin2 = function(x, y) {
    var X, Y, n00, n01, n10, n11, u;
    X = Math.floor(x);
    Y = Math.floor(y);
    x = x - X;
    y = y - Y;
    X = X & 255;
    Y = Y & 255;
    n00 = Vec3.dot(this.gradP[X + this.perm[Y]], new Vec3(x, y, 0));
    n01 = Vec3.dot(this.gradP[X + this.perm[Y + 1]], new Vec3(x, y - 1, 0));
    n10 = Vec3.dot(this.gradP[X + 1 + this.perm[Y]], new Vec3(x - 1, y, 0));
    n11 = Vec3.dot(this.gradP[X + 1 + this.perm[Y + 1]], new Vec3(x - 1, y - 1, 0));
    u = this.fade(x);
    return this.lerp(this.lerp(n00, n10, u), this.lerp(n01, n11, u), this.fade(y));
  };

  Noise.prototype.perlin3 = function(x, y, z) {
    var X, Y, Z, n000, n001, n010, n011, n100, n101, n110, n111, u, v, w;
    X = Math.floor(x);
    Y = Math.floor(y);
    Z = Math.floor(z);
    x = x - X;
    y = y - Y;
    z = z - Z;
    X = X & 255;
    Y = Y & 255;
    Z = Z & 255;
    n000 = Vec3.dot(this.gradP[X + this.perm[Y + this.perm[Z]]], new Vec3(x, y, z));
    n001 = Vec3.dot(this.gradP[X + this.perm[Y + this.perm[Z + 1]]], new Vec3(x, y, z - 1));
    n010 = Vec3.dot(this.gradP[X + this.perm[Y + 1 + this.perm[Z]]], new Vec3(x, y - 1, z));
    n011 = Vec3.dot(this.gradP[X + this.perm[Y + 1 + this.perm[Z + 1]]], new Vec3(x, y - 1, z - 1));
    n100 = Vec3.dot(this.gradP[X + 1 + this.perm[Y + this.perm[Z]]], new Vec3(x - 1, y, z));
    n101 = Vec3.dot(this.gradP[X + 1 + this.perm[Y + this.perm[Z + 1]]], new Vec3(x - 1, y, z - 1));
    n110 = Vec3.dot(this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z]]], new Vec3(x - 1, y - 1, z));
    n111 = Vec3.dot(this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z]]], new Vec3(x - 1, y - 1, z - 1));
    u = this.fade(x);
    v = this.fade(y);
    w = this.fade(z);
    return this.lerp(this.lerp(this.lerp(n000, n100, u), this.lerp(n001, n101, u), w), this.lerp(this.lerp(n010, n110, u), this.lerp(n011, n111, u), w), v);
  };

  return Noise;

})();

module.exports = {
  Noise: Noise
};



},{"../math/math":30}],38:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


Previously we had queues and load items here but it seemed better to just use promises
somewhat more intelligently. At some point we'll need to figure out filesizes and such from
our requests which is not always possible

http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
 */
var PXLError, PXLLog, PXLWarning, Promise, ref;

ref = require('../util/log'), PXLWarning = ref.PXLWarning, PXLError = ref.PXLError, PXLLog = ref.PXLLog;


/*Promise */

Promise = (function() {
  function Promise() {
    if (typeof PXL !== "undefined" && PXL !== null) {
      this.context = PXL.Context;
    }
    this;
  }

  Promise.prototype.when = function() {
    var failure, fidx, i, j, promise, ref1, ref2, results, success_closure;
    this.results = (function() {
      results = [];
      for (var i = 0, ref1 = arguments.length - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; 0 <= ref1 ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this, arguments);
    this.count = arguments.length;
    failure = (function(_this) {
      return function() {
        return _this.reject(arguments);
      };
    })(this);
    for (fidx = j = 0, ref2 = arguments.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; fidx = 0 <= ref2 ? ++j : --j) {
      promise = arguments[fidx];
      success_closure = function(top_promise, position) {
        var _position, _top_promise, success;
        _top_promise = top_promise;
        _position = position;
        success = function(value) {
          if (_top_promise.context != null) {
            PXL.Context.switchContext(_top_promise.context);
          }
          _top_promise.results[_position] = value;
          _top_promise.count -= 1;
          if (_top_promise.count === 0) {
            return _top_promise.onResolved.apply(_top_promise, _top_promise.results);
          }
        };
        return success;
      };
      promise.then(success_closure(this, fidx), failure);
    }
    return this;
  };

  Promise.prototype.then = function(onResolved, onRejected) {
    this.onResolved = onResolved;
    this.onRejected = onRejected;
    if (this.context != null) {
      PXL.Context.switchContext(this.context);
    }
    return this;
  };

  Promise.prototype.resolve = function(value) {
    if (this.context != null) {
      PXL.Context.switchContext(this.context);
    }
    if (this.onResolved != null) {
      return this.onResolved(value);
    }
  };

  Promise.prototype.reject = function(value) {
    if (this.context != null) {
      PXL.Context.switchContext(this.context);
    }
    if (this.onRejected != null) {
      return this.onRejected(value);
    }
  };

  return Promise;

})();

module.exports = {
  Promise: Promise
};



},{"../util/log":35}],39:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

An implementation of the Red Black Tree from the Javascript Implementation found
at https://github.com/gorhill/Javascript-Voronoi/blob/master/rhill-voronoi-core.js
 */

/*RedBlackTree */
var RedBlackTree;

RedBlackTree = (function() {
  function RedBlackTree() {
    this.root = null;
  }

  RedBlackTree.prototype.insertSuccessor = function(node, successor) {
    var grandpa, parent, uncle;
    if (node) {
      successor.rbPrevious = node;
      successor.rbNext = node.rbNext;
      if (node.rbNext) {
        node.rbNext.rbPrevious = successor;
      }
      node.rbNext = successor;
      if (node.rbRight) {
        node = node.rbRight;
        while (node.rbLeft) {
          node = node.rbLeft;
        }
        node.rbLeft = successor;
      } else {
        node.rbRight = successor;
      }
      parent = node;
    } else if (this.root) {
      node = this.getFirst(this.root);
      successor.rbPrevious = null;
      successor.rbNext = node;
      node.rbPrevious = successor;
      node.rbLeft = successor;
      parent = node;
    } else {
      successor.rbPrevious = successor.rbNext = null;
      this.root = successor;
      parent = null;
    }
    successor.rbLeft = successor.rbRight = null;
    successor.rbParent = parent;
    successor.rbRed = true;
    grandpa;
    uncle;
    node = successor;
    while (parent && parent.rbRed) {
      grandpa = parent.rbParent;
      if (parent === grandpa.rbLeft) {
        uncle = grandpa.rbRight;
        if (uncle && uncle.rbRed) {
          parent.rbRed = uncle.rbRed = false;
          grandpa.rbRed = true;
          node = grandpa;
        } else {
          if (node === parent.rbRight) {
            this.rotateLeft(parent);
            node = parent;
            parent = node.rbParent;
          }
          parent.rbRed = false;
          grandpa.rbRed = true;
          this.rotateRight(grandpa);
        }
      } else {
        uncle = grandpa.rbLeft;
        if (uncle && uncle.rbRed) {
          parent.rbRed = uncle.rbRed = false;
          grandpa.rbRed = true;
          node = grandpa;
        } else {
          if (node === parent.rbLeft) {
            this.rotateRight(parent);
            node = parent;
            parent = node.rbParent;
          }
          parent.rbRed = false;
          grandpa.rbRed = true;
          this.rotateLeft(grandpa);
          parent = node.rbParent;
        }
      }
    }
    return this.root.rbRed = false;
  };

  RedBlackTree.prototype.removeNode = function(node) {
    var isRed, left, next, parent, right, sibling;
    if (node.rbNext) {
      node.rbNext.rbPrevious = node.rbPrevious;
    }
    if (node.rbPrevious) {
      node.rbPrevious.rbNext = node.rbNext;
    }
    node.rbNext = node.rbPrevious = null;
    parent = node.rbParent;
    left = node.rbLeft;
    right = node.rbRight;
    next;
    if (!left) {
      next = right;
    } else if (!right) {
      next = left;
    } else {
      next = this.getFirst(right);
    }
    if (parent) {
      if (parent.rbLeft === node) {
        parent.rbLeft = next;
      } else {
        parent.rbRight = next;
      }
    } else {
      this.root = next;
    }
    isRed;
    if (left && right) {
      isRed = next.rbRed;
      next.rbRed = node.rbRed;
      next.rbLeft = left;
      left.rbParent = next;
      if (next !== right) {
        parent = next.rbParent;
        next.rbParent = node.rbParent;
        node = next.rbRight;
        parent.rbLeft = node;
        next.rbRight = right;
        right.rbParent = next;
      } else {
        next.rbParent = parent;
        parent = next;
        node = next.rbRight;
      }
    } else {
      isRed = node.rbRed;
      node = next;
    }
    if (node) {
      node.rbParent = parent;
    }
    if (isRed) {
      return;
    }
    if (node && node.rbRed) {
      node.rbRed = false;
      return;
    }
    sibling;
    while (true) {
      if (node === this.root) {
        break;
      }
      if (node === parent.rbLeft) {
        sibling = parent.rbRight;
        if (sibling.rbRed) {
          sibling.rbRed = false;
          parent.rbRed = true;
          this.rotateLeft(parent);
          sibling = parent.rbRight;
        }
        if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {
          if (!sibling.rbRight || !sibling.rbRight.rbRed) {
            sibling.rbLeft.rbRed = false;
            sibling.rbRed = true;
            this.rotateRight(sibling);
            sibling = parent.rbRight;
          }
          sibling.rbRed = parent.rbRed;
          parent.rbRed = sibling.rbRight.rbRed = false;
          this.rotateLeft(parent);
          node = this.root;
          break;
        }
      } else {
        sibling = parent.rbLeft;
        if (sibling.rbRed) {
          sibling.rbRed = false;
          parent.rbRed = true;
          this.rotateRight(parent);
          sibling = parent.rbLeft;
        }
        if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {
          if (!sibling.rbLeft || !sibling.rbLeft.rbRed) {
            sibling.rbRight.rbRed = false;
            sibling.rbRed = true;
            this.rotateLeft(sibling);
            sibling = parent.rbLeft;
          }
          sibling.rbRed = parent.rbRed;
          parent.rbRed = sibling.rbLeft.rbRed = false;
          this.rotateRight(parent);
          node = this.root;
          break;
        }
      }
      sibling.rbRed = true;
      node = parent;
      parent = parent.rbParent;
      if (node.rbRed) {
        break;
      }
    }
    if (node) {
      return node.rbRed = false;
    }
  };

  RedBlackTree.prototype.rotateLeft = function(node) {
    var p, parent, q;
    p = node;
    q = node.rbRight;
    parent = p.rbParent;
    if (parent) {
      if (parent.rbLeft === p) {
        parent.rbLeft = q;
      } else {
        parent.rbRight = q;
      }
    } else {
      this.root = q;
    }
    q.rbParent = parent;
    p.rbParent = q;
    p.rbRight = q.rbLeft;
    if (p.rbRight) {
      p.rbRight.rbParent = p;
    }
    return q.rbLeft = p;
  };

  RedBlackTree.prototype.rotateRight = function(node) {
    var p, parent, q;
    p = node;
    q = node.rbLeft;
    parent = p.rbParent;
    if (parent) {
      if (parent.rbLeft === p) {
        parent.rbLeft = q;
      } else {
        parent.rbRight = q;
      }
    } else {
      this.root = q;
    }
    q.rbParent = parent;
    p.rbParent = q;
    p.rbLeft = q.rbRight;
    if (p.rbLeft) {
      p.rbLeft.rbParent = p;
    }
    return q.rbRight = p;
  };

  RedBlackTree.prototype.getFirst = function(node) {
    while (node.rbLeft) {
      node = node.rbLeft;
    }
    return node;
  };

  RedBlackTree.prototype.getLast = function(node) {
    while (node.rbRight) {
      node = node.rbRight;
    }
    return node;
  };

  return RedBlackTree;

})();

module.exports = {
  RedBlackTree: RedBlackTree
};



},{}],40:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details


- Resources

* http://coffeescriptcookbook.com/chapters/ajax/ajax_request_without_jquery

- TODO
  * Need to get some kind of percentage in here, along with a signal we can check!
  


- Potentially
- But what about not being in a browser, potentially? Nodejs style?

// Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
  // Great success! All the File APIs are supported.
} else {
  alert('The File APIs are not fully supported in this browser.');
}
 */
var PXLError, PXLLog, PXLWarning, Request, Signal, ref;

Signal = require('./signal').Signal;

ref = require('./log'), PXLWarning = ref.PXLWarning, PXLError = ref.PXLError, PXLLog = ref.PXLLog;


/*Request */

Request = (function() {
  function Request(url) {
    this.url = url;
    if (typeof PXL !== "undefined" && PXL !== null) {
      this._context = PXL.Context;
    }
  }

  Request.prototype._parse = function(callback) {
    var data, l;
    l = this.url.length - 1;
    if (this.req.responseType === "" || this.req.responseType === "text") {
      callback(this.req.responseText);
    } else if (this.req.responseType === "json") {
      data = eval('(' + this.req.responseText + ')');
      data._coffeegl_request_url = this.url;
      callback(data);
    } else if (this.req.responseType === "blob") {
      PXLError("Blob Type not supported yet", this);
    } else if (this.req.responseType === "") {
      PXLError("responseType was empty", this);
    } else {
      callback(this.req.responseText);
    }
    return this;
  };

  Request.prototype.get = function(callback, onerror, synchronous) {
    var data, fs;
    if (synchronous == null) {
      synchronous = false;
    }
    if (typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null) {
      this.req = new XMLHttpRequest();
      if (synchronous) {
        this.req.open('GET', this.url, false);
        this.req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        this.req.send(null);
        this._parse(callback);
      } else {
        this.req.onreadystatechange = (function(_this) {
          return function() {
            if (_this.req.readyState === 4) {
              if (_this.req.status === 200 || _this.req.status === 304) {
                if (typeof PXL !== "undefined" && PXL !== null) {
                  PXL.Context.switchContext(_this._context);
                }
                return _this._parse(callback);
              } else {
                if (typeof PXL !== "undefined" && PXL !== null) {
                  PXL.Context.switchContext(_this._context);
                }
                return onerror(_this.req.responseText);
              }
            }
          };
        })(this);
        this.req.open('GET', this.url);
        this.req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        this.req.send(null);
      }
    } else {
      fs = require('fs');
      if (synchronous) {
        data = fs.readFileSync(this.url);
        callback(data.toString());
      } else {
        fs.readFile(this.url, (function(_this) {
          return function(err, data) {
            if (err != null) {
              PXLError("nodejs readFile Errored with " + err);
            }
            return callback(data.toString());
          };
        })(this));
      }
    }
    return this;
  };

  return Request;

})();

module.exports = {
  Request: Request
};



},{"./log":35,"./signal":41,"fs":45}],41:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

- TODO
* There is no hierarchy or bubbling really. Anyone can listen
* Maybe rethink how we handle events generally? - Game engine style

Influenced by signals.js - an object where listeners and events may be added
 */
var Signal, Vec2, util;

util = require("./util");

Vec2 = require("../math/math").Vec2;


/*Signal */

Signal = (function() {
  function Signal() {
    this.listeners = [];
    this._pause = false;
  }

  Signal.prototype.add = function(func, context) {
    this.listeners.push({
      f: func,
      c: context,
      o: false,
      g: PXL.Context
    });
    return this;
  };

  Signal.prototype.addOnce = function(func, context) {
    this.listeners.push({
      f: func,
      c: context,
      o: true,
      g: PXL.Context
    });
    return this;
  };

  Signal.prototype.remove = function(func, context) {
    this.del(func);
    return this;
  };

  Signal.prototype.pause = function(force) {
    if (force != null) {
      return this._pause = force;
    } else {
      return this._pause = !this._pause;
    }
  };

  Signal.prototype.del = function(func, context) {
    var i, j, len, obj, ref;
    ref = this.listeners;
    for (j = 0, len = ref.length; j < len; j++) {
      obj = ref[j];
      if (obj.c === context) {
        if (obj.f === func) {
          i = this.listeners.indexOf(obj);
          this.listeners.splice(i, 1);
          break;
        }
      }
    }
    return this;
  };

  Signal.prototype.dispatch = function() {
    var j, k, l, len, len1, ref, removals;
    if (this._pause) {
      return this;
    }
    removals = [];
    ref = this.listeners;
    for (j = 0, len = ref.length; j < len; j++) {
      l = ref[j];
      PXL.Context.switchContext(l.g);
      l.f.apply(l.c, arguments);
      if (l.o) {
        removals.push(l);
      }
    }
    for (k = 0, len1 = removals.length; k < len1; k++) {
      l = removals[k];
      this.del(l);
    }
    return this;
  };

  return Signal;

})();

module.exports = {
  Signal: Signal
};



},{"../math/math":30,"./util":42}],42:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details
 
 JavaScript Language Utility Methods
 */
var util;

util = {};

util.extend = function(obj, source) {
  var i, il, keys, prop, safeHasOwnProperty;
  if (Object.keys) {
    keys = Object.keys(source);
    i = 0;
    il = keys.length;
    while (i < il) {
      prop = keys[i];
      Object.defineProperty(obj, prop, Object.getOwnPropertyDescriptor(source, prop));
      i++;
    }
  } else {
    safeHasOwnProperty = {}.hasOwnProperty;
    for (prop in source) {
      if (safeHasOwnProperty.call(source, prop)) {
        obj[prop] = source[prop];
      }
    }
  }
  return obj;
};

util.removeElement = function(element, list) {
  var index;
  index = list.indexOf(element);
  if (index !== -1) {
    list.splice(index, 1);
  }
  return list;
};

util.flatten = function(obj) {
  var flat, key;
  flat = [];
  for (key in obj) {
    flat.push(obj[key]);
  }
  return flat;
};

util.type = function(obj) {
  var classToType, j, len, myClass, name, ref;
  if (obj === void 0 || obj === null) {
    return String(obj);
  }
  classToType = new Object;
  ref = "Boolean Number String Function Array Date";
  for (j = 0, len = ref.length; j < len; j++) {
    name = ref[j];
    RegExp.split(" ");
  }
  myClass = Object.prototype.toString.call(obj);
  if (myClass in classToType) {
    return classToType(myClass);
  }
  return 'object';
};

util.clone = function(obj) {
  return JSON.parse(JSON.stringify(obj));

  /*
  if not obj? or typeof obj isnt 'object'
    return obj
  
  if obj instanceof Date
    return new Date(obj.getTime()) 
  
  if obj instanceof RegExp
    flags = ''
    flags += 'g' if obj.global?
    flags += 'i' if obj.ignoreCase?
    flags += 'm' if obj.multiline?
    flags += 'y' if obj.sticky?
    return new RegExp(obj.source, flags) 
  
   * TODO - More typed array clones? 
   * we cant just call the constructor and set the classes you see! :S
  
  if obj instanceof Float32Array
    return new Float32Array(obj)
  
  if obj instanceof Uint16Array
    return new Uint16Array(obj)
  
  newInstance = new obj.constructor()
  
  for key of obj
    newInstance[key] = util.clone obj[key]
  
  return newInstance
   */
};

util.copy = function(from, to) {
  var i, j, k, ref, ref1;
  if (from instanceof Float32Array && to instanceof Float32Array) {
    if (from.length === to.size) {
      for (i = j = 0, ref = from.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        to[i] = from[i];
      }
      return;
    }
  }
  if (from instanceof Uint16Array && to instanceof Uint16Array) {
    if (from.length === to.size) {
      for (i = k = 0, ref1 = from.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        to[i] = from[i];
      }
      return;
    }
  }
  if (typeof from !== 'object' && typof(to !== 'object')) {
    return to = from;
  }
};

util.QueryString = function() {
  var arr, i, j, pair, query, query_string, ref, vars;
  query_string = {};
  if (typeof window !== "undefined" && window !== null) {
    query = window.location.search.substring(1);
  }
  vars = query.split("&");
  for (i = j = 0, ref = vars.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    pair = vars[i].split("=");
    if (typeof query_string[pair[0]] === "undefined") {
      query_string[pair[0]] = pair[1];
    } else if (typeof query_string[pair[0]] === "string") {
      arr = [query_string[pair[0]], pair[1]];
      query_string[pair[0]] = arr;
    } else {
      query_string[pair[0]].push(pair[1]);
    }
  }
  return query_string;
};

module.exports = util;



},{}],43:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

An implementation of Fortune's Sweep algorithm based on the C++ Implementation from 
http:#skynet.ie/~sos/mapviewer/voronoi.php and the Javascript Implementation found
at https:#github.com/gorhill/Javascript-Voronoi/blob/master/rhill-voronoi-core.js

Adpated from the excellent work by Raymond Hill 

Copyright (C) 2010-2013 Raymond Hill https://github.com/gorhill/Javascript-Voronoi

Licensed under The MIT License http://en.wikipedia.org/wiki/MIT_License

Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software 
without restriction, including without limitation the rights to use, copy, modify, merge, 
publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
 */
var Beachsection, Cell, CircleEvent, Diagram, Edge, Edge2, Halfedge, RedBlackTree, Vec2, Vec3, Voronoi, ref;

ref = require('../math/math'), Vec2 = ref.Vec2, Vec3 = ref.Vec3, Edge2 = ref.Edge2;

RedBlackTree = require('./red_black_tree').RedBlackTree;

Edge = (function() {
  function Edge(lSite1, rSite1) {
    this.lSite = lSite1;
    this.rSite = rSite1;
    this.va = this.vb = null;
  }

  return Edge;

})();

Cell = (function() {
  function Cell(site1) {
    this.site = site1;
    this.halfedges = [];
    this.closeMe = false;
  }

  Cell.prototype.init = function(site1) {
    this.site = site1;
    this.halfedges = [];
    this.closeMe = false;
    return this;
  };

  Cell.prototype.prepareHalfedges = function() {
    var edge, halfedges, iHalfedge;
    halfedges = this.halfedges;
    iHalfedge = halfedges.length;
    edge;
    while (iHalfedge--) {
      edge = halfedges[iHalfedge].edge;
      if (!edge.vb || !edge.va) {
        halfedges.splice(iHalfedge, 1);
      }
    }
    halfedges.sort(function(a, b) {
      return b.angle - a.angle;
    });
    return halfedges.length;
  };

  Cell.prototype.getNeighborIds = function() {
    var edge, iHalfedge, neighbors;
    neighbors = [];
    iHalfedge = this.halfedges.length;
    edge;
    while (iHalfedge--) {
      edge = this.halfedges[iHalfedge].edge;
      if (edge.lSite !== null && edge.lSite.voronoiId !== this.site.voronoiId) {
        neighbors.push(edge.lSite.voronoiId);
      } else if (edge.rSite !== null && edge.rSite.voronoiId !== this.site.voronoiId) {
        neighbors.push(edge.rSite.voronoiId);
      }
    }
    return neighbors;
  };

  Cell.prototype.getBbox = function() {
    var halfedges, iHalfedge, rval, v, vx, vy, xmax, xmin, ymax, ymin;
    halfedges = this.halfedges;
    iHalfedge = halfedges.length;
    xmin = Infinity;
    ymin = Infinity;
    xmax = -Infinity;
    ymax = -Infinity;
    v;
    vx;
    vy;
    while (iHalfedge--) {
      v = halfedges[iHalfedge].getStartpoint();
      vx = v.x;
      vy = v.y;
      if (vx < xmin) {
        xmin = vx;
      }
      if (vy < ymin) {
        ymin = vy;
      }
      if (vx > xmax) {
        xmax = vx;
      }
      if (vy > ymax) {
        ymax = vy;
      }
      rval = {
        x: xmin,
        y: ymin,
        width: xmax - xmin,
        height: ymax - ymin
      };
      return rval;
    }
  };

  Cell.prototype.pointIntersection = function(x, y) {
    var halfedge, halfedges, iHalfedge, p0, p1, r;
    halfedges = this.halfedges;
    iHalfedge = halfedges.length;
    halfedge;
    p0;
    p1;
    r;
    while (iHalfedge--) {
      halfedge = halfedges[iHalfedge];
      p0 = halfedge.getStartpoint();
      p1 = halfedge.getEndpoint();
      r = (y - p0.y) * (p1.x - p0.x) - (x - p0.x) * (p1.y - p0.y);
      if (!r) {
        return 0;
      }
      if (r > 0) {
        return -1;
      }
    }
    return 1;
  };

  return Cell;

})();

Diagram = (function() {
  function Diagram(site1) {
    this.site = site1;
    this;
  }

  return Diagram;

})();

Halfedge = (function() {
  function Halfedge(edge1, lSite, rSite) {
    var va, vb;
    this.edge = edge1;
    this.site = lSite;
    if (rSite) {
      this.angle = Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x);
    } else {
      va = edge.va;
      vb = edge.vb;
      if (edge.lSite === lSite) {
        this.angle = Math.atan2(vb.x - va.x, va.y - vb.y);
      } else {
        Math.atan2(va.x - vb.x, vb.y - va.y);
      }
    }
  }

  Halfedge.prototype.getStartpoint = function() {
    if (this.edge.lSite === this.site) {
      return this.edge.va;
    }
    return this.edge.vb;
  };

  Halfedge.prototype.getEndpoint = function() {
    if (this.edge.lSite === this.site) {
      return this.edge.vb;
    }
    return this.edge.va;
  };

  return Halfedge;

})();

Beachsection = (function() {
  function Beachsection() {
    this;
  }

  return Beachsection;

})();

CircleEvent = (function() {
  function CircleEvent() {
    this.arc = null;
    this.rbLeft = null;
    this.rbNext = null;
    this.rbParent = null;
    this.rbPrevious = null;
    this.rbRed = false;
    this.rbRight = null;
    this.site = null;
    this.x = this.y = this.ycenter = 0;
  }

  return CircleEvent;

})();

Voronoi = (function() {
  function Voronoi() {
    this.vertices = null;
    this.edges = null;
    this.cells = null;
    this.toRecycle = null;
    this.beachsectionJunkyard = [];
    this.circleEventJunkyard = [];
    this.vertexJunkyard = [];
    this.edgeJunkyard = [];
    this.cellJunkyard = [];
  }

  Voronoi.abs = Math.abs;

  Voronoi.epsilon = 1e-9;

  Voronoi.invepsilon = 1.0 / Voronoi.epsilon;

  Voronoi.prototype.equalWithEpsilon = function(a, b) {
    return Math.abs(a - b) < 1e-9;
  };

  Voronoi.prototype.greaterThanWithEpsilon = function(a, b) {
    return a - b > 1e-9;
  };

  Voronoi.prototype.greaterThanOrEqualWithEpsilon = function(a, b) {
    return b - a < 1e-9;
  };

  Voronoi.prototype.lessThanWithEpsilon = function(a, b) {
    return b - a > 1e-9;
  };

  Voronoi.prototype.lessThanOrEqualWithEpsilon = function(a, b) {
    return a - b < 1e-9;
  };

  Voronoi.prototype.createHalfedge = function(edge, lSite, rSite) {
    return new Halfedge(edge, lSite, rSite);
  };

  Voronoi.prototype.reset = function() {
    var beachsection;
    if (!this.beachline) {
      this.beachline = new RedBlackTree();
    }
    if (this.beachline.root) {
      beachsection = this.beachline.getFirst(this.beachline.root);
      while (beachsection) {
        this.beachsectionJunkyard.push(beachsection);
        beachsection = beachsection.rbNext;
      }
    }
    this.beachline.root = null;
    if (!this.circleEvents) {
      this.circleEvents = new RedBlackTree();
    }
    this.circleEvents.root = this.firstCircleEvent = null;
    this.vertices = [];
    this.edges = [];
    this.cells = [];
    return this.segments = [];
  };

  Voronoi.prototype.createVertex = function(x, y) {
    var v;
    v = this.vertexJunkyard.pop();
    if (!v) {
      v = new Vec2(x, y);
    } else {
      v.x = x;
      v.y = y;
    }
    this.vertices.push(v);
    return v;
  };

  Voronoi.prototype.createEdge = function(lSite, rSite, va, vb) {
    var edge;
    edge = this.edgeJunkyard.pop();
    if (!edge) {
      edge = new Edge(lSite, rSite);
    } else {
      edge.lSite = lSite;
      edge.rSite = rSite;
      edge.va = edge.vb = null;
    }
    this.edges.push(edge);
    if (va) {
      this.setEdgeStartpoint(edge, lSite, rSite, va);
    }
    if (vb) {
      this.setEdgeEndpoint(edge, lSite, rSite, vb);
    }
    this.cells[lSite.voronoiId].halfedges.push(this.createHalfedge(edge, lSite, rSite));
    this.cells[rSite.voronoiId].halfedges.push(this.createHalfedge(edge, rSite, lSite));
    return edge;
  };

  Voronoi.prototype.createBorderEdge = function(lSite, va, vb) {
    var edge;
    edge = this.edgeJunkyard.pop();
    if (!edge) {
      edge = new Edge(lSite, null);
    } else {
      edge.lSite = lSite;
      edge.rSite = null;
    }
    edge.va = va;
    edge.vb = vb;
    this.edges.push(edge);
    return edge;
  };

  Voronoi.prototype.setEdgeStartpoint = function(edge, lSite, rSite, vertex) {
    if (!edge.va && !edge.vb) {
      edge.va = vertex;
      edge.lSite = lSite;
      return edge.rSite = rSite;
    } else if (edge.lSite === rSite) {
      return edge.vb = vertex;
    } else {
      return edge.va = vertex;
    }
  };

  Voronoi.prototype.setEdgeEndpoint = function(edge, lSite, rSite, vertex) {
    return this.setEdgeStartpoint(edge, rSite, lSite, vertex);
  };

  Voronoi.prototype.createCell = function(site) {
    var cell;
    cell = this.cellJunkyard.pop();
    if (cell) {
      return cell.init(site);
    }
    return new Cell(site);
  };

  Voronoi.prototype.createBeachsection = function(site) {
    var beachsection;
    beachsection = this.beachsectionJunkyard.pop();
    if (!beachsection) {
      beachsection = new Beachsection();
    }
    beachsection.site = site;
    return beachsection;
  };

  Voronoi.prototype.leftBreakPoint = function(arc, directrix) {
    var aby2, b, hl, lArc, lfocx, lfocy, pby2, plby2, rfocx, rfocy, site;
    site = arc.site;
    rfocx = arc.site.x;
    rfocy = arc.site.y;
    pby2 = rfocy - directrix;
    if (!pby2) {
      return rfocx;
    }
    lArc = arc.rbPrevious;
    if (!lArc) {
      return -Infinity;
    }
    site = lArc.site;
    lfocx = site.x;
    lfocy = site.y;
    plby2 = lfocy - directrix;
    if (!plby2) {
      return lfocx;
    }
    hl = lfocx - rfocx;
    aby2 = 1 / pby2 - 1 / plby2;
    b = hl / plby2;
    if (aby2) {
      return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    }
    return (rfocx + lfocx) / 2;
  };

  Voronoi.prototype.rightBreakPoint = function(arc, directrix) {
    var rArc, site;
    rArc = arc.rbNext;
    if (rArc) {
      return this.leftBreakPoint(rArc, directrix);
    }
    site = arc.site;
    if (site.y === directrix) {
      return site.x;
    }
    return Infinity;
  };

  Voronoi.prototype.detachBeachsection = function(beachsection) {
    this.detachCircleEvent(beachsection);
    this.beachline.removeNode(beachsection);
    return this.beachsectionJunkyard.push(beachsection);
  };

  Voronoi.prototype.removeBeachsection = function(beachsection) {
    var abs_fn, circle, disappearingTransitions, i, iArc, lArc, nArcs, next, previous, rArc, ref1, vertex, x, y;
    circle = beachsection.circleEvent;
    x = circle.x;
    y = circle.ycenter;
    vertex = this.createVertex(x, y);
    previous = beachsection.rbPrevious;
    next = beachsection.rbNext;
    disappearingTransitions = [beachsection];
    abs_fn = Math.abs;
    this.detachBeachsection(beachsection);
    lArc = previous;
    while ((lArc.circleEvent && abs_fn(x - lArc.circleEvent.x) < 1e-9) && abs_fn(y - lArc.circleEvent.ycenter) < 1e-9) {
      previous = lArc.rbPrevious;
      disappearingTransitions.unshift(lArc);
      this.detachBeachsection(lArc);
      lArc = previous;
    }
    disappearingTransitions.unshift(lArc);
    this.detachCircleEvent(lArc);
    rArc = next;
    while ((rArc.circleEvent && abs_fn(x - rArc.circleEvent.x) < 1e-9) && abs_fn(y - rArc.circleEvent.ycenter) < 1e-9) {
      next = rArc.rbNext;
      disappearingTransitions.push(rArc);
      this.detachBeachsection(rArc);
      rArc = next;
    }
    disappearingTransitions.push(rArc);
    this.detachCircleEvent(rArc);
    nArcs = disappearingTransitions.length;
    iArc;
    for (iArc = i = 1, ref1 = nArcs - 1; 1 <= ref1 ? i <= ref1 : i >= ref1; iArc = 1 <= ref1 ? ++i : --i) {
      rArc = disappearingTransitions[iArc];
      lArc = disappearingTransitions[iArc - 1];
      this.setEdgeStartpoint(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearingTransitions[0];
    rArc = disappearingTransitions[nArcs - 1];
    rArc.edge = this.createEdge(lArc.site, rArc.site, void 0, vertex);
    this.attachCircleEvent(lArc);
    return this.attachCircleEvent(rArc);
  };

  Voronoi.prototype.addBeachsection = function(site) {
    var ax, ay, cx, cy, d, directrix, dx, dxl, dxr, dy, hb, hc, lArc, lSite, newArc, node, rArc, rSite, vertex, x;
    x = site.x;
    directrix = site.y;
    lArc;
    rArc;
    dxl;
    dxr;
    node = this.beachline.root;
    while (node) {
      dxl = this.leftBreakPoint(node, directrix) - x;
      if (dxl > 1e-9) {
        node = node.rbLeft;
      } else {
        dxr = x - this.rightBreakPoint(node, directrix);
        if (dxr > 1e-9) {
          if (!node.rbRight) {
            lArc = node;
            break;
          }
          node = node.rbRight;
        } else {
          if (dxl > -1e-9) {
            lArc = node.rbPrevious;
            rArc = node;
          } else if (dxr > -1e-9) {
            lArc = node;
            rArc = node.rbNext;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    newArc = this.createBeachsection(site);
    this.beachline.insertSuccessor(lArc, newArc);
    if (!lArc && !rArc) {
      return;
    }
    if (lArc === rArc) {
      this.detachCircleEvent(lArc);
      rArc = this.createBeachsection(lArc.site);
      this.beachline.insertSuccessor(newArc, rArc);
      newArc.edge = rArc.edge = this.createEdge(lArc.site, newArc.site);
      this.attachCircleEvent(lArc);
      this.attachCircleEvent(rArc);
      return;
    }
    if (lArc && !rArc) {
      newArc.edge = this.createEdge(lArc.site, newArc.site);
      return;
    }
    if (lArc !== rArc) {
      this.detachCircleEvent(lArc);
      this.detachCircleEvent(rArc);
      lSite = lArc.site;
      ax = lSite.x;
      ay = lSite.y;
      dx = site.x - ax;
      dy = site.y - ay;
      rSite = rArc.site;
      cx = rSite.x - ax;
      cy = rSite.y - ay;
      d = 2 * (dx * cy - dy * cx);
      hb = dx * dx + dy * dy;
      hc = cx * cx + cy * cy;
      vertex = this.createVertex((cy * hb - dy * hc) / d + ax, (dx * hc - cx * hb) / d + ay);
      this.setEdgeStartpoint(rArc.edge, lSite, rSite, vertex);
      newArc.edge = this.createEdge(lSite, site, void 0, vertex);
      rArc.edge = this.createEdge(site, rSite, void 0, vertex);
      this.attachCircleEvent(lArc);
      this.attachCircleEvent(rArc);
    }
  };

  Voronoi.prototype.attachCircleEvent = function(arc) {
    var ax, ay, cSite, circleEvent, cx, cy, d, dx, dy, ha, hc, lArc, lSite, node, predecessor, rArc, rSite, x, y, ycenter;
    lArc = arc.rbPrevious;
    rArc = arc.rbNext;
    if (!lArc || !rArc) {
      return;
    }
    lSite = lArc.site;
    cSite = arc.site;
    rSite = rArc.site;
    if (lSite === rSite) {
      return;
    }
    dx = cSite.x;
    dy = cSite.y;
    ax = lSite.x - dx;
    ay = lSite.y - dy;
    cx = rSite.x - dx;
    cy = rSite.y - dy;
    d = 2 * (ax * cy - ay * cx);
    if (d >= -2e-12) {
      return;
    }
    ha = ax * ax + ay * ay;
    hc = cx * cx + cy * cy;
    x = (cy * ha - ay * hc) / d;
    y = (ax * hc - cx * ha) / d;
    ycenter = y + dy;
    circleEvent = this.circleEventJunkyard.pop();
    if (!circleEvent) {
      circleEvent = new CircleEvent();
    }
    circleEvent.arc = arc;
    circleEvent.site = cSite;
    circleEvent.x = x + dx;
    circleEvent.y = ycenter + Math.sqrt(x * x + y * y);
    circleEvent.ycenter = ycenter;
    arc.circleEvent = circleEvent;
    predecessor = null;
    node = this.circleEvents.root;
    while (node) {
      if (circleEvent.y < node.y || (circleEvent.y === node.y && circleEvent.x <= node.x)) {
        if (node.rbLeft) {
          node = node.rbLeft;
        } else {
          predecessor = node.rbPrevious;
          break;
        }
      } else {
        if (node.rbRight) {
          node = node.rbRight;
        } else {
          predecessor = node;
          break;
        }
      }
    }
    this.circleEvents.insertSuccessor(predecessor, circleEvent);
    if (!predecessor) {
      return this.firstCircleEvent = circleEvent;
    }
  };

  Voronoi.prototype.detachCircleEvent = function(arc) {
    var circleEvent;
    circleEvent = arc.circleEvent;
    if (circleEvent) {
      if (!circleEvent.rbPrevious) {
        this.firstCircleEvent = circleEvent.rbNext;
      }
      this.circleEvents.removeNode(circleEvent);
      this.circleEventJunkyard.push(circleEvent);
      return arc.circleEvent = null;
    }
  };

  Voronoi.prototype.connectEdge = function(edge, bbox) {
    var fb, fm, fx, fy, lSite, lx, ly, rSite, rx, ry, va, vb, xl, xr, yb, yt;
    vb = edge.vb;
    if (!!vb) {
      return true;
    }
    va = edge.va;
    xl = bbox.xl;
    xr = bbox.xr;
    yt = bbox.yt;
    yb = bbox.yb;
    lSite = edge.lSite;
    rSite = edge.rSite;
    lx = lSite.x;
    ly = lSite.y;
    rx = rSite.x;
    ry = rSite.y;
    fx = (lx + rx) / 2;
    fy = (ly + ry) / 2;
    fm;
    fb;
    this.cells[lSite.voronoiId].closeMe = true;
    this.cells[rSite.voronoiId].closeMe = true;
    if (ry !== ly) {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
    }
    if (fm === void 0) {
      if (fx < xl || fx >= xr) {
        return false;
      }
      if (lx > rx) {
        if (!va || va.y < yt) {
          va = this.createVertex(fx, yt);
        } else if (va.y >= yb) {
          return false;
        }
        vb = this.createVertex(fx, yb);
      } else {
        if (!va || va.y > yb) {
          va = this.createVertex(fx, yb);
        } else if (va.y < yt) {
          return false;
        }
        vb = this.createVertex(fx, yt);
      }
    } else if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!va || va.y < yt) {
          va = this.createVertex((yt - fb) / fm, yt);
        } else if (va.y >= yb) {
          return false;
        }
        vb = this.createVertex((yb - fb) / fm, yb);
      } else {
        if (!va || va.y > yb) {
          va = this.createVertex((yb - fb) / fm, yb);
        } else if (va.y < yt) {
          return false;
        }
        vb = this.createVertex((yt - fb) / fm, yt);
      }
    } else {
      if (ly < ry) {
        if (!va || va.x < xl) {
          va = this.createVertex(xl, fm * xl + fb);
        } else if (va.x >= xr) {
          return false;
        }
        vb = this.createVertex(xr, fm * xr + fb);
      } else {
        if (!va || va.x > xr) {
          va = this.createVertex(xr, fm * xr + fb);
        } else if (va.x < xl) {
          return false;
        }
        vb = this.createVertex(xl, fm * xl + fb);
      }
    }
    edge.va = va;
    edge.vb = vb;
    return true;
  };

  Voronoi.prototype.clipEdge = function(edge, bbox) {
    var ax, ay, dx, dy, q, r, t0, t1;
    ax = edge.va.x;
    ay = edge.va.y;
    dx = edge.vb.x;
    dy = edge.vb.y;
    t0 = 0;
    t1 = 1;
    dx = dx - ax;
    dy = dy - ay;
    q = ax - bbox.xl;
    if (dx === 0 && q < 0) {
      return false;
    }
    r = -q / dx;
    if (dx < 0) {
      if (r < t0) {
        return false;
      }
      if (r < t1) {
        t1 = r;
      }
    } else if (dx > 0) {
      if (r > t1) {
        return false;
      }
      if (r > t0) {
        t0 = r;
      }
    }
    q = bbox.xr - ax;
    if (dx === 0 && q < 0) {
      return false;
    }
    r = q / dx;
    if (dx < 0) {
      if (r > t1) {
        return false;
      }
      if (r > t0) {
        t0 = r;
      }
    } else if (dx > 0) {
      if (r < t0) {
        return false;
      }
      if (r < t1) {
        t1 = r;
      }
    }
    q = ay - bbox.yt;
    if (dy === 0 && q < 0) {
      return false;
    }
    r = -q / dy;
    if (dy < 0) {
      if (r < t0) {
        return false;
      }
      if (r < t1) {
        t1 = r;
      }
    } else if (dy > 0) {
      if (r > t1) {
        return false;
      }
      if (r > t0) {
        t0 = r;
      }
    }
    q = bbox.yb - ay;
    if (dy === 0 && q < 0) {
      return false;
    }
    r = q / dy;
    if (dy < 0) {
      if (r > t1) {
        return false;
      }
      if (r > t0) {
        t0 = r;
      }
    } else if (dy > 0) {
      if (r < t0) {
        return false;
      }
      if (r < t1) {
        t1 = r;
      }
    }
    if (t0 > 0) {
      edge.va = this.createVertex(ax + t0 * dx, ay + t0 * dy);
    }
    if (t1 < 1) {
      edge.vb = this.createVertex(ax + t1 * dx, ay + t1 * dy);
    }
    if (t0 > 0 || t1 < 1) {
      this.cells[edge.lSite.voronoiId].closeMe = true;
      this.cells[edge.rSite.voronoiId].closeMe = true;
    }
    return true;
  };

  Voronoi.prototype.clipEdges = function(bbox) {
    var abs_fn, edge, edges, iEdge, results;
    edges = this.edges;
    iEdge = edges.length;
    edge;
    abs_fn = Math.abs;
    results = [];
    while (iEdge--) {
      edge = edges[iEdge];
      if (!this.connectEdge(edge, bbox) || !this.clipEdge(edge, bbox) || (abs_fn(edge.va.x - edge.vb.x) < 1e-9 && abs_fn(edge.va.y - edge.vb.y) < 1e-9)) {
        edge.va = edge.vb = null;
        results.push(edges.splice(iEdge, 1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Voronoi.prototype.closeCells = function(bbox) {
    var abs_fn, cell, cells, edge, halfedges, iCell, iLeft, lastBorderSegment, nHalfedges, results, tx, ty, va, vb, vz, xl, xr, yb, yt;
    xl = bbox.xl;
    xr = bbox.xr;
    yt = bbox.yt;
    yb = bbox.yb;
    cells = this.cells;
    iCell = cells.length;
    cell;
    iLeft;
    halfedges;
    nHalfedges;
    edge;
    va;
    vb;
    vz;
    lastBorderSegment;
    abs_fn = Math.abs;
    results = [];
    while (iCell--) {
      cell = cells[iCell];
      if (!cell.prepareHalfedges()) {
        continue;
      }
      if (!cell.closeMe) {
        continue;
      }
      halfedges = cell.halfedges;
      nHalfedges = halfedges.length;
      iLeft = 0;
      while (iLeft < nHalfedges) {
        va = halfedges[iLeft].getEndpoint();
        vz = halfedges[(iLeft + 1) % nHalfedges].getStartpoint();
        if (abs_fn(va.x - vz.x) >= 1e-9 || abs_fn(va.y - vz.y) >= 1e-9) {
          switch (true) {
            case this.equalWithEpsilon(va.x, xl) && this.lessThanWithEpsilon(va.y, yb):
              lastBorderSegment = this.equalWithEpsilon(vz.x, xl);
              ty = yb;
              if (lastBorderSegment) {
                ty = vz.y;
              }
              vb = this.createVertex(xl, ty);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              va = vb;
              break;
            case this.equalWithEpsilon(va.y, yb) && this.lessThanWithEpsilon(va.x, xr):
              lastBorderSegment = this.equalWithEpsilon(vz.y, yb);
              tx = xr;
              if (lastBorderSegment) {
                tx = vz.x;
              }
              vb = this.createVertex(tx, yb);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              va = vb;
              break;
            case this.equalWithEpsilon(va.x, xr) && this.greaterThanWithEpsilon(va.y, yt):
              lastBorderSegment = this.equalWithEpsilon(vz.x, xr);
              ty = yt;
              if (lastBorderSegment) {
                ty = vz.y;
              }
              vb = this.createVertex(xr, ty);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              va = vb;
              break;
            case this.equalWithEpsilon(va.y, yt) && this.greaterThanWithEpsilon(va.x, xl):
              lastBorderSegment = this.equalWithEpsilon(vz.y, yt);
              tx = xl;
              if (lastBorderSegment) {
                tx = vz.x;
              }
              vb = this.createVertex(tx, yt);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              va = vb;
              lastBorderSegment = this.equalWithEpsilon(vz.x, xl);
              ty = yb;
              if (lastBorderSegment) {
                ty = vz.y;
              }
              vb = this.createVertex(xl, ty);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              va = vb;
              lastBorderSegment = this.equalWithEpsilon(vz.y, yb);
              tx = xr;
              if (lastBorderSegment) {
                tx = vz.x;
              }
              vb = this.createVertex(tx, yb);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              va = vb;
              lastBorderSegment = this.equalWithEpsilon(vz.x, xr);
              ty = yt;
              if (lastBorderSegment) {
                ty = vz.y;
              }
              vb = this.createVertex(xr, ty);
              edge = this.createBorderEdge(cell.site, va, vb);
              iLeft++;
              halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
              nHalfedges++;
              if (lastBorderSegment) {
                break;
              }
              break;
            default:
              throw "Voronoi.closeCells() > this makes no sense!";
          }
        }
        iLeft++;
      }
      results.push(cell.closeMe = false);
    }
    return results;
  };

  Voronoi.prototype.dumpBeachline = function(y) {
    var bs, results;
    console.log('Voronoi.dumpBeachline(%f) > Beachsections, from left to right:', y);
    if (!this.beachline) {
      return console.log('  None');
    } else {
      bs = this.beachline.getFirst(this.beachline.root);
      results = [];
      while (bs) {
        console.log('  site %d: xl: %f, xr: %f', bs.site.voronoiId, this.leftBreakPoint(bs, y), this.rightBreakPoint(bs, y));
        results.push(bs = bs.rbNext);
      }
      return results;
    }
  };

  Voronoi.prototype.isSegment = function(site) {
    var edge, i, len, ref1;
    ref1 = this.segments;
    for (i = 0, len = ref1.length; i < len; i++) {
      edge = ref1[i];
      if (site === edge[0] || site === edge[1]) {
        return true;
      }
    }
    return false;
  };

  Voronoi.prototype.quantizeSites = function(sites) {
    var e, n, results, site;
    e = this.epsilon;
    n = sites.length;
    site;
    results = [];
    while (n--) {
      site = sites[n];
      site.x = Math.floor(site.x / e) * e;
      results.push(site.y = Math.floor(site.y / e) * e);
    }
    return results;
  };

  Voronoi.prototype.recycle = function(diagram) {
    if (diagram) {
      if (diagram instanceof Diagram) {
        return this.toRecycle = diagram;
      } else {
        throw 'Voronoi.recycleDiagram() > Need a Diagram object.';
      }
    }
  };

  Voronoi.prototype.compute = function(sites, bbox, segments) {
    var cells, circle, diagram, site, siteEvents, siteid, startTime, stopTime, xsitex, xsitey;
    startTime = new Date();
    this.reset();
    this.segments = segments;
    if (this.toRecycle) {
      this.vertexJunkyard = this.vertexJunkyard.concat(this.toRecycle.vertices);
      this.edgeJunkyard = this.edgeJunkyard.concat(this.toRecycle.edges);
      this.cellJunkyard = this.cellJunkyard.concat(this.toRecycle.cells);
      this.toRecycle = null;
    }
    siteEvents = sites.slice(0);
    siteEvents.sort(function(a, b) {
      var r;
      r = b.y - a.y;
      if (r) {
        return r;
      }
      return b.x - a.x;
    });
    site = siteEvents.pop();
    siteid = 0;
    xsitex;
    xsitey;
    cells = this.cells;
    circle;
    while (true) {
      circle = this.firstCircleEvent;
      if (site && (!circle || site.y < circle.y || (site.y === circle.y && site.x < circle.x))) {
        if (site.x !== xsitex || site.y !== xsitey) {
          cells[siteid] = this.createCell(site);
          site.voronoiId = siteid++;
          this.addBeachsection(site);
          xsitey = site.y;
          xsitex = site.x;
        }
        site = siteEvents.pop();
      } else if (circle) {
        this.removeBeachsection(circle.arc);
      } else {
        break;
      }
    }
    this.clipEdges(bbox);
    this.closeCells(bbox);
    stopTime = new Date();
    diagram = new Diagram();
    diagram.cells = this.cells;
    diagram.edges = this.edges;
    diagram.vertices = this.vertices;
    diagram.execTime = stopTime.getTime() - startTime.getTime();
    this.reset();
    return diagram;
  };

  return Voronoi;

})();

module.exports = {
  Voronoi: Voronoi
};



},{"../math/math":30,"./red_black_tree":39}],44:[function(require,module,exports){

/* ABOUT
             .__   
_________  __|  |  
\____ \  \/  /  |  
|  |_> >    <|  |__
|   __/__/\_ \____/
|__|        \/     js

                    PXL.js
                    Benjamin Blundell - ben@pxljs.com
                    http://pxljs.com

This software is released under the MIT Licence. See LICENCE.txt for details

Webcam Access
 */
var PXLError, PXLWarning, WebCamRTC, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./log'), PXLWarning = ref.PXLWarning, PXLError = ref.PXLError;

WebCamRTC = (function() {
  WebCamRTC.prototype.hasGetUserMedia = function() {
    return (navigator.getUserMedia != null) || (navigator.webkitGetUserMedia != null) || (navigator.mozGetUserMedia != null) || (navigator.msGetUserMedia != null);
  };

  WebCamRTC.prototype.errorCallback = function(user_callback) {
    PXLWarning("Cannot create WebRTC video!");
    if (user_callback != null) {
      user_callback();
    }
    return this;
  };

  function WebCamRTC(dom_object_id, width, height, grab_audio, on_error) {
    this.errorCallback = bind(this.errorCallback, this);
    var error_handler, video_params;
    video_params = {};
    video_params["video"] = true;
    if ((width != null) || (height != null)) {
      video_params["mandatory"] = {};
      if (width != null) {
        video_params["mandatory"]["width"] = width;
      }
      if (height != null) {
        video_params["mandatory"]["height"] = height;
      }
    }
    if (!this.hasGetUserMedia) {
      PXLWarning("No support in this browser for WebRTC.");
      if (on_error != null) {
        on_error();
      }
      return;
    }
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (grab_audio == null) {
      grab_audio = false;
    }
    video_params["audio"] = grab_audio;
    this.dom_object = document.getElementById(dom_object_id);
    error_handler = this.errorCallback;
    if (on_error != null) {
      error_handler = on_error;
    }
    navigator.getUserMedia(video_params, (function(_this) {
      return function(stream) {
        return _this.dom_object.src = window.URL.createObjectURL(stream);
      };
    })(this), error_handler);
    this;
  }

  return WebCamRTC;

})();

'MediaStreamTrack.getSources(function(sourceInfos) {\n  var audioSource = null;\n  var videoSource = null;\n\n  for (var i = 0; i != sourceInfos.length; ++i) {\n    var sourceInfo = sourceInfos[i];\n    if (sourceInfo.kind === \'audio\') {\n      console.log(sourceInfo.id, sourceInfo.label || \'microphone\');\n\n      audioSource = sourceInfo.id;\n    } else if (sourceInfo.kind === \'video\') {\n      console.log(sourceInfo.id, sourceInfo.label || \'camera\');\n\n      videoSource = sourceInfo.id;\n    } else {\n      console.log(\'Some other kind of source: \', sourceInfo);\n    }\n  }\n\n  sourceSelected(audioSource, videoSource);\n});\n\nfunction sourceSelected(audioSource, videoSource) {\n  var constraints = {\n    audio: {\n      optional: [{sourceId: audioSource}]\n    },\n    video: {\n      optional: [{sourceId: videoSource}]\n    }\n  };\n\n  navigator.getUserMedia(constraints, successCallback, errorCallback);\n}';

module.exports = {
  WebCamRTC: WebCamRTC
};



},{"./log":35}],45:[function(require,module,exports){

},{}]},{},[32])
//# sourceMappingURL=data:application/json;base64,
