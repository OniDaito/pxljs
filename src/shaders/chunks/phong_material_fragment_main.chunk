#ifdef MAT_PHONG
vec3 materialDiffuseColour = uMaterialDiffuseColour;
vec3 materialSpecularColour = uMaterialSpecularColour;
vec3 materialEmissiveColour = uMaterialEmissiveColour;
 
#ifdef VERTEX_TEXTURE
if(bitcheck(uUber0,10)){ materialDiffuseColour = texture2D(uSamplerDiffuse, vTexCoord).rgb;}
if(bitcheck(uUber0,11)){ materialSpecularColour = texture2D(uSamplerSpecular, vTexCoord).rgb;}
if(bitcheck(uUber0,12)){ materialEmissiveColour = texture2D(uSamplerEmissive, vTexCoord).rgb;}
#endif

vec3 specularLightWeighting = vec3(0.0, 0.0, 0.0);
vec3 diffuseLightWeighting = vec3(0.0, 0.0, 0.0);
vec3 materialAmbientColour = uMaterialAmbientColour * uAmbientLightingColour;
gl_FragColor = vec4(materialAmbientColour, 1.0);
vec3 eyeDirection = normalize(-vPosition.xyz);

#ifdef LIGHTING_POINT
for (int i=0; i < LIGHTING_NUM_POINT_LIGHTS; i++) {
  // TODO could potentially transform the lights in the vertex shader?
  // TODO - previously we added a break in here for lights - do we keep that?
  // TODO - attenuation factor
  vec3 lightDirection = normalize((uModelMatrix * vec4(uPointLightPos[i],1.0)).xyz - vPosition.xyz);
  vec3 reflectionDirection = reflect(-lightDirection, vTransformedNormal.xyz);
  float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
  specularLightWeighting = specularLightWeighting + (uPointLightColour[i] * specularLightBrightness);
  float diffuseLightBrightness = max(dot(vTransformedNormal.xyz, lightDirection), 0.0);
  diffuseLightWeighting = diffuseLightWeighting + (uPointLightColour[i] * diffuseLightBrightness);
  gl_FragColor += vec4( materialDiffuseColour * diffuseLightWeighting 
   + materialSpecularColour * specularLightWeighting
   + materialEmissiveColour,
   0.0);
}
#endif

// Really annoyingly, in earlier browser releases we have to manually unroll. This suggests some kind of auto
// shader pre-build step using gulp or similar
// This means all spotlight work must be unrolled

#ifdef LIGHTING_SPOT
for (int i=0; i < LIGHTING_NUM_SPOT_LIGHTS; i++) {
#ifdef SHADOWMAP
/*  if(bitcheck(uUber0,14)){
    vec4 lightdepth = texture2D(uSamplerPointShadow[i],vShadowTexCoord[i].xy);
    if(lightdepth.x > gl_FragCoord.z ){
      continue;
    }
  }*/
#endif

  vec3 lightDirection = normalize((uModelMatrix * vec4(uSpotLightPos[i],1.0)).xyz - vPosition.xyz);
  float spotFactor = dot ( -lightDirection, uSpotLightDir[i]);
  if (spotFactor >= cos(uSpotLightAngle[i])){
    spotFactor = pow(spotFactor, uSpotLightExp[i]);
  } else {
    spotFactor = 0.0;
  }
  vec3 reflectionDirection = reflect(-lightDirection, vTransformedNormal.xyz);
  float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
  specularLightWeighting = specularLightWeighting + (uSpotLightColour[i] * specularLightBrightness);
  float diffuseLightBrightness = max(dot(vTransformedNormal.xyz, lightDirection), 0.0);
  diffuseLightWeighting = diffuseLightWeighting + (uSpotLightColour[i] * diffuseLightBrightness);
  specularLightWeighting *= spotFactor;
  diffuseLightWeighting *= spotFactor; 
  gl_FragColor += vec4( materialDiffuseColour * diffuseLightWeighting
   + materialSpecularColour * specularLightWeighting
   + materialEmissiveColour,
   0.0);
}
#endif
#endif
