#ifdef MAT_PHONG
vec3 materialDiffuseColour = uMaterialDiffuseColour;
vec3 materialSpecularColour = uMaterialSpecularColour;
vec3 materialEmissiveColour = uMaterialEmissiveColour;
 
#ifdef VERTEX_TEXTURE
if(bitcheck(uUber0,10)){ materialDiffuseColour = texture2D(uSamplerDiffuse, vTexCoord).rgb;}
if(bitcheck(uUber0,11)){ materialSpecularColour = texture2D(uSamplerSpecular, vTexCoord).rgb;}
if(bitcheck(uUber0,12)){ materialEmissiveColour = texture2D(uSamplerEmissive, vTexCoord).rgb;}
#endif

vec3 specularLightWeighting = vec3(0.0, 0.0, 0.0);
vec3 diffuseLightWeighting = vec3(0.0, 0.0, 0.0);
vec3 materialAmbientColour = uMaterialAmbientColour * uAmbientLightingColour;
gl_FragColor = vec4(materialAmbientColour, 1.0);
vec3 eyeDirection = normalize(-vEyePosition.xyz);

#ifdef LIGHTING_POINT

for (int i=0; i < LIGHTING_NUM_POINT_LIGHTS; i++) {
  // TODO could potentially transform the lights in the vertex shader?
  // TODO - previously we added a break in here for lights - do we keep that?
  // TODO - attenuation factor
  vec3 lightDirection = normalize(uPointLightPos[i].xyz - vPosition.xyz);
  vec3 reflectionDirection = reflect(-lightDirection, vTransformedNormal.xyz);
  float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
  specularLightWeighting = specularLightWeighting + (uPointLightColour[i] * specularLightBrightness);
  float diffuseLightBrightness = max(dot(vTransformedNormal.xyz, lightDirection), 0.0);
  diffuseLightWeighting = diffuseLightWeighting + (uPointLightColour[i] * diffuseLightBrightness);
  gl_FragColor += vec4( materialDiffuseColour * diffuseLightWeighting 
   + materialSpecularColour * specularLightWeighting
   + materialEmissiveColour,
   0.0);
}
#endif

#ifdef LIGHTING_SPOT

// TODO - shadowmap scale might be removed to its own place for use in other materials

float shadow_scale[LIGHTING_NUM_SPOT_LIGHTS];
for (int i=0; i < LIGHTING_NUM_SPOT_LIGHTS; i++) {
  shadow_scale[i] = 1.0;
}

#ifdef SHADOWMAP
// TODO - Eventually shadowmap will exist outside of phong material when we add others
// Unflattened texture lookups for now sadly

if(bitcheck(uUber0,14)) {

  mat4 bias = mat4(0.5,0.0,0.0,0.0, 0.0,0.5,0.0,0.0, 0.0,0.0,0.5,0.0, 0.5,0.5,0.5,1.0);

  vec4 spotPosLight = bias * uSpotLightInvMatrix[0] * vPosition;
  //spotPosLight.x = spotPosLight.x * 2.0 - 1.0;
  //spotPosLight.y = spotPosLight.y * 2.0 - 1.0;
  if (spotPosLight.x <= 1.0 && spotPosLight.x >= 0.0 && spotPosLight.y <= 1.0 && spotPosLight.y >= 0.0) {
    // should be -1 to 1 in theory with the unpack
    float lightDepth = unpack(texture2D(uSamplerSpotShadow[0], spotPosLight.xy)) * 2.0 - 1.0;
    if(lightDepth < spotPosLight.z){
      shadow_scale[0] = 0.0;
    }
  }
  
  spotPosLight = bias * uSpotLightInvMatrix[1] * vPosition;
  if (spotPosLight.x <= 1.0 && spotPosLight.x >= 0.0 && spotPosLight.y <= 1.0 && spotPosLight.y >= 0.0) { 
    float lightDepth = unpack(texture2D(uSamplerSpotShadow[1], spotPosLight.xy));
    if(lightDepth < spotPosLight.z){
      shadow_scale[1] = 0.0;
    }
  }

}


#endif

for (int i=0; i < LIGHTING_NUM_SPOT_LIGHTS; i++) {
  vec3 lightDirection = normalize(uSpotLightPos[i].xyz - vPosition.xyz);
  float spotFactor = dot ( -lightDirection, uSpotLightDir[i]);
  if (spotFactor >= cos(uSpotLightAngle[i])){
    spotFactor = pow(spotFactor, uSpotLightExp[i]);
  } else {
    spotFactor = 0.0;
  }
  vec3 reflectionDirection = reflect(-lightDirection, vTransformedNormal.xyz);
  float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
  specularLightWeighting = specularLightWeighting + (uSpotLightColour[i] * specularLightBrightness);
  float diffuseLightBrightness = max(dot(vTransformedNormal.xyz, lightDirection), 0.0);
  diffuseLightWeighting = uSpotLightColour[i] * diffuseLightBrightness;
  specularLightWeighting *= spotFactor;
  //diffuseLightWeighting *= spotFactor;
  vec3 final =  (materialDiffuseColour * diffuseLightWeighting + materialSpecularColour * specularLightWeighting + materialEmissiveColour) * shadow_scale[i];
  gl_FragColor += vec4(final,0.0);
}


#endif
#endif
