#define LIGHTING_NUM_SPOT_LIGHTS 5 
uniform int uSpotLightNum;
uniform vec3 uSpotLightPos[LIGHTING_NUM_SPOT_LIGHTS];
uniform vec3 uSpotLightColour[LIGHTING_NUM_SPOT_LIGHTS];
uniform vec3 uSpotLightDir[LIGHTING_NUM_SPOT_LIGHTS];         // TODO - if normalised can reduce down - optimise
uniform vec4 uSpotLightAttenuation[LIGHTING_NUM_SPOT_LIGHTS];
uniform float uSpotLightAngle[LIGHTING_NUM_SPOT_LIGHTS];
uniform float uSpotLightExp[LIGHTING_NUM_SPOT_LIGHTS];
#ifdef SHADOWMAP
uniform sampler2D uSamplerSpotShadow[LIGHTING_NUM_SPOT_LIGHTS];
// TODO - In WebGL2.0 we can perform sampler lookups in the vertex shader and do our matrix
// math there instead of per fragment which will speed things up
uniform mat4 uSpotLightInvMatrix[LIGHTING_NUM_SPOT_LIGHTS];
varying vec4 vSpotPosLight[LIGHTING_NUM_SPOT_LIGHTS];
#endif
